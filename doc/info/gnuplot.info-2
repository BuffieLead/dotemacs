Info file: gnuplot.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnuplot-ja.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.



INFO-DIR-SECTION Math
START-INFO-DIR-ENTRY
* GNUPLOT: (gnuplot).             An Interactive Plotting Program
END-INFO-DIR-ENTRY




File: gnuplot.info, Node: lmargin, Next: loadpath, Prev: 線種_(linetype), Up: set-show

lmargin
-------



コマンド *Note lmargin:: は左の余白のサイズをセットします。詳細は、以下
参照: *Note margin::。



File: gnuplot.info, Node: loadpath, Next: locale, Prev: lmargin, Up: set-show

loadpath
--------



*Note loadpath:: の設定は、*Note call::, `load`, *Note plot::, `splot`
コマンドのデータファイル、コマンドファイルの検索パスを追加定義します。
ファイルが現在のディレクトリに見つからなかった場合、*Note loadpath:: の
ディレクトリが検索されます。

書式:
           set loadpath {"pathlist1" {"pathlist2"...}}
           show loadpath


パス名は単一のディレクトリ名、または複数のパス名のリストとして入力しま
す。複数のパスからなるパスリストは OS 固有のパス区切り、例えば Unix で
はコロン (':'), MS-DOS, Windows, OS/2 ではセミコロン (';') 等で区切りま
す。*Note loadpath::, *Note save::, `save set` コマンドは、OS 固有のパ
ス区切りをスペース (' ') で置き換えます。

環境変数 GNUPLOT_LIB が設定されている場合、その内容は *Note loadpath::
に追加されますが、*Note loadpath:: は、*Note loadpath:: と GNUPLOT_LIB
の値を別々に表示しますし、*Note save::, `save set` コマンドは、
GNUPLOT_LIB の値の方は無視します。



File: gnuplot.info, Node: locale, Next: logscale, Prev: loadpath, Up: set-show

locale
------



*Note locale:: の設定は `{x,y,z}{d,m}tics` が書く日付の言語を決定します。

書式:
           set locale {"<locale>"}


<locale> にはインストールされたシステムで使うことの出来る任意の言語を指
定できます。可能なオプションについてはシステムのドキュメントを参照して
ください。コマンド `set locale ""` は、環境変数 LC_TIME, LC_ALL, または
LANG からロカールの値を決定しようとします。

小数点に関する locale を変更したい場合は、以下参照: *Note decimalsign::。
文字エンコードを現在のロカールのものに変更したい場合は、以下参照:
*Note encoding::。



File: gnuplot.info, Node: logscale, Next: macros, Prev: locale, Up: set-show

logscale
--------




書式:
           set logscale <axes> {<base>}
           unset logscale <axes>
           show logscale


ここで、<axes> (軸) は、`x`, `x2`, `y`, `y2`, `z`, `cb`, `r` の任意の順
序の組み合せが可能です。<base> は、対数目盛りの底です (デフォルトの底は
10)。軸を指定しなかった場合は、`r` 以外のすべての軸が対象となります。コ
マンド *Note logscale:: は、すべての軸の対数目盛りを解除します。対数軸
に作られた目盛りの刻みは一様間隔ではないことに注意してください。以下参
照: `set xtics`。

例:

x, z 両軸について対数目盛りを設定する:
            set logscale xz


y 軸について底 2 とする対数目盛りを設定する:
            set logscale y 2


pm3d plot 用に z と色の軸に対数目盛りを設定する:
            set logscale zcb


z 軸の対数目盛りを解除する:
            unset logscale z




File: gnuplot.info, Node: macros, Next: mapping, Prev: logscale, Up: set-show

macros
------

これによりコマンドラインのマクロ置換機能を有効にすると、コマンドライン
内の @<stringvariablename> の形式の部分文字列は、文字列変数
<stringvariablename> に含まれるテキスト文字列に置き換えられます。以下参
照: `substitution`。

書式:
          set macros





File: gnuplot.info, Node: mapping, Next: margin, Prev: macros, Up: set-show

mapping
-------



データが `splot` に球面座標や円柱座標で与えられた場合、*Note mapping::
コマンドは `gnuplot` にそれをどのように扱うかを指定するのに使われます。

書式:
           set mapping {cartesian | spherical | cylindrical}


デフォルトではカーテシアン座標 (通常の x,y,z 座標) が使われます。

球面座標では、データは 2 つか 3 つの列 (またはその個数の *Note using::
エントリ) として与えられます。最初の 2 つは、*Note angles:: で設定され
た単位での方位角 (theta) と仰角 (phi) (すなわち "経度" と "緯度") とみ
なされます。半径 r は、もし 3 列目のデータがあればそれが使われ、もしな
ければ1 に設定されます。各変数の x,y,z との対応は以下の通りです:

           x = r * cos(theta) * cos(phi)
           y = r * sin(theta) * cos(phi)
           z = r * sin(phi)


これは、"極座標系" というより、むしろ "地学上の座標系" (緯度、経度) に
相当することに注意してください (すなわち、phi は z 軸となす角、というよ
り赤道から計った仰角、になります)。

円柱座標では、データはやはり 2 つか 3 つの列で与えられ、最初の 2 つは
theta (`set angle` で指定された単位の) と z と見なされます。半径 r は球
面座標の場合と同様、3 列目のデータがあればそれが、なければ 1 と設定され
ます。各変数の x,y,z との対応は以下の通りです:

           x = r * cos(theta)
           y = r * sin(theta)
           z = z


*Note mapping:: の効果は、`splot` コマンド上の *Note using:: によるフィ
ルタで実現することも可能ですが、多くのデータファイルが処理される場合は
*Note mapping::の方が便利でしょう。しかし、*Note mapping:: を使っていて
も、もしファイルのデータの順番が適切でなかったら結局 *Note using:: が必
要になってしまいます。

*Note mapping:: は *Note plot:: では何もしません。world.dem: mapping の
デモ。 (http://www.gnuplot.info/demo/world.html)



File: gnuplot.info, Node: margin, Next: mouse, Prev: mapping, Up: set-show

margin
------



*Note margin:: (周囲の余白) とは、描画領域の境界からキャンバスの一番外
側までの間隔のことです。この余白の大きさは自動的にとられますが、コマン
ド*Note margin:: で変更することもできます。*Note margin:: は現在の設定
を表示します。描画領域の境界から内側の描画要素までの間隔を変更したい場
合は以下参照: *Note offsets::。

書式:
           set bmargin {{at screen} <margin>}
           set lmargin {{at screen} <margin>}
           set rmargin {{at screen} <margin>}
           set tmargin {{at screen} <margin>}
           show margin


<margin> のデフォルトの単位には、適切と思われる、文字の高さと幅が使われ
ます。正の値は余白の絶対的な大きさを定義し、負の値 (または無指定) は
`gnuplot` によって自動計算される値を使うことになります。3 次元描画では
左の余白 (lmargin) のみが文字の大きさを単位として設定できます。

キーワード `at screen` は、その余白の指定が全体の描画領域に対する割合で
あることを意味します。これは、多重描画 (multiplot) モードでの 2D, 3Dグ
ラフの角を正確に揃えるのに使えます。この配置は現在の *Note origin:: や
や *Note size:: の値を無視するようになっていて、それは多重描画内のグラ
フの配置の別の方法として使われることを意図しています。

描画の余白は通常目盛り、目盛りの見出し、軸の見出し、描画のタイトル、日
付、そして境界の外にある場合の key (グラフ見出し) のサイズ等を元に計算
されます。しかし、目盛りの刻みが境界でなく軸の方についている場合 (例え
ば `set xtics axis` によって)、目盛りの刻み自身とその見出しは余白の計算
には含まれませんし、余白に書かれる他の文字列の位置の計算にも含まれませ
ん。これは、軸と境界が非常に近い場合、軸の見出しが他の文字列を上書きす
る可能性を示唆します。



File: gnuplot.info, Node: mouse, Next: multiplot, Prev: margin, Up: set-show

mouse
-----





コマンド `set mouse` は、現在の対話型出力形式に対してマウス機能を有効に
します。対話型モードでは通常デフォルトでこれは有効になっていますが、コ
マンドがファイルから読み込まれる場合はデフォルトでは無効になっています。

マウスモードは 2 種類用意されています。2 次元モードは、*Note plot:: コ
マンドと `splot` の 2 次元射影 (すなわち、z の回転角が 0, 90, 180,
270, 360度の *Note view::、および `set view map`) で動作します。このモー
ドでは、マウス位置が追跡され、マウスボタンや矢印キーを使って拡大したり
視点移動したりできます。グラフに対応する key タイトルや別なウィジェット
アイコンなどをクリックすることで、個々のグラフの描画をオン/オフに切り替
えることをサポートする出力形式もあります。

`splot` による 3 次元グラフに対しては、グラフの視方向 (view) と縮尺の変
更が、それぞれマウスボタン 1 と 2 (によるドラッグ) で行えます。ボタン
2 の垂直方向のドラッグを shift キーと同時に行うと、z 軸の一番下の位置
(*Note xyplane::) を上下します。これらのボタンにさらに <ctrl> キーを押
すと、座標軸は表示されますが、データの表示は消えます。これは大きなデー
タに対して有用でしょう。

マウスは多重描画 (multiplot) モード内では無効ですが、*Note multiplot::
で多重描画が完結すれば、マウス機能は ON になります。ただし、その作用は
multiplot 内の最後の描画 (replot で描画されるようなもの) に対してのみで
す。

書式:
           set mouse {doubleclick <ms>} {nodoubleclick} \
                     {{no}zoomcoordinates} \
                     {noruler | ruler {at x,y}} \
                     {polardistance{deg|tan} | nopolardistance} \
                     {format <string>} \
                     {clipboardformat <int>/<string>} \
                     {mouseformat <int>/<string>} \
                     {{no}labels {"labeloptions"}} \
                     {{no}zoomjump} {{no}verbose}
           unset mouse


オプション `noruler` と `ruler` は、定規 (ruler) 機能を off, on にしま
す。`ruler` には座標を与えて原点を設定することもできます。`ruler` がon
の間、ruler の原点からマウスまでのユーザ単位での距離が連続的に表示され
ます。デフォルトでは、ruler のトグルスイッチは 'r' にキー割り当てされて
います。

オプション `polardistance` は、マウスカーソルから定規 (ruler) までの距
離を極座標でも表示 (距離、および角度または傾き) するかどうかを決定しま
す。これはデフォルトのキー割り当て '5' に対応します。


ボタン 2 の gnuplot の永続的なラベルを定義するには、オプション*Note
labels:: を使用します。デフォルトは `nolabels` で、ボタン 2 は単に一時
的なラベルをマウス位置に描画します。ラベルは現在の *Note mouseformat::
の設定に従って書かれます。`labeloptions` 文字列は、コマンド `set
label` コマンドに渡されます。そのデフォルトは "point pointstyle 1" で、
これはラベル位置に小さいプラス (`+`) を描画します。一時的なラベルは、そ
の次の*Note replot::、またはマウスズーム操作では現れません。永続的なラ
ベルは、ラベルの点の上で Ctrl キーを押してボタン 2 をクリックすることで
消すことができます。実際のラベルの位置にどれ位近くでクリックしなければ
いけないかの閾値も *Note pointsize:: で決定されます。

オプション `verbose` が ON の場合、実行時の報告コマンドが表示されます。
このオプションはドライバウィンドウ上で `6` を打つことで ON/OFF がスイッ
チできます。デフォルトでは `verbose` は OFF になっています。

ドライバウィンドウ上で 'h' を打つと、マウスとキー割当の短い説明が表示さ
れます。これは、ユーザ定義のキー割当、すなわち `bind` コマンドによる
`hotkeys` (以下参照: `bind`) も表示されます。ユーザ定義の `hotkeys` は
デフォルトのキー割当を無効にします。以下も参照: `bind`, `label`。

* Menu:

* doubleclick::
* mouseformat::
* マウススクロール_(scrolling)::
* X11_でのマウス_(X11_mouse)::
* zoom::



File: gnuplot.info, Node: doubleclick, Next: mouseformat, Prev: mouse, Up: mouse

doubleclick
...........

ダブルクリックの解像度はミリ秒 (ms) 単位で与えます。これは、ボタン 1用
のもので、現在のマウス位置をクリップボード (`clipboard`) にコピーするの
に使います。デフォルトの値は 300 ms です。これを 0 ms に設定するとシン
グルクリックでそのコピーを行うようになります。



File: gnuplot.info, Node: mouseformat, Next: マウススクロール_(scrolling), Prev: doubleclick, Up: mouse

mouseformat
...........


コマンド *Note format:: は、sprintf() に対する書式文字列の指定で、マウ
スカーソルの [x,y] 座標を描画ウィンドウとクリップボードにどのように表示
するかを決定します。デフォルトは "% #g" です。

`set mouse clipboardformat` と *Note mouseformat:: は、ボタン 1 とボタ
ン 2 の作用時 (座標をクリップボードへコピーし、マウス位置に一時的に注釈
をつける) の文字列の書式用に使われます。引数が整数の場合、以下の表にあ
る書式オプションの一つを選択します。引数が文字列の場合は、書式オプショ
ン 6 の sprintf() の書式文字列として使われますので、2 つの実数の指定子
を含む必要があります。例:
          `set mouse mouseformat "mouse x,y = %5.2g, %10.3f"`.

この文字列をまたオフにするには、`set mouse mouseformat ""` とします。

以下の書式が利用可能です:

      0   デフォルト (1 と同じ)
      1   軸の座標                            1.23, 2.45
      2   グラフ座標 (0 から 1 まで)         /0.00, 1.00/
      3   x = timefmt     y = 軸座標         [(*Note timefmt:: の設定), 2.45]
      4   x = 日付        y = 軸座標         [31. 12. 1999, 2.45]
      5   x = 時刻        y = 軸座標         [23:59, 2.45]
      6   x = 日付/時刻   y = 軸座標         [31. 12. 1999 23:59, 2.45]
      7   *Note mouseformat:: による書式、例: "mouse x,y = 1.23,     2.450"




File: gnuplot.info, Node: マウススクロール_(scrolling), Next: X11_でのマウス_(X11_mouse), Prev: mouseformat, Up: mouse

マウススクロール (scrolling)
............................



2 次元グラフと 3 次元グラフの両方で、X と Y 軸の伸縮はマウスホイールを
使うことで調整できます。<wheel-up> はスクロールアップし (YMIN と YMAXの
両方を Y の範囲の 10 パーセントずつ増加させ、Y2MIN と Y2MAX にも同様の
ことを行います)、<wheel-down> はスクロールダウンします。
<shift-wheel-up> は左スクロールし (XMIN と XMAX の両方、そして X2MINと
X2MAX の両方を減少)、<shift-wheel-down> は右スクロールします。
<control-wheel-up> はグラフの中心方向にズームインし、
<control-wheel-down> はズームアウトします。<shift-control-wheel-up> は
X と X2 軸のみに沿ってズームインし、<shift-control-wheel-down> は X と
X2 軸に沿ってのみズームアウトします。



File: gnuplot.info, Node: X11_でのマウス_(X11_mouse), Next: zoom, Prev: マウススクロール_(scrolling), Up: mouse

X11 でのマウス (X11 mouse)
..........................


x11 の出力形式のオプション `set term x11 <n>` を使って複数の X11 描画ウィ
ンドウが開いている場合、マウスコマンドとホットキーの機能をちゃんと使え
るのは現在の描画ウィンドウのみです。しかし、他のウィンドウも左下にマウ
スの座標を表示位はしてくれるでしょう。



File: gnuplot.info, Node: zoom, Prev: X11_でのマウス_(X11_mouse), Up: mouse

zoom
....


拡大 (zoom) は、通常は左マウスボタンを押すことで行われ、拡大範囲の線引
きはマウスのドラッグで行いますが、これとは異なるマウスボタンを要求する
実行環境もあるかもしれません。元のグラフは、グラフウィンドウ上でホット
キー 'u' をタイプすることで復元できます。ホットキー 'p' と 'n' は、拡大
操作の履歴を後方と前方にたどります。

オプション `zoomcoordinates` は、拡大の際に、拡大の枠の端にその座標を書
くかどうかを決定し、デフォルトでは ON になっています。

オプション `zoomjump` が ON の場合、ボタン 3 による拡大範囲の選択を開始
すると、マウスポインタは自動的に少しだけずれた位置に移動します。これは、
ごく小さい (または空でさえある) 拡大範囲を選択してしまうことを避けるの
に便利でしょう。デフォルトでは `zoomjump` は OFF です。




File: gnuplot.info, Node: multiplot, Next: mx2tics, Prev: mouse, Up: set-show

multiplot
---------




コマンド *Note multiplot:: は `gnuplot` を多重描画モードにします。これ
は複数の描画を同じページ、ウィンドウ、スクリーンに表示するものです。

書式:
           set multiplot
               { title <page title> {font <fontspec>} {enhanced|noenhanced} }
               { layout <rows>,<cols> 
                 {rowsfirst|columnsfirst} {downwards|upwards}
                 {scale <xscale>{,<yscale>}} {offset <xoff>{,<yoff>}}
               }
           unset multiplot


出力形式 (terminal) によっては、コマンド *Note multiplot:: が与えられる
まで何の描画も表示されないことがあります。この場合このコマンドによりペー
ジ全体の描画が行なわれ、gnuplot は標準の単一描画モードになります。それ
以外の出力形式では、各 *Note plot:: コマンドがそれぞれ表示を更新します
が、それは、それまで出力したものすべてを再描画し、それに新しいものを追
加する方法、あるいは、現在の表示に単に新しいものを追加するだけのやり方、
のいずれかです。

次の描画で使われる領域は、新しい描画が行われる前に消されることはありま
せんから、描画を "挿入" するような場合などでそうしたいなら、*Note
clear:: コマンドを使用してください。

定義済の見出しやベクトルは、各描画において、毎回現在のサイズと原点に従っ
て書かれます (それらが `screen` 座表系で定義されていない場合)。それ以外
の全ての `set` で定義されるものも各描画すべてに適用されます。もし1 度の
描画にだけ現われて欲しいものを作りたいなら、それが例えば日付
(timestamp) だとしたら、*Note multiplot:: と *Note multiplot:: で囲まれ
たブロック内の *Note plot:: (または `splot`, *Note replot::) 命令の一つ
を `set time`と `unset time` ではさんでください。

multiplot のタイトルは、個々の描画タイトルがあったとしても、それとは別
のもので、ページの上部にそのためのキャンバス全体の幅にわたるスペースが
確保されます。

layout が指定されていない場合、あるいはより良い位置合わせをしたい場合は、
コマンド *Note origin:: と *Note size:: 各描画で正しい位置に設定する必
要があります。詳細は、以下参照: *Note origin::, *Note size::。

例:
           set multiplot
           set size 0.4,0.4
           set origin 0.1,0.1
           plot sin(x)
           set size 0.2,0.2
           set origin 0.5,0.5
           plot cos(x)
           unset multiplot


これは、cos(x) のグラフを、sin(x) の上に積み重ねて表示します。

*Note size:: と *Note origin:: は全体の描画領域を参照し、それは各描画で
利用されます。以下も参照: *Note size::。描画境界を一列に揃えたいならば、
*Note margin:: コマンドで、境界の外の余白サイズを同じサイズに揃えること
が出来ます。その使用に関しては、以下参照: *Note margin::。余白サイズは
文字サイズ単位の絶対的な数値単位を使用することに注意してください。よっ
て残ったスペースに描かれるグラフは表示するデバイスの表示サイズに依存し
ます。例えば、プリンタとディスプレイの表示は多分違ったものになるでしょ
う。

オプション `layout` により、各描画の前にそれぞれ与えていた *Note
size::や *Note origin:: コマンドなしに、単純な複数グラフの描画を作成で
きます。それらの設定は自動的に行なわれ、いつでもその設定を変更できます。
`layout` では表示は <rows> 行と <cols> 列の格子に分割され、各格子は、そ
の後に続く対応する名前のオプションによって行 (rowsfirst)、あるいは列
(columnsfirst) が先に埋められて行きます。描画グラフの積み上げは下方向
(`downwards`) に、または上方向 (`upwards`) に伸びるようにできます。デフォ
ルトは `rowsfirst` で `downwards` です。

各描画は `scale` で伸縮を、`offset` で位置の平行移動を行なうことができ
ます。scale や offset の y の値が省略された場合は、x の値がそれに使用さ
れます。*Note multiplot:: により自動配置機能はオフになり、そして*Note
size:: と *Note origin:: の値は `set multiplot layout` の前の状態に復帰
されます。

例:
           set size 1,1
           set origin 0,0
           set multiplot layout 3,2 columnsfirst scale 1.1,0.9
           [ ここには 6 つまでの描画コマンド ]
           unset multiplot


上の例では 6 つの描画が 2 列の中に上から下へ、左から右へと埋められて行
きます。各描画は水平サイズが 1.1/2、垂直サイズが 0.9/3 となります。

以下も参照multiplot のデモ (multiplt.dem)
(http://www.gnuplot.info/demo/multiplt.html)



File: gnuplot.info, Node: mx2tics, Next: mxtics, Prev: multiplot, Up: set-show

mx2tics
-------




x2 (上) 軸の小目盛り刻みの印は *Note mx2tics:: で制御されます。以下参照:
*Note mxtics::。



File: gnuplot.info, Node: mxtics, Next: my2tics, Prev: mx2tics, Up: set-show

mxtics
------




x 軸の小目盛り刻みの印は *Note mxtics:: で制御されます。*Note mxtics::
によってそれを表示させなくすることが出来ます。同様の制御コマンドが各軸
毎に用意されています。

書式:
           set mxtics {<freq> | default}
           unset mxtics
           show mxtics


これらの書式は *Note mytics::, *Note mztics::, *Note mx2tics::, *Note
my2tics::, `mcbtics` に対しても同じです。

<freq> は大目盛り間の、小目盛りによって分割される区間の数 (小目盛りの数
ではありません) です。通常の線形軸に対してはデフォルトの値は 2 か 5で、
これは大目盛りによって変化します。よって大目盛り間に 1 つ、または4 つの
小目盛りが入ることになります。`default` を指定することによって小目盛り
の数はデフォルトの値に戻ります。

軸が対数軸である場合、分割区間の数はデフォルトでは有意な数にセットされ
ます (10 個の長さを元にして)。<freq> が与えられていればそちらが優先さ
れます。しかし、対数軸では通常の小目盛り (例えば 1 から 10 までの 2, 3,
..., 8, 9 の刻み) は、9 つの部分区間しかありませんが、<freq> の設定は
10 とすることでそうなります。

小目盛りを任意の位置に設定するには、("<label>" <pos> <level>, ...) の形
式を `set {x|x2|y|y2|z}tics` で使用してください。ただし、<label> は空
("") で、<level> を 1 にします。

コマンド `set m{x|x2|y|y2|z}tics` は、大目盛りが一様の間隔の場合にのみ
働きます。もし全ての大目盛りが `set {x|x2|y|y2|z}tics` によって手動で配
置された場合は、この小目盛りのコマンドは無視されます。自動的な大目盛り
の配置と手動の小目盛りの配置は、`set {x|x2|y|y2|z}tics` と`set
{x|x2|y|y2|z}tics add` とを使うことで共存できます。

例:
           set xtics 0, 5, 10
           set xtics add (7.5)
           set mxtics 5

この場合、大目盛りは 0,5,7.5,10、小目盛は 1,2,3,4,6,7,8,9 の場所
           set logscale y
           set ytics format ""
           set ytics 1e-6, 10, 1
           set ytics add ("1" 1, ".1" 0.1, ".01" 0.01, "10^-3" 0.001, \
                          "10^-4" 0.0001)
           set mytics 10

この場合、大目盛りは指定された書式で、小目盛は対数的に配置

デフォルトでは小目盛りの表示は、線形軸ではオフで、対数軸ではオンになっ
ています。その設定は、大目盛りに対する `axis|border` と `{no}mirror`の
指定を継承します。これらに関する情報については、以下参照: `set xtics`。



File: gnuplot.info, Node: my2tics, Next: mytics, Prev: mxtics, Up: set-show

my2tics
-------




y2 (右) 軸の小目盛り刻みの印は *Note my2tics:: で制御されます。以下参照:
*Note mxtics::。



File: gnuplot.info, Node: mytics, Next: mztics, Prev: my2tics, Up: set-show

mytics
------




y 軸の小目盛り刻みの印は *Note mytics:: で制御されます。以下参照:
*Note mxtics::。



File: gnuplot.info, Node: mztics, Next: object, Prev: mytics, Up: set-show

mztics
------




z 軸の小目盛り刻みの印は *Note mztics:: で制御されます。以下参照:
*Note mxtics::。



File: gnuplot.info, Node: object, Next: offsets, Prev: mztics, Up: set-show

object
------



コマンド *Note object:: は、その後の 2 次元描画すべてに表われる単一のオ
ブジェクトを定義します。オブジェクトはいくつでも定義できます。オブジェ
クトの型は、現在は *Note rectangle:: (長方形)、`circle` (円)、
`ellipse` (楕円) をサポートしています。長方形は、コマンド *Note
rectangle::によって設定されたスタイルの属性の組 (塗り潰し、色、境界) を
デフォルトとして受け継ぎますが、個々のオジェクトを別々のスタイル属性で
描画することももちろん可能です。円と楕円は、`set style fill` による塗り
潰しスタイルを受け継ぎます。

書式:
         set object <index>
             <object-type> <object-properties>
             {front|back|behind} {clip|noclip}
             {fc|fillcolor <colorspec>} {fs <fillstyle>}
             {default} {lw|linewidth <width>}


<object-type> は、*Note rectangle::, `ellipse`, `circle`, *Note
polygon:: のいずれかです。個々のオブジェクトの型は、その型に特有の性質
もいくつか持っています。

`front` を指定すると、オブジェクトはすべての描画要素の前 (上) に描画さ
れますが、`front` と指定されたラベルよりは後ろ (下) になります。
`back`を指定すると、すべての描画要素、すべてのラベルの後ろに配置されま
す。`behind` は、軸や `back` の長方形を含むすべてのものの後ろに配置され
ます。よって、
         set object rectangle from screen 0,0 to screen 1,1 behind

は、グラフやページ全体の背景に色をつけるのに利用できます。

デフォルトでは、オブジェクトは、少なくとも 1 つの頂点がスクリーン座標で
与えられていない限り、グラフ境界でクリッピングされます。`noclip` と設定
すると、グラフ境界でのクリッピングは無効になりますが、スクリーンサイズ
に対するクリッピングは行われます。

オブジェクトの塗り潰しの色は <colorspec> で指定します。`fillcolor` は
`fc` と省略できます。塗り潰しスタイルは <fillstyle> で指定します。詳細
は、以下参照: `colorspec`, `fillstyle`。キーワード `default` を指定する
と、これらの属性は描画が実際に行われるときのデフォルトの設定を受け継ぎ
ます。以下参照: *Note rectangle::。

* Menu:

* rectangle::
* ellipse::
* circle::
* polygon::



File: gnuplot.info, Node: rectangle, Next: ellipse, Prev: object, Up: object

rectangle
.........


書式:
         set object <index> rectangle
             {from <position> {to|rto} <position> |
              center <position> size <w>,<h> |
              at <position> size <w>,<h>}


長方形の位置は、対角に向かい合う 2 つの頂点 (左下と右上) の位置、あるい
は中心点の位置と横幅 (<w>) と縦幅 (<h>) で指定できます。いずれの場合も
点の位置は、軸の座標 (`first`, `second`)、グラフ領域内の相対座標
(`graph`)、スクリーン座標 (`screen`) のいずれかを使用できます(以下参照:
`coordinates`)。オプション `at` と `center` は同じ意味です。

例:
         # 座標軸で囲まれた領域全体の背景を水色に
         set object 1 rect from graph 0, graph 0 to graph 1, graph 1 back
         set object 1 rect fc rgb "cyan" fillstyle solid 1.0


         # 左下角が 0,0, 右上角が 2,3 の赤い四角を一つ置く
         set object 2 rect from 0,0 to 2,3 fc lt 1


         # 青い境界の空 (塗り潰さない) 長方形を置く
         set object 3 rect from 0,0 to 2,3 fs empty border rgb "blue"


         # 頂点は移動しないまま、塗り潰しと色をデフォルトに変更
         set object 2 rect default


長方形の頂点をスクリーン座標で指定すると、それは現在のグラフの端まで伸
びることができます。それ以外の座標系では、長方形はグラフ内に収まるよう
にクリッピングされます。




File: gnuplot.info, Node: ellipse, Next: circle, Prev: rectangle, Up: object

ellipse
.......


書式:
         set object <index> ellipse {at|center} <position> size <w>,<h>
             {angle <orientation>} {units xy|xx|yy}
             {<other-object-properties>}


楕円の位置は、中心を指定し、その後ろに幅と高さ (主軸と副軸) を指定しま
す。キーワード `at` と `center` は同じ意味です。中心の位置の指定には、
軸の座標 (`first`, `second`)、グラフ領域内の相対座標 (`graph`)、スクリー
ン座標 (`screen`) のいずれかを使用できます (以下参照: `coordinates`)。
主軸と副軸の長さは、軸の座標で与えなければいけません。楕円の向き
(orientation) は、水平軸と楕円の主軸との間の角度で指定します。角度を与
えなければ、デフォルトの楕円の向きが代わりに使われます (以下参照: `set
style ellipse`)。キーワード `units` は、楕円の軸の縮尺の制御に使用しま
す。`units xy` は、主軸は x 軸の単位で、副軸は y 軸の単位で計算しますが、
`units xx` は両軸とも x 軸の単位で縮尺し、`units yy` は両軸とも y 軸の
単位になります。デフォルトは `xy` ですが、`set style ellipse units` の
設定でいつでも変更できます。

注意: x 軸と y 軸の縮尺が等しくない場合 (そして `units xy` の場合)、回
転後の主軸と副軸の比は正しくはなりません。

`set object ellipse size <2r>,<2r>` と `set object circle <r>` とは、一
般には同じことにはならないことに注意してください。circle の半径は常に
x 軸の単位で計られ、よって x 軸と y 軸の縮尺が違ったり、描画のアスペク
ト比が 1 でなくても、常に円が生成されます。`units` が `xy` に設定されて
いれば、'set object ellipse' では、最初の <2r> は x 軸の単位で、後ろの
<2r> は y 軸の単位で計られますが、これは x 軸と y 軸の縮尺が同じで、か
つ描画のアスペクト比が 1 である場合のみ円を生成することを意味します。し
かし、`units` を `xx` や `yy` にセットすれば、コマンド*Note object:: で
指定した直径は同じ単位で計算されるので、楕円は正しいアスペクト比を持ち、
描画をリサイズしてもそのアスペクト比は保持されます。




File: gnuplot.info, Node: circle, Next: polygon, Prev: ellipse, Up: object

circle
......


書式:
         set object <index> circle {at|center} <position> size <radius>
             {arc [<begin>:<end>]}
             {<other-object-properties>}


円の位置は、中心を指定し、その後ろに半径を指定します。キーワード `at`と
`center` は同じ意味です。その位置と半径には、x 軸の座標、グラフ領域内の
相対座標 (`graph`)、スクリーン座標 (`screen`) のいずれかを使用できます
(以下参照: `coordinates`)。そのいずれの場合でも、半径は軸、グラフ、スク
リーンの水平方向の縮尺に対して計られ、水平方向と垂直方向の縮尺にずれが
あっても、結果が常に正しく円になるように直されます。

デフォルトでは、完全な円が描画されます。オプションの `arc` に開始角と終
了角を度を単位として指定すると円弧を描画します。円弧は、常に反時計回り
に描かれます。




File: gnuplot.info, Node: polygon, Prev: circle, Up: object

polygon
.......


書式:
         set object <index> polygon
             from <position> to <position> ... {to <position>}

または
             from <position> rto <position> ... {rto <position>}


多角形の位置は、頂点の位置の列を与えることで指定できます。それらは、軸
の座標 (`first`, `second`)、グラフ領域内の相対座標 (`graph`)、スクリー
ン座標 (`screen`) のいずれかを使用できます。相対的な座標 (rto) を指定す
る場合は、その座標系は前の頂点と同じ座標系でなければいけません。以下参
照: `coordinates`。

例:
         set object 1 polygon from 0,0 to 1,1 to 2,0
         set object 1 fc rgb "cyan" fillstyle solid 1.0 border lt -1





File: gnuplot.info, Node: offsets, Next: origin, Prev: object, Up: set-show

offsets
-------




オフセットは、自動縮尺されたグラフの中のデータの周りに空の境界を置く仕
組みを提供します。オフセットは、x1,y1 軸と 2 次元の *Note plot:: コマン
ドのみで意味を持ちます。

書式:
           set offsets <left>, <right>, <top>, <bottom>
           unset offsets
           show offsets


各オフセットは定数、または数式が使え、それらのデフォルトの値は 0 です。
デフォルトでは、左右のオフセットは x1 軸と同じ単位で指定し、上下のオフ
セットは y1 軸と同じ単位で指定しますが、キーワード "graph" を用いること
で軸の全範囲に対する割合としてオフセットを指定することもできます。正の
オフセットの値は、軸の範囲を指定された方向へ伸ばします。例えば正の下方
向のオフセットは y の最小値をより小さな値にします。許されている範囲での
負のオフセットは、自動縮尺、あるいはクリッピングとの思いもよらぬ結果を
生む可能性があります。自動縮尺機能から軸の範囲の調節を守りたい場合は、
set auto fix" も指定するといいでしょう。

例:
           set auto fix
           set offsets graph 0.05, 0, 2, 2
           plot sin(x)


この sin(x) のグラフの y の範囲は [-3:3] になります。それは、関数のy の
範囲は [-1:1] に自動縮尺されますが、垂直方向のオフセットがそれぞれ 2 で
あるためです。x の範囲は [-11:10] になりますが、これはデフォルトが
[-10:10] でその全範囲が左に 0.05 の割合だけ伸ばされるためです。



File: gnuplot.info, Node: origin, Next: output, Prev: offsets, Up: set-show

origin
------



コマンド *Note origin:: はスクリーン上で曲面描画の原点を指定 (すなわち、
グラフとその余白) するのに使用します。その座標系はスクリーン座標系
(`screen`) で与えます。この座標系に関する情報については、以下参照:
`coordinates`。

書式:
           set origin <x-origin>,<y-origin>




File: gnuplot.info, Node: output, Next: parametric, Prev: origin, Up: set-show

output
------



デフォルトでは、グラフは標準出力に表示されます。コマンド *Note
output:: はその出力を指定されたファイルやデバイスにリダイレクトします。

書式:
           set output {"<filename>"}
           show output


ファイル名は引用符で囲まなければなりません。ファイル名が省略された場合
は、直前の *Note output:: で開かれたファイルがクローズされ、新たな出力
が標準出力 (STDOUT) に送られます。(もし、`set output "STDOUT"` とすると
出力は "STDOUT" という名前のファイルに送られるかもしれません ! ["かもし
れない" というのは、例えば `x11` や `wxt` などの terminal (出力形式)で
は *Note output:: が無視されるからです。])

*Note terminal:: と *Note output:: の両方を指定する場合、*Note
terminal:: を先に指定する方が安全です。それは、ある種の terminal では、
OS が必要とするフラグをセットすることがあるからです。例えば、OS がファ
イルを開くときに (礼儀良く) ファイルがフォーマットされているかどうかを
知る必要があるような OS などがそれ該当します。

popen 関数を持つようなマシン (Unix 等) では、ファイル名の最初を '|' と
することにより、出力をシェルコマンドにパイプで渡すことが可能です。例え
ば以下の通りです:

           set output "|lpr -Plaser filename"
           set output "|lp -dlaser filename"


MS-DOS では、`set output "PRN"` とすると標準のプリンタに出力されます。
VMS では出力は任意のスプール可能なデバイスに送ることが出来ます。出力を
DECnet 透過なタスクに送ることも可能で、それはある種の柔軟性を与えてくれ
ます。



File: gnuplot.info, Node: parametric, Next: plot_, Prev: output, Up: set-show

parametric
----------




*Note parametric:: コマンドは *Note plot:: および `splot` の意味を通常
の関数描画から媒介変数表示 (parametric) 関数描画に変更します。*Note
parametric::を使えば元の描画モードに戻ります。

書式:
           set parametric
           unset parametric
           show parametric


2 次元グラフにおいては、媒介変数表示関数はひとつの媒介変数に対する 2つ
の関数で定められます。例としては plot sin(t),cos(t) とすることによって
円が描けます (アスペクト比が正しく設定されていれば。以下参照: *Note
size::)。`gnuplot` は、両方の関数が媒介変数による *Note plot:: のために
与えられていなければエラーメッセージを出します。

3 次元グラフにおいては面は x = f(u,v), y = g(u,v), z = h(u,v) で定めら
れます。よって 3 つの関数を組で指定する必要があります。例としては、
`cos(u)*cos(v),cos(u)*sin(v),sin(u)` とすることによって球面が描けます。
`gnuplot` は、3 つ全部の関数が媒介変数による `splot` のために与えられて
いなければエラーメッセージを出します。

これによって表現できる関数群は、単純な f(x) 型の関数群の内包することに
なります。なぜならば、2 つ (3 つ) の関数は x, y (, z) の値を独立に計算
する記述ができるからです。実際、t,f(t) のグラフは、一番目の関数のような
恒等関数を用いて x の値が計算される場合に f(x) によって生成されるグラフ
と等価です。同様に、3 次元での u,v,f(u,v) の描画は、f(x,y) と等価です。

媒介変数表示関数は、x の関数、y の関数 (、z の関数)の順に指定し、それら
は共通の媒介変数およびその変域で定義されることに留意して下さい。

さらに、*Note parametric:: の指定は、新しい変数変域を使用することを暗に
宣言します。通常の f(x) や f(x,y) が xrange、yrange (、zrange) を使用す
るのに対して、媒介変数モードではそれに加えて、trange, urange, vrangeを
使用します。これらの変域は *Note trange::, *Note urange::, *Note
vrange::によって直接指定することも、*Note plot:: や `splot` で指定する
こともできます。現時点では、これらの媒介変数のデフォルトの変域は
[-5:5] となっています。将来的にはこれらのデフォルト値をもっと有意なもの
に変更する予定です。



File: gnuplot.info, Node: plot_, Next: pm3d, Prev: parametric, Up: set-show

plot
----

コマンド *Note plot:: は現在の描画コマンド、すなわち *Note replot:: コ
マンドで再現される、直前に行われた *Note plot:: や `splot` コマンドを表
示します。

さらにコマンド`show plot add2history` は、この現在の描画コマンドを
`history` に書き出します。これは、*Note replot:: を使って直前の描画コマ
ンドに曲線を追加した場合、そしてコマンド行全体をすぐに編集したい場合に
便利です。



File: gnuplot.info, Node: pm3d, Next: palette, Prev: plot_, Up: set-show

pm3d
----



pm3d は `splot` の一つのスタイルで、パレットに割り付けられた 3 次元、4
次元データを、カラー/灰色の色地図/曲面として描画します。これはあるアル
ゴリズムを用いていて、これはデータが格子状であっても、データ走査毎に点
の数が違っているような非格子状のデータであっても、前処理することなく描
画できます。

書式 (オプションは任意の順で与えることができます):
           set pm3d
           set pm3d {
                      { at <position> }
                      { interpolate <steps/points in scan, between scans> }
                      { scansautomatic | scansforward | scansbackward | depthorder }
                      { flush { begin | center | end } }
                      { ftriangles | noftriangles }
                      { clip1in | clip4in }
                      { corners2color { mean|geomean|median|min|max|c1|c2|c3|c4 } }
                      { hidden3d {<linestyle>} | nohidden3d }
                      { implicit | explicit }
                      { map }
                    }
           show pm3d
           unset pm3d


splot コマンドで `with pm3d` を指定した場合、またはデータや関数描画スタ
イル (*Note style::) が大域的に pm3d にセットされている場合、あるいは、
pm3d モードが `set pm3d implicit` となっている場合は、pm3d のカラー曲面
が描画されます。後の 2 つの場合は、plot コマンドで指定したスタイルで生
成される網目に p3md 曲面を追加する形で描画します。例えば、
           splot 'fred.dat' with lines, 'lola.dat' with lines

は、各データ集合毎に折れ線による網目と pm3d 曲面の両方を描画します。オ
プション `explicit` が ON (または `implicit` が OFF) の場合は、属性
`with pm3d` が指定された描画のみが pm3d 曲面として描画されます。例えば
           splot 'fred.dat' with lines, 'lola.dat' with pm3d

は、'freq.dat' は折れ線で (線のみで)、'lola.dat' は pm3d 曲面で描画され
ます。

gnuplot の起動時はそのモードは `explicit` になっています。歴史的、そし
て互換性のために、コマンド `set pm3d;` (すなわちオプションを指定しない
場合) と `set pm3d at X ...` (すなわち `at` が最初のオプションの場合)は
モードを `implicit` に変更します。コマンド `set pm3d;` は、その他のオプ
ションをそれらのデフォルトの状態に設定します。

デフォルトのデータ/関数の描画スタイルを `pm3d` にしたい場合は、例えば
           set style data pm3d

とします。この場合、オプション `implicit` と `explicit` は効力を持ちま
せん。

いくつかの描画においては、それらはコマンドラインで与えられた順に描画さ
れることに注意してください。これは特に、以前の描画を上書きしてそれでそ
の一部を隠してしまう可能性があるような曲面の塗りつぶしの際に関心を持た
れるでしょう。

p3md の色付けは、3 つの異なる位置 `top`, `bottom`, *Note surface:: のい
ずれか、またはすべてに行えます。以下参照: `pm3d position`。以下のコマン
ドは、異なった高さで 3 つの色付きの曲面を描きます:
           set border 4095
           set pm3d at s
           splot 10*x with pm3d at b, x*x-y*y, x*x+y*y with pm3d at t


以下も参照: *Note palette::, *Note cbrange::, `set colorbox`。そしても
ちろんデモファイル `demo/pm3d.dem` も参考になるでしょう。

* Menu:

* pm3d_のアルゴリズム_(algorithm)::
* pm3d_の位置_(position)::
* 走査の順番_(scanorder)::
* クリッピング_(clipping)::
* 色の割り当て::
* hidden3d_::
* interpolate::
* 非推奨なオプション::



File: gnuplot.info, Node: pm3d_のアルゴリズム_(algorithm), Next: pm3d_の位置_(position), Prev: pm3d, Up: pm3d

pm3d のアルゴリズム (algorithm)
...............................


まず、地図/曲面がどのように描かれるのかについて記述します。入力データは、
関数を評価して得られるかまたは `splot data file` から得られます。曲面は、
走査 (孤立線) の繰り返しで構成されます。pm3d アルゴリズムでは、最初の走
査で検出された隣り合う 2 点と、次の走査で検出された他の 2 点の間の領域
が、これら 4 点の z の値 (または追加された 'color' 用の列の値、以下参照:
*Note using::) に従って灰色で (または カラーで) 塗られます。デフォルト
では 4 つの角の値の平均値が使われますが、それはオプション
`corners2color` で変更できます。それなりの曲面を描くためには、隣り合う
2 点の走査が交差してはいけなくて、近接点走査毎の点の数が違いすぎてはい
けません。もちろん、最も良いのは走査の点の数が同じことです。他には何も
必要ではありません (例えばデータは格子状である必要もない)。他にもこの
pm3d アルゴリズムは、入力された (計測された、あるいは計算された) 領域の
外には何も描かない、という長所があります。

曲面の色づけは、以下のような入力データに関して行われます:

1. 関数、または 1 つか 3 つのデータ列からなるデータの splot: 上に述べた
四角形の 4 つの角の z 座標の平均値 (または `corners2color`) から、灰色
の範囲 [0:1] を与える *Note zrange:: または *Note cbrange:: の範囲
[min_color_z,max_color_z] への対応により、灰色/カラーの値が得られます。
この値は、直接灰色の色地図用の灰色の値として使うことができます。正規化
された灰色の値をカラーに対応させることもできます。完全な説明は、以下参
照: *Note palette::。

2. 2 つか 4 つのデータ列からなるデータの splot: 灰色/カラーの値は、zの
値の代わりに最後の列の座標を使って得られますので、色と z 座標が独立なも
のになります。これは 4 次元データの描画に使うことができます。

他の注意:

1. 物理学者の間では、gnuplot の文書やソースに現われる 'iso_curve' (孤立
線) という言葉よりも、上で言及した '走査 (scan)' という言葉の方が使われ
ています。1 度の走査と他の走査の記録により色地図を評価する、というのは
そういう意味です。

2. 'gray' や 'color' の値 (scale) は、滑らかに変化するカラーパレットへ
の、連続な変数の線形写像です。その写像の様子は描画グラフの隣に長方形で
表示されます。この文書ではそれを "カラーボックス (colorbox)" と呼び、
その変数をカラーボックス軸の変数と呼びます。以下参照: `set colorbox`,
*Note cbrange::。

3. pm3d の色づけを 3 次元曲面ではなく 2 次元描画に使うには、`set view
map` か `set pm3d map` を使用してください。



File: gnuplot.info, Node: pm3d_の位置_(position), Next: 走査の順番_(scanorder), Prev: pm3d_のアルゴリズム_(algorithm), Up: pm3d

pm3d の位置 (position)
......................

色の曲面は底面か天井 (この場合は灰色/カラーの平面地図) か曲面上の点のz
座標 (灰色/カラー曲面) に描くことができます。その選択は、オプション
`at` に、`b`, `t`, `s` の 6 つまでの組合せの文字列をつけて指定すること
で行えます。例えば `at b` は底面のみに描画しますし、`at st` は最初に曲
面に描いて次に天井面に色地図を描きますし、`at bstbst` は ... 真面目な話、
こんなものは使いません。

塗られた四角形は、次から次へと描画されて行きます。曲面を描画する場合
(`at s`)、後の四角形が前のものに重なり (上書きし) ます (gnuplot は塗ら
れた多角形の網の重なりの相互作用を計算するような仮想現実ツールではあり
ません)。 最初に走査されるデータを最初に描くか最後に描くかを切替えるス
イッチオプション `scansforward` と `scansbackward` を試してみてください。
デフォルトは `scansautomatic` で、これは gnuplot 自身に走査の順を推測さ
せます。一方で、オプション `depthorder` は四角形の順序を完全に再構成し
ます。塗りつぶしは深さ順に並び変えされた後で行われ、これによりかなり複
雑な曲面でも視覚的なものにすることができます。詳細は、以下参照: `pm3d
depthorder`。



File: gnuplot.info, Node: 走査の順番_(scanorder), Next: クリッピング_(clipping), Prev: pm3d_の位置_(position), Up: pm3d

走査の順番 (scanorder)
......................







デフォルトでは、pm3d の塗り潰し曲面を構成する四角形は、それらが曲面の格
子点に沿って出会う順番に塗り潰されます。この順番は、オプション
`scansautomatic`|`scansforward`|`scansbackward` で制御できます。これら
の走査 (scan) オプションは、一般には隠面処理とは両立しません。

2 回の連続する走査で点の数が同じでなかった場合、四角形の点の取り始めを、
両方の走査の最初から (`flush begin`) にするか、最後から (`flush end`)に
するか、真中から (`flush center`) にするかを決定しなければいけません。
`flush (center|end)` は `scansautomatic` とは両立せず、よって`flush
center` または `flush end` を指定して `scansautomatic` が設定された場合、
それは無言で `scansforward` に変更されます。

2 回の連続する走査で点の数が同じでなかった場合、個々の走査で点が足りな
い場合に、走査の最後に色三角形を描くかどうかをオプション `ftriangles`は
指示します。これは滑らかな色地図の境界を描くのに使われます。

gnuplot は、曲面の塗り潰しにおいては、本当の隠面処理は行いませんが、た
いていは遠い方から近い方へ順に四角形要素を塗り潰すことで十分なできあが
りになります。このモードは、以下のオプションを使うことで選択できます:
           set pm3d depthorder hidden3d

オプション `depthorder` は塗り潰し四角形への指示で、オプション*Note
hidden3d:: は同様に境界線 (もし描くなら) への指示です。大域的なオプショ
ンである *Note hidden3d:: は、pm3d 曲面には影響しないことに注意してくだ
さい。




File: gnuplot.info, Node: クリッピング_(clipping), Next: 色の割り当て, Prev: 走査の順番_(scanorder), Up: pm3d

クリッピング (clipping)
.......................

四角形の x,y 座標に関するクリッピングは 2 つの方法で行われます。
`clip1in`: 各四角形の全ての 4 点が定義されていなければならず、少なくと
もそのうちの 1 点が x, y の範囲におさまっていなければなりません。
`clip4in`: 各四角形の全ての 4 点が x, y の範囲におさまっていなければな
りません。




File: gnuplot.info, Node: 色の割り当て, Next: hidden3d_, Prev: クリッピング_(clipping), Up: pm3d

色の割り当て
............






`3 列のデータ (x,y,z) の場合`:

色づけの設定はカラーボックスの描画と同様に *Note palette:: で決定されま
す。一つの描画では一つのパレットのみが存在し得ます。いくつもの曲面を異
なるパレットで描画するには、*Note origin:: と *Note size:: を固定して
`mutiplot`を使うことで行えます。出力ドライバが利用できる色を使い尽くし
てしまう場合には `set palette maxcolors` を使うことを忘れずに。

描画される各 pm3d 四角形には一つの灰色/カラー値が対応します (4 頂点間で
滑らかなカラー変化は起こりません)。その値は、`corners2color <option>`に
従って周囲の角の z 座標から計算されます。<option> は 'mean' (デフォル
ト)、'geomean', 'median' で、曲面のカラーの平滑化に幾つかの種類を与
え、'min','max' はそれぞれ最小値、最大値を選択します。これらは鋭敏な、
あるいは急激なピーク値を持つようなピクセルイメージや色地図を作るときに
は必要ありません。そのような場合には、むしろオプション 'c1', 'c2',
'c3', 'c4' を使って、四角形の色の割当にただ一つの角の z 座標を使うよう
にすればいいでしょう。どの角が 'c1' に対応するのかを知るためには何回か
実験してみる必要があるでしょう。その向きは描画の方向に依存しています。
pm3d アルゴリズムは、カラー曲面を入力データ点の範囲の外には描かないので、
オプション 'c<j>' は、格子の 2 つのへりに沿ったピクセルが、どの四角形の
色にも寄与しない、という結果をもたらします。例えば、pm3d アルゴリズムを
4x4 のデータ点の格子に適用するスクリプト `demo/pm3d.dem` (是非見てくだ
さい) では、(4-1)x(4-1)=9 色しかない長方形が生成されます。

`4 列のデータ (x,y,z,color) の場合`:

4 列目にデータを与えた場合、それを通常は別にパレットに割り当てる灰色階
調値とみなします。個々の四角形の彩色は上と同様に行いますが、色の値は z
の値とは切り離されます。別の彩色オプションにより、4 列目のデータに RGB
色を与えることもできます。以下参照: `rgbcolor variable`。この場合、描画
コマンドは以下のようにする必要があります:

           splot ... using 1:2:3:4 with pm3d lc rgb variable


与えられた節点に対して、その周りの 4 つの節点の平均化された (x,y) 座標
から角を得て四角形を作って、その四角形を節点の色で塗る、といったような
他の描画アルゴリズムが将来実装されるかもしれません。これは、イメージの
描画 (2 次元の格子) に対しては `image` と *Note rgbimage::スタイルによっ
て既に行なわれています。

z の値の範囲と曲面の色の値の範囲は、z と cb に関する `set log` 同様、
*Note zrange:: と *Note cbrange:: によって独立に調整し得ることに注意し
てください。色地図は cb 軸のみで調節されます。以下も参照: `set view
map`, `set colorbox`。



File: gnuplot.info, Node: hidden3d_, Next: interpolate, Prev: 色の割り当て, Up: pm3d

hidden3d
........

オプション *Note hidden3d:: は、各四角形の境界線を、四角形それ自身が描
画されるのと同時に描画します。通常は、それは擬似的な隠線処理を達成する
ために、オプション `depthorder` とともに使用します。これは、コマンド
*Note hidden3d:: を用いるよりもずっと効果的でしょう。このコマンドは、境
界線の見た目を制御するための追加のラインスタイルオプションを一つ取りま
す。ライスタイルパラメータを負と指定するか省略した場合は、その plotコマ
ンドで与えられた線の属性が使用されます。推奨する使用例:

           set pm3d at s hidden3d depthorder
           unset hidden3d
           unset surf
           splot x*x+y*y linecolor rgb "black" linewidth 0.5





File: gnuplot.info, Node: interpolate, Next: 非推奨なオプション, Prev: hidden3d_, Up: pm3d

interpolate
...........

オプション `interpolate m,n` は、格子点をより細かな網目に補間し、色四角
形も近似的に補間します。データ描画に対しては、これは曲面の色の変化を滑
らかにし、曲面の色の尖りを補正します。関数描画に対しては、この補間は細
かさの代わりにメモリを消費してしまう、といったことくらいの意味しかあり
ませんから、関数描画の場合は普通 *Note samples:: や *Note isosamples::
を使うべきでしょう。正の m, n に対しては、各四角形、または三角形は、そ
れぞれの方向に m 回、n 回補間されます。負の m, n では補間の頻度は、少な
くとも|m|, |n| 点が描画されるように選択されます。これは特別な格子関数と
見なすことができます。0 の場合、すなわち `interpolate 0,0` は、自動的に
最適な補間曲面点数を選択します。



File: gnuplot.info, Node: 非推奨なオプション, Prev: interpolate, Up: pm3d

非推奨なオプション
..................

このコマンドにはオプション {transparent|solid} も使われていました。現在
は、同じ効果をそれぞれ `set grid {front|layerdefault}` によって得ること
ができます。

コマンド `set pm3d map` は以下の一連のものと同値です: `set pm3d at b`;
`set view map`; `set style data pm3d`; `set style func pm3d`;。これは
`set view map` がなかったころの旧バージョンへの互換のためのものです。入
力データ点をフィルタするための *Note zrange::、および色の範囲の変更用の
*Note cbrange:: を注意して適切に使用してください。`set (no)surface` も
効果(副作用 ?) があるようです。



File: gnuplot.info, Node: palette, Next: pointintervalbox, Prev: pm3d, Up: set-show

palette
-------



パレットは、`pm3d` で、カラー等高線や多角形、カラーヒストグラム、色勾配
の背景、その他実装されている、あるいは実装されるものの塗りつぶしで使わ
れる、色の記憶場所です。ここではそれは滑らかで "連続的な" カラーや灰色
階調のパレットを意味しますが、それを単にパレットと呼ぶことにします。

カラーパレットは、多角形の色の塗りつぶしと滑らかな色のパレットをサポー
トした出力形式を必要とし、それは現在、`pm3d` で一覧表示される出力形式で
使用可能です。色の値の範囲は、*Note cbrange:: と `set log cb` で独立に
調整可能です。カラーパレット全体は `colorbox` 中に表示されます。

書式:
           set palette
           set palette {
                      { gray | color }
                      { gamma <gamma> }
                      {   rgbformulae <r>,<g>,<b>
                        | defined { ( <gray1> <color1> {, <grayN> <colorN>}... ) }
                        | file '<filename>' {datafile-modifiers}
                        | functions <R>,<G>,<B>
                      }
                      { cubehelix {start <val>} {cycles <val>} {saturation <val>} }
                      { model { RGB | HSV | CMY | YIQ | XYZ } }
                      { positive | negative }
                      { nops_allcF | ps_allcF }
                      { maxcolors <maxcolors> }
                    }
           show palette
           show palette palette <n> {{float | int}}
           show palette gradient
           show palette fit2rgbformulae
           show palette rgbformulae
           show colornames


*Note palette:: は (すなわちオプションなしでは) デフォルトの値を設定しま
す。それ以外の場合、オプションは任意の順に与えることができます。
*Note palette:: は、現在のパレットの属性を表示します。

`show palette gradient` は、パレットの勾配 (gradient) の定義が (それが
適切であれば) 表示されます。*Note rgbformulae:: は、定義済で利用できる、
灰色値からカラーへの変換公式が表示されます。`show colornames` は、認識
できる色名を表示します。

`show palette palette <n>` は、<n> 個の離散的な色を持つパレットの、現在
のパレットの設定によって計算される RGB の値の組とパレットの表を、画面、
または *Note print:: で指定されたファイルに書き出します。デフォルトの広
い表は、追加のオプション float または int によって、3 列の [0..1]の実数
値だけにするか [0..255] の整数値だけにするかをそれぞれ指定できます。こ
の方法で gnuplot のカラーパレットを、Octave のような他の画像アプリケー
ションに渡すことができます。このようなテキスト形式の RGB の一覧表に加え、
*Note palette:: コマンドにより、現在のパレットの R,G,B の状態を描画させ
ることもできます。

以下のオプションは、色付けの属性を決定します。

このパレットを使用する図は、`gray` か `color` になります。例えば、
`pm3d` カラー曲面では、範囲 [min_z,max_z] が灰色の範囲 [0:1] に対応して
いて、微小曲面四角形の 4 つの角の z 座標の平均値をこの範囲の中に対応さ
せることで各微小部分の灰色の値 (gray) が得られます。この値は、灰色階調
の色地図での灰色の値として直接使うことができますし、カラーの色地図では、
その灰色の値から (R,G,B) への変換、すなわち [0:1] から
([0:1],[0:1],[0:1]) への写像が使われます。

基本的に、2 種類の異なる写像方式が利用可能です: 1 つは灰色からカラーへ
の解析的な公式、もう一つは離散的な対応表の補間によるものです。*Note
rgbformulae:: と *Note functions:: が解析的な公式用で、*Note defined::
と `palette file` が補間表用です。*Note rgbformulae::は postscript 出力
のサイズを小さくすることができます。

コマンド `show palette fit2rgbformulae` は、現在の *Note palette:: に最
も良く対応する *Note rgbformulae:: を見つけ出します。当然、それは
rgbformulae パレット以外に対しても意味を持ちます。このコマンドは主に、
パレットの rgbformulae 定義が gnuplot と同じ物を使っている外部プログラ
ム、例えば zimg などにとって有用です ( http://zimg.sourceforge.net
(http://zimg.sourceforge.net) )。

`set palette gray` は、灰色階調のみのパレットにし、*Note
rgbformulae::, *Note defined::, `set palette file`, *Note functions::
はカラーパレットにします。灰色パレットから直前のカラーパレットへ、`set
palette color` で簡単に復帰できます。

`set palette gamma <gamma>` による自動的なガンマ補正は、灰色のパレット
(`set palette gray`) と、*Note cubehelix:: カラーパレット形式に行われます。
gamma = 1 の場合は、線形の光度勾配を生成します。以下参照:
*Note palette::。

出力形式の多くは、有限個の色数しかサポートしていません (例えば gif では
256 個)。デフォルトの gnuplot の線種色を割り当てた後の残りの有効な色領
域は、デフォルトでは pm3d 用に保存されます。よって、複数のパレットを使
用するような multiplot は、最初のパレットがすべての有効な色の配置として
使用されてるので、失敗してしまうでしょう。このような制限は、十分小さい
値 N で `set palette maxcolors <N>` を使うことで緩和できます。このオプ
ションは、N 個の離散的な色を、連続的なパレットから等間隔なサンプリング
で選択します。不等間隔な N 個の離散色を使いたい場合は、一つの連続的なパ
レットの代わりに *Note defined:: を使用してください。

RGB 色空間が作業を行うのに常にもっとも有用な色空間であるとは限らない、
という理由で、色空間は `model` を使うことで、`RGB`, `HSV`, `CMY`,
`YIQ`, `XYZ` のいずれかに変更できます。RGB 以外の色空間では*Note
defined:: の表で色名を使うと、それはおかしな色になります。全ての説明は
RGB 色空間用に書いてありますが、それぞれの色空間で、例えば `R` は `H`,
`C`, `Y`, `X` のことを意味することに注意してください(`G`, `B` も同様)。

全ての色空間で、全ての値は [0,1] に制限されています。

RGB は赤、緑、青を、CMY は水色 (Cyan)、紫 (Magenta)、黄 (Yellow) を、
HSV は色相 (Hue)、彩度 (Saturation)、明度 (Value) をそれぞれ意味します。
YIQ は 全米商業カラーテレビ放送協会 (the U.S. Commercial Color
Television Broadcasting) の使ったカラーモデルで、RGB 記録方式を元にして
いますが、白黒テレビに対する後方互換性を持っています。XYZ は CIE
('Commission Internationale de l'Eclairage'; 国際照明委員会) が定義した
色モデルの 3 つの原刺激値です。色モデルのより詳しい情報については以下を
参照してください: http://en.wikipedia.org/wiki/Color_space
(http://en.wikipedia.org/wiki/Color_space)


* Menu:

* rgbformulae::
* defined_::
* functions_::
* cubehelix::
* file::
* ガンマ補正_(gamma_correction)::
* postscript::



File: gnuplot.info, Node: rgbformulae, Next: defined_, Prev: palette, Up: palette

rgbformulae
...........



*Note rgbformulae:: 用には 3 つの適切な割り当て関数が選ばれる必要があり
ます。この選択は `rgbformulae <r>,<g>,<b>` を通して行われます。使うこと
ができる割り当て関数の一覧は *Note rgbformulae:: で見ることができます。
デフォルトは `7,5,15` で、他の例としては `3,11,6`, `21,23,3`,
`3,23,21` などがあります。`3,-11,-6` のような負の値は、逆のカラーを意味
します (すなわち、1-gray をその関数に代入します)。

RGB の色空間では、いくつかの良い割り当て公式があります:
        7,5,15   ... 伝統的 pm3d (黒-青-赤-黄)
        3,11,6   ... 緑-赤-紫
        23,28,3  ... 海 (緑-青-白); 他の組み合わせも試してみてください
        21,22,23 ... 温度色 (黒-赤-黄-白)
        30,31,32 ... 白黒のカラー表示化 (黒-青-紫-黄-白)
        33,13,10 ... 虹 (青-緑-黄-赤)
        34,35,36 ... AFM 温度色 (黒-赤-黄-白)


HSV 色空間でのフルカラーパレット:
        3,2,2    ... 赤-黄-緑-水色-青-紫-赤


*Note rgbformulae:: という名前で呼ばれていても、例の通り、それらの関数
は実際には <H>,<S>,<V> または <X>,<Y>,<Z>, ... といった色の成分を決定す
るかもしれないということに注意してください。

図の色を反転させるには `positive` や `negative` を使ってください。

他の色体系に対する最も良い rgbformulae の集合は、以下のコマンドで見つけ
ることができることを覚えておいてください。
        show palette fit2rgbformulae




File: gnuplot.info, Node: defined_, Next: functions_, Prev: rgbformulae, Up: palette

defined
.......


灰色から RGB への対応は *Note defined:: を使うことで手動で設定できます:
色勾配 (gradient) は RGB の値を与えるために定義され使用されます。勾配は、
[0,1] の灰色値から [0,1]x[0,1]x[0,1] の RGB 空間への、区分的に線形な写
像です。その線形補間に使われる灰色値と RGB 値の組を指定する必要がありま
す:

書式:
           set palette  defined { ( <gray1> <color1> {, <grayN> <colorN>}... ) }


<grayX> は [0,1] に割り当てられるべき灰色値で、<colorX> はそれに対応す
る RGB 色です。カラー値は 3 種類の方法で指定することができます:

          <color> :=  { <r> <g> <b> | '<color-name>' | '#rrggbb' }


赤、緑、青に対応する空白で区切られた 3 つの値 (それぞれ [0,1] 内)、引用
符でくくられた色名、または引用符でくくられた X 形式の指定方式、のいずれ
かです。勾配の定義では、これらの 3 種の型を自由に組み合わせることができ
ますが、色空間として RGB でないものが選択された場合色名 "red" は少し違っ
たものになるでしょう。使用できる色名は `show colornames` でその一覧を見
ることができます。

<r> と書いても、HSV 色空間ではそれは <H> 成分を、CIE-XYZ 空間では <X>を、
といったように選択されたカラーモデルに依存して意味が違うことに注意して
ください。

<gray> の値は実数の昇順に並べる必要があります。その列の値は自動的に
[0,1] に変換されます。

カッコつきの勾配の定義なしで *Note defined:: とした場合、RGB 色空間にし、
あらかじめ設定されたフルスペクトル色勾配を使用します。勾配を表示するに
は `show palette gradient` を使用してください。

例:

灰色のパレット (役に立たないが教訓的な) を生成するには:
           set palette model RGB
           set palette defined ( 0 "black", 1 "white" )


青黄赤のパレット (全てが等価の) を生成するには:
           set palette defined ( 0 "blue", 1 "yellow", 2 "red" )
           set palette defined ( 0 0 0 1, 1 1 1 0, 2 1 0 0 )
           set palette defined ( 0 "#0000ff", 1 "#ffff00", 2 "#ff0000" )


虹のようなパレットを生成するには:
           set palette defined ( 0 "blue", 3 "green", 6 "yellow", 10 "red" )


HSV 色空間でのフルカラースペクトル:
           set palette model HSV
           set palette defined ( 0 0 1 1, 1 1 1 1 )
           set palette defined ( 0 0 1 0, 1 0 1 1, 6 0.8333 1 1, 7 0.8333 0 1)


MATLAB で使われるデフォルトパレットの近似:
           set pal defined (1 '#00008f', 8 '#0000ff', 24 '#00ffff', \
                            40 '#ffff00', 56 '#ff0000', 64 '#800000')


等間隔な少しの色だけのパレットを生成するには:
           set palette model RGB maxcolors 4
           set palette defined ( 0 "yellow", 1 "red" )


'交通信号' (滑らかではなく gray = 1/3, 2/3 で跳びを持つ):
           set palette model RGB
           set palette defined (0 "dark-green", 1 "green", \
                                1 "yellow",     2 "dark-yellow", \
                                2 "red",        3 "dark-red" )





File: gnuplot.info, Node: functions_, Next: cubehelix, Prev: defined_, Up: palette

functions
.........

色の割り当ての R(gray), G(gray), B(gray) の 3 つの関数を与えるには`set
palette functions <Rexpr>, <Gexpr>, <Bexpr>` を使ってください。それらの
3 つの関数の変数は、[0,1] の値を取る変数 `gray` であり、その値も [0,1]
の中に取る必要があります。<Rexpr> は、HSV 色空間が選択されている場合は、
H の値を表す式でなければいけないことに注意してください (他の式、または
他の色空間でも同様です)。

例:

フルカラーパレットを生成するには:
           set palette model HSV functions gray, 1, 1


黒から金色への良いパレット:
           set palette model XYZ functions gray**0.35, gray**0.5, gray**0.8


ガンマ補正の白黒のパレット:
           gamma = 2.2
           color(gray) = gray**(1./gamma)
           set palette model RGB functions color(gray), color(gray), color(gray)





File: gnuplot.info, Node: cubehelix, Next: file, Prev: functions_, Up: palette

cubehelix
.........


オプション "cubehelix" はあるパレット族を定義しますが、これは、灰色階調
値が 0 から 1 に増加するのに伴ない、正味の光度が単調に増加するのと同時
に、色相 (hue) が標準色相環に従って変化します。
           D A Green (2011) http://arxiv.org/abs/1108.5083

`start` は、色相環に沿った開始点をラジアン単位で決定します。`cycles` は、
パレットの範囲を渡って色相環を何回回るかを決定します。`saturation` (彩
度) が大きいと、よりあざやかな色になります。1 より大きい彩度は、個々の
RGB 成分をクリッピングすることになり、光度は単調ではなくなってしまいま
す。*Note gamma:: もパレットに影響を与えます。デフォルト値は以下の通り
です。
           set palette cubehelix start 0.5 cycles -1.5 saturation 1
           set palette gamma 1.5





File: gnuplot.info, Node: file, Next: ガンマ補正_(gamma_correction), Prev: cubehelix, Up: palette

file
....

`set palette file` は基本的に `set palette defined (<gradient>)` と同じ
で、この <gradient> がデータファイルから読み込まれます。4 列 (gray,
R,G,B) かまたは 3 列 (R,G,B) のデータが *Note using:: データファイル修
飾子によって選択される必要があります。3 列の場合、行番号が gray の値と
して使われますが、その gray の範囲は自動的に [0,1] にスケール変換されま
す。ファイルは通常のデータファイルとして読まれるので、全てのデータファ
イル修飾子が使えます。例えば HSV 色空間が選択されている場合には、`R` は
実際には `H` を指すということに注意してください。

例によって、<filename> が `'-'` の場合は、データがインライン形式で引き
続いて与えられ、一つの `e` のみの行でそれが終了することを意味します。

勾配 (gradient) を表示するには `show palette gradient` を使用してくださ
い。

例:

RGB のパレットを [0,255] の範囲で読み込む:
           set palette file 'some-palette' using ($1/255):($2/255):($3/255)


等距離の虹色 (青-緑-黄-赤) パレット:
           set palette model RGB file "-"
           0 0 1
           0 1 0
           1 1 0
           1 0 0
           e


バイナリパレットファイルも同様にサポートされています。以下参照: *Note
general::。R,G,B の double のデータの 64 個の 3 つ組をファイル
palette.bin に出力し、それを読み込む例:
           set palette file "palette.bin" binary record=64 using 1:2:3






File: gnuplot.info, Node: ガンマ補正_(gamma_correction), Next: postscript, Prev: file, Up: palette

ガンマ補正 (gamma correction)
.............................


灰色の配色に対するガンマ補正は `set palatte gamma <gamma>` で ON にでき
ます。<gamma> のデフォルトは 1.5 で、これは多くの出力形式に適切な値です。

ガンマ補正は、cubehelix カラーパレット形式には適用されますが、他の色形
式には適用されません。しかし、明示的な色関数にガンマ補正を実装するのは
難しくありません。

例:
           set palette model RGB
           set palette functions gray**0.64, gray**0.67, gray**0.70


補間された勾配を使ってガンマ補正を行うには、適当なカラーに中間の値を指
定します。

           set palette defined ( 0 0 0 0, 1 1 1 1 )


の代わりに例えば以下を指定してください:

           set palette defined ( 0 0 0 0, 0.5 .73 .73 .73, 1 1 1 1 )


または、線形補間が "ガンマ補正" の補間に十分良く適合するまでより良い中
間の点を探してください。




File: gnuplot.info, Node: postscript, Prev: ガンマ補正_(gamma_correction), Up: palette

postscript
..........

postscript ファイルのサイズを小さくする目的で、灰色の輝度値、そして全て
ではないいくつかの計算された RGB の輝度値がそのファイル中に書かれます。
成分関数は postscript 言語で直接コード化され、pm3d の描画の直前にヘッダ
としておかれます。/g や /cF の定義を参照してください。通常その定義をそ
の中に書くことは、3 つの式のみが使われる場合に意味を持ちます。しかし、
multiplot やその他の理由で postscript ファイル中のその変換関数を直接手
で編集したいと思うかも知れません。これがデフォルトのオプション
`nops_allcF` です。オプション `ps_allcF` を使うと、全ての公式の定義が
postscript ファイル中に書かれます。一つのグラフ中で、異なる曲面に異なる
パレットを持たせたいという目的で postscript ファイルを編集したい場合に、
このオプションに関心を持つでしょう。その機能は、*Note origin:: と
*Note size::を固定して *Note multiplot:: を使うことで実現できるでしょう。

pm3d 色地図が、格子状、あるいはほぼ規則正しいデータから postscript ファ
イルとして描画された場合、gnuplot と同時に配布される awk スクリプト
`pm3dCompress.awk` を使うことで、この postscript ファイルのサイズをほぼ
50% 位まで小さくすることができます。このファイルを文書に取り込む場合、
あるいは低速のプリンタに大きなファイルを印刷する前などに、この機能に関
心を持つことでしょう。使用法は以下の通りです:
         awk -f pm3dCompress.awk thefile.ps >smallerfile.ps


pm3d 色地図が四角形の格子状データから postscript ファイルとして描画され
た場合、同時に配布される awk スクリプト `pm3dConvertToImage.awk` を使う
ことで、そのサイズを更に小さくすることができます。使用法:
         awk -f pm3dConvertToImage.awk <thefile.ps >smallerfile.ps


postscript 出力の灰色階調をカラーへ、またはその逆、そして <maxcolors>の
定義などを、手動で変更することができます。



File: gnuplot.info, Node: pointintervalbox, Next: pointsize, Prev: palette, Up: set-show

pointintervalbox
----------------



線種の属性 `pointinterval` は描画スタイル *Note linespoints:: で使われ
ます。pointinterval を負の値、例えば -N とすると、点の記号は N 番目毎に
書き、そして各点の記号の後ろの箱 (実際には円) の部分を背景色で塗りつぶ
して消します。コマンド *Note pointintervalbox:: はその消す領域の大きさ
(半径)を制御します。これはデフォルトの半径 (= pointsize) に対する倍率で
す。



File: gnuplot.info, Node: pointsize, Next: polar_, Prev: pointintervalbox, Up: set-show

pointsize
---------



コマンド *Note pointsize:: は描画で使われる点の大きさを変更します。

書式:
           set pointsize <multiplier>
           show pointsize


デフォルトは 1.0 倍です。画像データ出力では、大きいポイントサイズの方が
見やすいでしょう。

一つの描画に対するポイントサイズは *Note plot:: コマンドの上でも変更で
きます。詳細は、以下参照: *Note with::。

ポイントサイズの設定は、必ずしも全ての出力形式でサポートされているわけ
ではないことに注意してください。



File: gnuplot.info, Node: polar_, Next: print_, Prev: pointsize, Up: set-show

polar
-----




コマンド *Note polar:: はグラフの描画方法を xy 直交座標系から極座標系に
変更します。

書式:
           set polar
           unset polar
           show polar


極座標モードでは、仮変数 (t) は角度を表します。t のデフォルトの範囲は
[0:2*pi] ですが、単位として度が選択されていれば [0:360] となります(以下
参照: *Note angles::)。

コマンド *Note polar:: は描画方法をデフォルトの xy 直交座標系に戻します。

*Note polar:: コマンドは `splot` ではサポートされていません。`splot` に
対する同様の機能に関しては、以下参照: *Note mapping::。

極座標モードでは t の数式の意味は r=f(t) となり、t は回転角となります。
trange は関数の定義域 (角度) を制御し、rrange, xrange, yrange はそれぞ
れグラフの x,y 方向の範囲を制御することになります。これらの範囲と
rrange は自動的に設定されるか、または明示的に設定できます。詳細に関して
は、以下参照: *Note rrange::, *Note xrange::。

例:
           set polar
           plot t*sin(t)
           set trange [-2*pi:2*pi]
           set rrange [0:3]
           plot t*sin(t)


最初の *Note plot:: はデフォルトの角度の範囲の 0 から 2*pi を使います。
動径方向とグラフのサイズは自動的に伸縮されます。2 番目の *Note plot::
は角度の定義域を拡張し、グラフのサイズを原点から 3 の幅に制限します。こ
れは x,yのそれぞれの方向を [-3:3] に制限することになります。

`set size square` とすると `gnuplot` はアスペクト比 (縦横の比) を 1 に
するので円が (楕円でなく) 円に見えるようになります。以下も参照極座標の
デモ (polar.dem) (http://www.gnuplot.info/demo/polar.html)および極座標
データの描画 (poldat.dem)。 (http://www.gnuplot.info/demo/poldat.html)



File: gnuplot.info, Node: print_, Next: psdir, Prev: polar_, Up: set-show

print
-----

コマンド *Note print:: は *Note print:: コマンドの出力をファイルにリダ
イレクトします。

書式:
           set print
           set print "-"
           set print "<filename>"
           set print "<filename>" append
           set print "|<shell_command>"


"<filename>" がない場合は出力は <STDERR> になります。"-" という
<filename> は <STDOUT> を意味します。`append` フラグはファイルを追加
(append) モードで開くことを意味します。パイプをサポートするプラットホー
ム上では、<filename> が "|" で始まっていたら、<shell_command> へのパイ
プが開かれます。



File: gnuplot.info, Node: psdir, Next: raxis, Prev: print_, Up: set-show

psdir
-----



コマンド `set psdir <directory>` は、postscript 出力形式が prologue.ps
や文字エンコード用のファイルを探すのに使用する検索パスを制御します。こ
の仕組みは、別にローカルにカスタマイズした prolog ファイル群と切り替え
るのに使えます。検索の順番は以下のようになっています。
           1) *Note psdir:: を指定した場合はそのディレクトリ
           2) 環境変数 GNUPLOT_PS_DIR で指定したディレクトリ
           3) 組み込まれたヘッダー、またはデフォルトのシステムディレクトリ
           4) *Note loadpath:: で指定したディレクトリ




File: gnuplot.info, Node: raxis, Next: rmargin, Prev: psdir, Up: set-show

raxis
-----



コマンド *Note raxis:: と *Note raxis:: は、動径軸を格子線と x 軸から分
離して描画するかどうかを切り替えます。現在の rrange の最小値が 0 でない
(そして自動縮尺でない) 場合、グラフと軸が原点に達しないことを示す白丸が
極座標グラフの中心に描かれます。軸の線は、グラフの境界と同じ線種で描画
されます。以下参照: *Note polar::, *Note rrange::, *Note rtics::,
*Note grid::。



File: gnuplot.info, Node: rmargin, Next: rrange, Prev: raxis, Up: set-show

rmargin
-------



コマンド *Note rmargin:: は右の余白のサイズをセットします。詳細は、以下
参照: *Note margin::。



File: gnuplot.info, Node: rrange, Next: rtics, Prev: rmargin, Up: set-show

rrange
------



コマンド *Note rrange:: は極座標モードのグラフの動径方向の範囲を設定し
ます。これは xrange と yrange の両方も設定してしまいます。両者は、
[-(rmax-rmin) : +(rmax-rmin)] になります。しかし、これの後で xrange や
yrange を変更しても (例えば拡大するために)、それは rrange を変更しない
ので、データ点は rrange に関してクリッピングされたままとなります。rmin
に関する自動縮尺は常に rmin = 0 となります。



File: gnuplot.info, Node: rtics, Next: samples, Prev: rrange, Up: set-show

rtics
-----



コマンド *Note rtics:: は、動径軸に沿って目盛りを配置します。これは、極
座標モードでのみ表示されます。目盛りとその見出しは原点の右側に描かれま
す。キーワード `mirror` は、それらを原点の左側にも描きます。その他のキー
ワードに関する話については以下参照: *Note polar::, `set xtics`。



File: gnuplot.info, Node: samples, Next: size, Prev: rtics, Up: set-show

samples
-------



関数、またはデータの補間に関するサンプリング数はコマンド *Note
samples::で変更できます。

書式:
           set samples <samples_1> {,<samples_2>}
           show samples


デフォルトではサンプル数は 100 点と設定されています。この値を増やすとよ
り正確な描画が出来ますが遅くなります。このパラメータはデータファイルの
描画には何の影響も与えませんが、補間/近似のオプションが使われている場合
はその限りではありません。2 次元描画については *Note smooth:: を、3 次
元描画に関しては、以下参照: *Note dgrid3d::。

2 次元のグラフ描画が行なわれるときは <samples_1> の値のみが関係します。

隠線処理なしで曲面描画が行なわれるときは、samples の値は孤立線毎に評価
されるサンプル数の指定になります。各 v-孤立線は <samples_1> 個のサンプ
ル点を持ち、u-孤立線は <samples_2> 個のサンプル数を持ちます。
<samples_1>のみ指定すると、<samples_2> の値は <samples_1> と同じ値に設
定されます。以下も参照: *Note isosamples::。



File: gnuplot.info, Node: size, Next: style, Prev: samples, Up: set-show

size
----




書式:
           set size {{no}square | ratio <r> | noratio} {<xscale>,<yscale>}
           show size


<xscale> と <yscale> は描画全体の拡大の倍率で、描画全体とはグラフとラベ
ルと余白の部分を含みます。

重要な注意:
           gnuplot の以前の版では、*Note size:: の値を、出力する描画領域
           (キャンバス) のサイズを制御するのにも使っていた出力形式もありま
           したが、すべての出力形式がそうだったわけではありませんでした。
           version 4.6 では、ほとんどの出力形式が以下のルールに従うようにな
           りました:


`set term <terminal_type> size <XX>, <YY>` は、出力ファイルのサイズ、ま
たは "キャンバス" のサイズを制御します。サイズパラメータの有効な値につ
いては、個々の出力形式のヘルプを参照してください。デフォルトでは、グラ
フはそのキャンバス全体に描画されます。

`set size <XX>, <YY>` は、描画自体をキャンバスのサイズに対して相対的に
伸縮させます。1 より小さい伸縮値を指定すると、グラフはキャンバス全体を
埋めず、1 より大きい伸縮値を指定すると、グラフの一部分のみがキャンバス
全体に合うように描画されます。1 より大きい伸縮値を指定すると、ある出力
形式では問題が起こるかもしれないことに注意してください。

`ratio` は、指定した <xscale>, <yscale> の描画範囲内で、グラフのアスペ
クト比 (縦横比) を <r> にします (<r> は x 方向の長さに対する y 方向の長
さの比)。

<r> の値を負にするとその意味は違って来ます。<r>=-1 のとき、x 軸、y 軸の
双方の単位 (つまり 1) の目盛の長さが同一になるよう設定されます。これは
`set view equal xy` と同じです。以下参照: `set view equal`。<r>=-2のと
き、y 軸の単位目盛の長さは x 軸の単位目盛の長さの 2 倍に設定されます。
<r> が負の値に関して以下同様です。

`gnuplot` が指定されたアスペクト比のグラフをちゃんと書けるかは選択され
る出力形式に依存します。グラフの領域は出力の指定された部分にちゃんと収
まり、アスペクト比が <r> であるような最大の長方形となります (もちろん適
当な余白も残しますが)。

`square` は `ratio 1` と同じ意味です。

`noratio` と `nosquare` はいずれもグラフをその出力形式 (terminal) での
デフォルトのアスペクト比に戻しますが、<xscale> と <yscale> はそのデフォ
ルトの値 (1.0) には戻しません。

`ratio` と `square` は 3 次元描画では意味を持ちませんが、`set view
map`を使用した 3 次元描画の 2 次元射影には影響を与えます。 以下も参照:
`set view equal`。これは、3 次元の x 軸と y 軸を強制的に同じスケールに
します。

例:

グラフが現在のキャンバスを埋めるような大きさに設定します:
           set size 1,1


グラフを通常の半分の大きさで正方形にします:
           set size square 0.5,0.5


グラフの高さを横幅の 2 倍にします:
           set size ratio 2





File: gnuplot.info, Node: style, Next: surface, Prev: size, Up: set-show

style
-----

デフォルトの描画スタイルは、`set style data` と `set style function`で
設定できます。関数やデータのデフォルトの描画スタイルを個々に変更する方
法については、以下参照: *Note with::。スタイルの一覧全体は、以下参照:
`plotting styles`。

書式:
           set style function <style>
           set style data <style>
           show style function
           show style data


指定できる描画要素のデフォルトスタイルも設定できます。

           set style arrow <n> <arrowstyle>
           set style fill <fillstyle>
           set style histogram <histogram style options>
           set style line <n> <linestyle>


`gnuplot` が object をサポートするようにコンパイルされていれば、以下の
オプションも有効です:

書式:
           set style rectangle <object options> <linestyle> <fillstyle>
           set style circle radius <size> {clip|noclip}
           set style ellipse size <size> units {xy|xx|yy} {clip|noclip}



* Menu:

* set_style_arrow::
* boxplot_::
* set_style_data::
* set_style_fill::
* set_style_function::
* set_style_increment::
* set_style_line::
* set_style_circle::
* set_style_rectangle::
* set_style_ellipse::



File: gnuplot.info, Node: set_style_arrow, Next: boxplot_, Prev: style, Up: style

set style arrow
...............


各出力形式は矢や点の形のデフォルトの集合を持っていて、それはコマンド
*Note test:: で参照できます。*Note arrow:: は矢の形、幅、点の形、サイズ
を定義し、それらを後で使うときにいちいち同じ情報を繰り返して指定しなく
てもインデックスで参照できるようにします。

書式:
           set style arrow <index> default
           set style arrow <index> {nohead | head | heads}
                                   {size <length>,<angle>{,<backangle>}}
                                   {filled | empty | nofilled}
                                   {front | back}
                                   { {linestyle | ls <line_style>}
                                     | {linetype | lt <line_type>}
                                       {linewidth | lw <line_width} }
           unset style arrow
           show style arrow


<index> は整数で、それで矢のスタイル (arrowstyle) を特定します。

`default` を指定すると、全ての arrow スタイルパラメータはそのデフォルト
の値になります。

<index> の arrowstyle が既に存在する場合、他の全ては保存されたまま、与
えられたパラメータのみが変更されます。<index> が存在しなければ、指定さ
れなかった値はデフォルトの値になります。

`nohead` を指定することで、矢先のない矢、すなわち線分を書くこともできま
す。これは描画の上に線分を描く別な方法を与えます。デフォルトでは 1つの
矢先がついています。`heads` の指定で線分の両端に矢先が描かれます。

矢先の大きさは `size <length>,<angle>` または`size
<length>,<angle>,<backangle>` で制御できます。`<length>` は矢先の各枝の
長さで、`<angle>` は矢先の枝と矢軸がなす角度 (単位は度) です。
`<length>` の単位は x 軸と同じですが、それは `<length>` の前に`first`,
`second`, `graph`, `screen`, `character` をつけることで変更できます。詳
細は、以下参照: `coordinates`。`<backangle>` は、`filled` かまたは
`empty` がともに使われた場合のみ効力を持ち、その場合、`<backangle>` は
矢先の後ろの部分の矢軸との切り角 (`<angle>` と同じ方向;単位は度) になり
ます。出力形式 `fig` は、制限された切り角関数を持っていて、それは 3 つ
の異なる形をサポートしていて、それは 2 つの閾値で決定します: 70 度未満
の場合、矢先はへこんだ切り角を持ち、110 度を超える場合、後ろの部分に尖っ
た角を持ち、その間の角では、矢先の後ろは直線になります。

`filled` を指定すると、塗りつぶされた矢先を作ります (`heads` が使われて
いる場合)。塗りつぶしは、多角形の塗りつぶしが行えるような出力形式でサポー
トされていて、そのリストについては、以下参照: `pm3d`。他の出力形式では
矢先は閉じられますが塗りつぶされません。それと同じ効果 (閉じらるが塗ら
れない) は、`empty` を指定しても得られます。また、`metafont`,
`metapost`, `latex`, `tgif` のように、矢をそれら自身の独自のルーチンで
描くような出力形式では、矢先の塗りつぶしや矢先の枠線描きはもちろんサポー
トされません。

線種はユーザの定義したラインスタイルのリストから選ぶこともできますし(以
下参照: `set style line`)、用意されている `<line_type>` の値 (デフォル
トのラインスタイルのリストの番号) そして `<linewidth>` (デフォルトの幅
の倍数) を使ってここで定義することもできます。

しかし、ユーザー定義済のラインスタイルが選択された場合、その属性 (線種、
幅) は、単に他の *Note arrow:: コマンドで適当な番号や `lt`, `lw`などを
指定しても、変更はできないことに注意して下さい。

`front` を指定すると、矢はグラフのデータの上に描かれます。`back` が指定
された場合 (デフォルト) は矢はグラフのデータの下に描かれます。`front`を
使えば、密集したデータで矢が見えなくなることを防ぐことができます。

例:

矢先がなく、倍の幅が矢を描くには:
           set style arrow 1 nohead lw 2
           set arrow arrowstyle 1


その他の例については、以下参照: *Note arrow::。




File: gnuplot.info, Node: boxplot_, Next: set_style_data, Prev: set_style_arrow, Up: style

boxplot
.......

コマンド *Note boxplot:: により、描画スタイル *Note boxplot:: で生成す
る描画のレイアウトを変更できます。

書式:
           set style boxplot {range <r> | fraction <f>}
                             {{no}outliers} {pointtype <p>}
                             {candlesticks | financebars}
                             {separation <x>}
                             {labels off | auto | x | x2}
                             {sorted | unsorted}


boxplot の箱は、常にデータ点の第一四分位から第三四分位の値の範囲にかかっ
ています。箱から延長される箱ひげの限界は、2 つの異なる方法で制御できま
す。デフォルトでは、箱ひげは、その箱のそれぞれの端から、四分位範囲の
1.5 倍 (すなわち、その箱の厳密な垂直方向の高さ) に等しい範囲にまで延長
されます。箱ひげそれぞれは、データ集合のある点に属する y の値で終了する
ように、メジアンに向かって切り捨てられます。四分位範囲の丁度 1.5 倍の値
の点がない場合もありますから、箱ひげはその名目上の範囲よりも短くなる場
合もあります。このデフォルトは以下に対応します。
           set style boxplot range 1.5


もう一つの方法として、箱ひげがかかる点の総数の割合 (fraction) を指定す
ることができます。この場合、その範囲はメジアン値から、データ集合の指定
した分を囲い込むまで、対称に延長されます。このときも、個々の箱ひげはデー
タ集合内の点の端までに制限されます。データ集合の 95% の点をはるには以下
のようにします。
           set style boxplot fraction 0.95


箱ひげの範囲の外にある任意の点は、outliers と見なされます。デフォルトで
はそれらはひとつひとつ円 (pointtype 7) で描かれますが、オプション
`nooutliers` はこれを無効にします。

デフォルトでは boxplot は candlesticks と似たスタイルで描画しますが、
financebars と似たスタイルで描画するためのオプションもあります。

boxplot の using 指定が 4 列目を持つ場合、その列の値はある因子変数の離
散的なレベル値であると見なします。この場合、その因子変数のレベルの数と
同じだけの複数の boxplot が描かれます。それらの boxplot の隣り合うもの
同士の距離はデフォルトでは 1.0 (x 軸の単位で) ですが、この間隔はオプショ
ン `separation` で変更できます。

オプション *Note labels:: は、これらの boxplot (それぞれデータ集合のあ
る部分に対応する) のどこに、どのようにラベルをつけるかを決定します。デ
フォルトでは因子の値を水平軸 (x か x2 のいずれか plot で使われている方)
の目盛ラベルに出力します。これはオプションの `labels auto` に対応します。
オプション `labels x`, `labels x2` によって、強制的に x 軸、x2 軸にそれ
ぞれ出力させることもできますし、`labels off` でオフにすることもできます。

デフォルトでは、因子変数の異なるレベルに対応する boxplot は整列化はせず、
データファイルにそのレベルが現れる順番に描画します。この挙動はオプショ
ンの `unsorted` に対応しますが、オプション `sorted` を使用すると、まず
レベルを辞書順にソートし、その順に boxplot を描画します。

オプション `separation`, *Note labels::, `sorted`, `unsorted` は、plot
に 4列目の指定を与えた場合のみ効力を持ちます。

以下参照: *Note boxplot::, *Note candlesticks::, *Note financebars::。




File: gnuplot.info, Node: set_style_data, Next: set_style_fill, Prev: boxplot_, Up: style

set style data
..............

コマンド `set style data` はデータ描画に対するデフォルトの描画スタイル
を変更します。

書式:
           set style data <plotting-style>
           show style data


選択項目については、以下参照: `plotting styles`。項目を指定しなかった場
合、その一覧が表示されます。`show style data` は現在のデフォルトのデー
タ描画スタイルを表示します。



File: gnuplot.info, Node: set_style_fill, Next: set_style_function, Prev: set_style_data, Up: style

set style fill
..............


コマンド `set style fill` は、boxes, histograms, candlesticks,
filledcurves での描画における描画要素のデフォルトのスタイルの設定に使わ
れます。このデフォルトは、個々の描画に塗り潰しスタイル (fillstyle)を指
定することで上書きできます。以下参照: *Note rectangle::。

書式:
           set style fill {empty
                           | {transparent} solid {<density>}
                           | {transparent} pattern {<n>}}
                          {border {lt} {lc <colorspec>} | noborder}


デフォルトの塗りつぶしスタイル (fillstyle) は `empty` です。

オプション `solid` は、出力形式がサポートしている場合、その色でのベタ塗
りを行います。パラメータ <density> は塗りつぶし色の強さを表していて
<density> が 0.0 なら箱は空、<density> が 1.0 なら箱はその内部は現在の
線種と完全に同じ色で塗られます。出力形式によっては、この強さを連続的に
変化させられるものもありますが、その他のものは、部分的な塗りつぶしの幾
つかのレベルを実装しているに過ぎません。パラメータ <density> が与えられ
なかった場合はデフォルトの 1 になります。

オプション `pattern` は、出力ドライバによって与えられるパターンでの塗り
つぶしを行います。利用できる塗りつぶしパターンの種類と数は出力ドライバ
に依存します。塗りつぶしの boxes スタイルで複数のデータ集合を描画する場
合そのパターンは、複数の曲線の描画における線種の周期と同様、有効なパター
ンを、パターン <n> から始めて周期的に利用します。

オプション `empty` は、箱を塗りつぶしませんが、これがデフォルトです。

デフォルトの *Note border:: は、現在の線の種類の実線で箱の境界を描きま
す。`border <colorspec>` で境界の色を変更することができます。
`noborder` は境界の線が描かれないようにします。


@noindent -- SET STYLE FILL TRANSPARENT ---


いくつかの出力形式は、塗りつぶし領域の `transparent` (透明化) 属性をサ
ポートしています。transparent solid の領域塗りつぶしでは、`density` (密
度) パラメータはアルファ値として使用されます。つまり、密度 0 は完全な透
明を、密度 1 は完全な不透明を意味します。transparent pattern の塗りつぶ
しでは、パターンの背景が完全な透明か完全な不透明のいずれかです。


           出力形式   solid pattern    pm3d
           --------------------------------
           gif           no     yes      no
           jpeg         yes      no     yes
           pdf          yes     yes     yes
           png    TrueColor   index     yes
           post          no     yes      no
           svg          yes      no     yes
           win          yes     yes     yes
           wxt          yes     yes     yes
           x11           no     yes      no




透明な塗りつぶし領域を含むグラフを見たり作ったりするのには、別な制限が
ありうることに注意してください。例えば、png 出力形式では、"truecolor"オ
プションが指定されている場合にのみ透明化の塗り潰しが利用できます。PDF
ファイルには透明化領域が正しく記述されていても、PDF の表示ソフトによっ
てはそれを正しく表示できないこともありえます。実際に PostScript プリン
タでは問題はないのに、Ghostscript/gv ではパターン塗りつぶし領域を正しく
表示できません。



File: gnuplot.info, Node: set_style_function, Next: set_style_increment, Prev: set_style_fill, Up: style

set style function
..................

コマンド `set style function` は関数描画に対するデフォルトの描画スタイ
ル (lines, points, filledcurves など) を変更します。以下参照:
`plotting styles`。

書式:
           set style function <plotting-style>
           show style function




File: gnuplot.info, Node: set_style_increment, Next: set_style_line, Prev: set_style_function, Up: style

set style increment
...................

`注意`: このコマンドは非推奨です。代わりに新しいコマンド `set
linetype`を使用してください。これは、代用のための一時的な適当な線種を検
索するのではなく、線種自体を再定義します。以下参照: `set linetype`。

書式:
           set style increment {default|userstyles}
           show style increment


デフォルトでは、同じグラフ上の次の描画は、現在の出力形式でデフォルトで
定義されている線種の次のもので行われます。しかし、`set style increment
user` を選択すると、デフォルトの線種ではなく、ユーザ定義ラインスタイル
番号のものを使用させることができます。

例:

           set style line 1 lw 2 lc rgb "gold"
           set style line 2 lw 2 lc rgb "purple"
           set style line 4 lw 1 lc rgb "sea-green"
           set style increment user


           plot f1(x), f2(x), f3(x), f4(x)


これは、関数 f1, f2, f4 は新たにユーザ定義されたラインスタイルで描画さ
れます。ユーザ定義ラインスタイルが見つからない場合は、代わりにそれに対
応するデフォルトの線種が利用されます。例えば、上の例では、f3(x) はデフォ
ルトの線種 3 で描画されます。




File: gnuplot.info, Node: set_style_line, Next: set_style_circle, Prev: set_style_increment, Up: style

set style line
..............







出力装置にはおのおのデフォルトの線種と点種の集合があり、それらはコマン
ド *Note test:: で見ることができます。`set style line` は線種と線幅、点
種と点の大きさを、個々の呼び出しで、それらの情報を全部指定する代わりに、
単なる番号で参照できるようにあらかじめ定義するものです。

書式:
           set style line <index> default
           set style line <index> {{linetype  | lt} <line_type> | <colorspec>}
                                  {{linecolor | lc} <colorspec>}
                                  {{linewidth | lw} <line_width>}
                                  {{pointtype | pt} <point_type>}
                                  {{pointsize | ps} <point_size>}
                                  {{pointinterval | pi} <interval>}
                                  {palette}
           unset style line
           show style line


`default` は、全てのラインスタイルパラメータをそれと同じ index を持つ線
種 (linetype) に設定します。

<index> の linestyle が既に存在する場合、他の全ては保存されたまま、与え
られたパラメータのみが変更されます。<index> が存在しなければ、指定され
なかった値はデフォルトの値になります。

このようにつくられるラインスタイルは、デフォルトの型 (線種, 点種) を別
なものに置き換えることはしないので、ラインスタイル、デフォルトの型、ど
ちらも使えます。ラインスタイルは一時的なもので、コマンド *Note reset::
を実行すればいつでもそれらは消え去ります。線種自体を再定義したい場合は、
以下参照: `set linetype`。

線種と点種は、その index 値をデフォルトとします。その index 値に対する
実際の記号の形は、出力形式によって異なり得ます。

線幅と点の大きさは、現在の出力形式のデフォルトの幅、大きさに対する乗数
です (しかし、ここでの <point_size> は、コマンド *Note pointsize:: で与
えられる乗数には影響を受けないことに注意してください)。

`pointinterval` は、スタイル *Note linespoints:: でグラフ中に描かれる点
の間隔を制御します。デフォルトは 0 です (すべての点が描画される)。例え
ば、`set style line N pi 3` は、点種が N、点の大きさと線幅は現在の出力
形式のデフォルトで、*Note linespoints:: での描画では点は 3 番目毎に描画
されるようなラインスタイルを定義します。その間隔を負の値にすると、それ
は間隔は正の値の場合と同じですが、点の記号の下になる線を書かないように
します (出力形式によっては)。

全ての出力装置が `linewidth` や *Note pointsize:: をサポートしているわ
けではありません。もしサポートされていない場合はそれらのオプションは無
視されます。

出力形式に依存しない色を `linecolor <colorspec>` か `linetype <colorspec>`
(省略形は `lc`, `lt`) のいずれかを使って割り当てることができます。この
場合、色は RGB の 3 つ組で与えるか、gnuplot の持つパレットの色名、現在
のパレットに対する小数指定、または cbrange への現在のパレットの対応に
対する定数値、のいずれかで与えます。以下参照: `colors`, `colorspec`,
*Note palette::, `colornames`, *Note cbrange::。

`set style line <n> linetype <lt>` は、出力形式に依存した点線/破線のパ
ターンと色の両方をセットします。`set style line <n> linecolor
<colorspec>`や `set style line <n> linetype <colorspec>` は、現在の点線
/破線のパターンを変更せずに新しい線色を設定します。

3 次元モード(`splot` コマンド) では、"linetype palette z" の省略形とし
て特別にキーワード *Note palette:: を使うことも許されています。その色の
値は、splot の z 座標 (高さ) に対応し、曲線、あるいは曲面に沿って滑らか
に変化します。

例:以下では、番号 1, 2, 3 に対するデフォルトの線種をそれぞれ赤、緑、青
とし、デフォルトの点の形をそれぞれ正方形、十字、三角形であるとします。
このとき以下のコマンド

           set style line 1 lt 2 lw 2 pt 3 ps 0.5


は、新しいラインスタイルとして、緑でデフォルトの 2 倍の幅の線、および三
角形で半分の幅の点を定義します。また、以下のコマンド

           set style function lines
           plot f(x) lt 3, g(x) ls 1


は、f(x) はデフォルトの青線で、g(x) はユーザの定義した緑の線で描画しま
す。同様に、コマンド

           set style function linespoints
           plot p(x) lt 1 pt 3, q(x) ls 1


は、p(x) を赤い線で結ばれたデフォルトの三角形で、q(x) は緑の線で結ばれ
た小さい三角形で描画します。

           splot sin(sqrt(x*x+y*y))/sqrt(x*x+y*y) w l pal


は、*Note palette:: に従って滑らかな色を使って曲面を描画します。これは
それをサポートした出力形式でしかちゃんとは動作しないことに注意してくだ
さい。以下も参照: *Note palette::, `set pm3d`。

           set style line 10 linetype 1 linecolor rgb "cyan"


は、RGB カラーをサポートするすべての出力形式で、ラインスタイル 10 に実
線の水色を割り当てます。




File: gnuplot.info, Node: set_style_circle, Next: set_style_rectangle, Prev: set_style_line, Up: style

set style circle
................


書式:
           set style circle {radius {graph|screen} <R>} {clip|noclip}


このコマンドは、描画スタイル "with circles" で使われるデフォルトの半径
を設定します。これは、データ描画で 2 列のデータ (x,y) しか与えなかった
場合、あるいは関数描画のときに適用されます。"noclip" は、グラフの境界で
の円のクリッピングを無効にします。デフォルトは以下の通り: "set style
circle radius graph 0.02 clip"。




File: gnuplot.info, Node: set_style_rectangle, Next: set_style_ellipse, Prev: set_style_circle, Up: style

set style rectangle
...................


コマンド *Note object:: で定義された長方形には別々のスタイルを設定できま
す。しかし、個別のスタイル指定をしなければ、そのオブジェクトはコマンド
*Note rectangle:: によるデフォルトを受け継ぎます。

書式:
         set style rectangle {front|back} {lw|linewidth <lw>}
                             {fillcolor <colorspec>} {fs <fillstyle>}


以下参照: `colorspec`, `fillstyle`。`fillcolor` は `fc` と省略できます。

例:
         set style rectangle back fc rgb "white" fs solid 1.0 border lt -1
         set style rectangle fc linsestyle 3 fs pattern 2 noborder


デフォルトの設定は、背景色での塗り潰しで、境界は黒になっています。




File: gnuplot.info, Node: set_style_ellipse, Prev: set_style_rectangle, Up: style

set style ellipse
.................


書式:
           set style ellipse {units xx|xy|yy} {clip|noclip}
                             {size {graph|screen} <a>, {{graph|screen} <b>}}
                             {angle <angle>}


このコマンドは、楕円の直径を同じ単位で計算するかどうかを制御します。デ
フォルトは `xy` で、これは楕円の主軸 (第 1 軸) の直径は x (または x2)軸
と同じ単位で計算し、副軸 (第 2 軸) の直径は y (または y2) 軸の単位で計
算します。このモードでは、楕円の両軸の比は、描画軸のアスペクト比に依存
します。`xx` か `yy` に設定すれば、すべての楕円の両軸は同じ単位で計算さ
れます。これは、描画される楕円の両軸の比は、回転しても正しいままですが、
水平方向か垂直方向の一方の縮尺の変更により正しくなくなることを意味しま
す。

これは、object として定義された楕円、コマンド *Note plot:: によって描画
される楕円の両方に影響を与える全体的な設定ですが、`units` の値は、描画
毎、オブジェクト毎に設定を再定義できます。

楕円のデフォルトのサイズも、キーワード *Note size:: で設定できます。デ
フォルトのサイズは、2 列のみのデータ、または関数の plot 命令で適用され
ます。2 つの値は、楕円の (2 つの主軸、2 つの副軸に向かい合う) 主軸直径
と副軸直径として使用されます。

デフォルトは、"set style ellipse size graph 0.05,0.03" です。

最後になりますが、デフォルトの向きをキーワード `angle` で設定もできます。
向きは、楕円の主軸とグラフの x 軸の方向となす角で、単位は度で与える必要
があります。

"noclip" は、グラフの境界での楕円のクリッピングを無効にします。

楕円の object の定義に関しては以下も参照: `set object ellipse`。2 次元
の描画スタイルに関しては以下参照: *Note ellipses::。




File: gnuplot.info, Node: surface, Next: table, Prev: style, Up: set-show

surface
-------




コマンド *Note surface:: は `splot` による曲面の表示を制御します。

書式:
           set surface
           unset surface
           show surface


曲面はデータや関数に対して、*Note with:: で指定されたスタイル、あるいは
他の適切なスタイルで書かれます。

*Note surface:: により `splot` は、関数やデータファイルの点に対するどん
な点や線も描かなくなります。個別にある関数やあるデータファイルの曲面描
画を無効にしてその他を有効にしたい場合には、コマンド `splot` のキーワー
ド `nosurface` を使用してください。その場合でも `set contour` の設定に
より曲面の等高線は書かれます。`unset surface; set contour base` の組は、
等高線を格子の土台に表示する際に便利です。以下も参照: `set contour`。



File: gnuplot.info, Node: table, Next: terminal, Prev: surface, Up: set-show

table
-----



*Note table:: モードが有効な場合、*Note plot:: と `splot` コマンドは、
現在の出力形式に対する実際の描画を生成する替わりに X Y {Z} R の値の複数
列からなる表形式のアスキー出力を行ないます。文字 R は、次の 3 種類のう
ちの一つです: その点が有効な範囲内にある場合は "i"、範囲外の場合は "o"、
未定義値(undefined) の場合は "u" です。データの書式は、軸のラベルの書式
(以下参照: *Note format::) によって決まり、列は一つの空白で区切られます。
これは、等高線を生成し、例えば *Note plot:: で描画するなど、それを再利
用するために保存したいときに便利です。例については、以下参照: `set
contour`。この方法は、補間されたデータを保存するのにも使うことができま
す (以下参照: *Note samples::, *Note dgrid3d::)。

書式:
           set table {"outfile"}
           plot <whatever>
           unset table


表形式の出力は、指定されたファイルに書き出されますが、指定がない場合は
現在 *Note output:: で指定されている値に出力されます。現在の出力形式の
標準的な描画に戻すには、*Note table:: を明示的に行なう必要があります。



File: gnuplot.info, Node: terminal, Next: termoption, Prev: table, Up: set-show

terminal
--------



`gnuplot` は数多くのグラフィック形式をサポートしています。コマンド
*Note terminal:: を使って `gnuplot` の出力の対象となる形式の種類を選んで
ください。出力先をファイル、または出力装置にリダイレクトするには
*Note output:: を使ってください。

書式:
           set terminal {<terminal-type> | push | pop}
           show terminal


<terminal-type> が省略されると `gnuplot` は利用可能な出力形式の一覧を表
示します。<terminal-type> の指定には短縮形が使えます。

*Note terminal:: と *Note output:: の両方を使う場合、*Note terminal::
を最初にする方が安全です。それは、OS によっては、それが必要とするフラグ
をセットする出力形式があるからです。

いくつかの出力形式はたくさんの追加オプションを持ちます。各 `<term>` に
対し、直前の `set term <term> <options>` で使用されたオプションは記憶さ
れ、その後の `set term <term>` がそれをリセットすることはありません。こ
れは例えば印刷時に有用です。幾つかの異なる出力形式を切替える場合、前の
オプションを繰り返し唱える必要はありません。

コマンド `set term push` は、現在の出力形式とその設定を `set term
pop`によって復帰するまで記憶しています。これは `save term`, `load
term` とほぼ同等ですが、ファイルシステムへのアクセスは行わず、よって例
えばこれは、印刷後にプラットホームに依存しない形で出力形式を復帰する目
的に使えます。gnuplot の起動後、デフォルト、または `startup` ファイルに
書かれた出力形式が自動的に記憶 (push) されます。よって、明示的に出力形
式を記憶させることなく、任意のプラットホーム上でデフォルトの出力形式を
`set term pop` によって復帰させる、という動作を期待したスクリプトを可搬
性を失わずに書くことが出来ます。

詳細は、以下参照: `complete list of terminals`。




File: gnuplot.info, Node: termoption, Next: tics, Prev: terminal, Up: set-show

termoption
----------



コマンド *Note termoption:: は、現在使用している出力形式の振舞いを、新
たな *Note terminal:: コマンドの発行なしに変更することを可能にします。
このコマンド一つに対して一つのオプションのみが変更できます。そしてこの
方法で変更できるオプションはそう多くはありません。現在使用可能なオプショ
ンは以下のもののみです。

          set termoption {no}enhanced
          set termoption font "<fontname>{,<fontsize>}"
          set termoption fontscale <scale>
          set termoption {solid|dashed}
          set termoption {linewidth <lw>}{lw <lw>}





File: gnuplot.info, Node: tics, Next: ticslevel, Prev: termoption, Up: set-show

tics
----



全ての軸の (見出しのつく) 大目盛りの制御を一度に行うことは、コマンド
`set tics` で可能です。

全ての軸の (見出しのつく) 大目盛りは コマンド `set tics` で一度に制御で
きます。目盛りは `unset tics` で消え、`set tics` で (デフォルトの状態の)
目盛りがつきます。各単一軸の大目盛りの制御を行なう同様のコマンドがあり
ます (`tics` の前に軸名をつけたもの)。

書式:
           set tics {axis | border} {{no}mirror}
                    {in | out} {scale {default | <major> {,<minor>}}}
                    {{no}rotate {by <ang>}} {offset <offset> | nooffset}
                    {left | right | center | autojustify}
                    { format "formatstring" } { font "name{,<size>}" }
                    { textcolor <colorspec> }
           set tics {front | back}
           unset tics
           show tics


上の最初の書式のところに書いたオプションは、個々の軸にも、またはすべて
の軸 (x, y, z, x2, y2, cb) にも適用できます。

tics の `front` または `back` の設定は、2D 描画 (splot は不可) にのみす
べての軸に 1 度適用されます。これは、目盛と描画要素が重なった場合に目盛
を描画要素の前面に出すか、奥に置くかを制御します。

`axis` と *Note border:: は `gnuplot` に目盛り (目盛りの刻自身とその見
出し)を、それぞれ軸につけるのか、境界につけるのかを指示します。軸が境界
にとても近い場合、`axis` を使用すると境界が表示されていれば (以下参照:
*Note border::) 目盛りの見出し文字を境界の外に出してしまうでしょう。こ
の場合自動的なレイアウトアルゴリズムによる余白設定は大抵よくないものと
なってしまいます。

`mirror` は `gnuplot` に反対側の境界の同じ位置に、見出しのない目盛りを
出力するよう指示します。`nomirror` は、あなたが想像している通りのことを
行ないます。

`in` と `out` は目盛りの刻みを内側に描くか外側に描くかを切り変えます。

目盛りの刻みのサイズは `scale` で調整できます。<minor> の指定が省略され
た場合は、それは 0.5*<major> になります。デフォルトのサイズは、大目盛り
が 1.0 で小目盛りが 0.5 で、これは `scale default` で呼びだせます。

`rotate` は、文字列を 90 度回転させて出力させようとします。これは、文字
列の回転をサポートしている出力ドライバ (terminal) では実行されます。
`norotate` はこれをキャンセルします。`rotate by <ang>` は角度 <ang> の
回転を行ないますが、これはいくつかの出力形式 (terminal) でサポートされ
ています。

x と y 軸の大目盛りのデフォルトは `border mirror norotate` で、x2, y2軸
は `border nomirror norotate` がデフォルトです。z 軸のデフォルトは
`nomirror` です。

<offset> は x,y かまたは x,y,z の形式ですが、それに座標系を選択して、そ
の前に `first`, `second`, `graph`, `screen`, `character` のいずれかをつ
けることもできます。<offset> は、目盛りの見出し文字列のデフォルトの位置
からのずらし位置で、そのデフォルトの単位系は `character` です。詳細は、
以下参照: `coordinates`。`nooffset` は offset を OFF にします。

デフォルトでは見出しラベルは、美しい結果を生むように、軸と回転角に依存
した位置に自動的に位置合わせされます。それが気にいらなければ、明示的に
`left`, `right`, `center` のキーワードにより位置合わせを変更できます。
`autojustify` でデフォルトの挙動に復帰します。

オプションなしの `set tics` は、目盛りの刻みを内側にしますが、その他の
全てのオプションは直前の値を保持します。

大目盛り (ラベルのつく) の他の制御に関しては、以下参照: `set xtics`。小
目盛りの制御に関しては、以下参照: *Note mxtics::。これらのコマンドは、
各軸毎にその一つの軸の制御を提供します。



File: gnuplot.info, Node: ticslevel, Next: ticscale, Prev: tics, Up: set-show

ticslevel
---------



現在は推奨されていません。以下参照: *Note xyplane::。



File: gnuplot.info, Node: ticscale, Next: timestamp, Prev: ticslevel, Up: set-show

ticscale
--------



コマンド *Note ticscale:: は現在は推奨されていません。代わりに`set
tics scale` を使ってください。



File: gnuplot.info, Node: timestamp, Next: timefmt, Prev: ticscale, Up: set-show

timestamp
---------




コマンド *Note timestamp:: は描画の日付と時刻を左の余白に表示します。

書式:
           set timestamp {"<format>"} {top|bottom} {{no}rotate}
                         {offset <xoff>{,<yoff>}} {font "<fontspec>"}
           unset timestamp
           show timestamp


書式文字列 (format) を使って、書かれる日付と時刻の書式を選択することが
できます。デフォルトは asctime() が使用する "%a %b %d %H:%M:%S %Y" です
(曜日、月名、日、時、分、秒、4 桁の西暦)。`top` と `bottom` を使って日
付を左の余白の上に配置するか、下に配置するかを選択できます (デフォルト
は下)。`rotate` は、もし出力形式がサポートしていればですが、日付を垂直
方向の文字列にします。定数 <xoff>、<yoff> はずれ (offset) を意味し、こ
れによってより適切な位置合わせが行えます。<font> は日付が書かれるフォン
トを指定します。

*Note timestamp:: の代わりに省略名 `time` を使っても構いません。

例:
           set timestamp "%d/%m/%y %H:%M" offset 80,-2 font "Helvetica"


日付の書式文字列に関する詳しい情報については、以下参照: *Note
timefmt::。



File: gnuplot.info, Node: timefmt, Next: title_, Prev: timestamp, Up: set-show

timefmt
-------



このコマンドは、データが日時の形式になっている場合に、その時系列データ
に適用されます。これはコマンド `set xdata time` も与えられていないと意
味がありません。

書式:
           set timefmt "<format string>"
           show timefmt


文字列引数 (<format string>) は `gnuplot` に日時データをデータファイル
からどのように読むかを指示します。有効な書式は以下の通りです:


           書式         説明
           %d           何日, 1--31
           %m           何月, 1--12
           %y           何年, 0--99
           %Y           何年, 4-digit
           %j           1 年の何日目, 1--365
           %H           何時, 0--24
           %M           何分, 0--60
           %s           Unix epoch (1970-01-01, 00:00 UTC) からの秒数
           %S           何秒 (出力では 0--60 の整数、入力では実数)
           %b           月名 (英語) の 3 文字省略形
           %B           月名 (英語)





任意の文字を文字列中で使用できますが、規則に従っている必要があります。
t (タブ) は認識されます。バックスラッシュ + 8 進数列 (\nnn) はそれが示
す文字に変換されます。日時要素の中に分離文字がない場合、%d, %m, %y,
%H, %M, %S はそれぞれ 2 桁の数字を読み込みます。%S での読み込みで小数点
がそのフィールドについている場合は、その小数点つきの数を小数の秒指定だ
と解釈します。%Y は 4 桁、%j は 3 桁の数字を読み込みます。%b は 3 文字
を、%B は必要な分だけの文字を要求します。

空白 (スペース) の扱いはやや違います。書式文字列中の 1 つの空白は、ファ
イル中の 0 個、あるいは 1 つ以上の空白文字列を表します。すなわち、"%H
%M" は "1220" や "12 20" を "12 20" と同じように読みます。

データ中の非空白文字の集まりそれぞれは、`using n:n` 指定の一つ一つの列
とカウントされます。よって `11:11 25/12/76 21.0` は 3 列のデータと認識
されます。混乱を避けるために、日時データが含まれる場合 `gnuplot` は、あ
なたの *Note using:: 指定が完璧なものであると仮定します。

日付データが曜日、月の名前を含んでいる場合、書式文字列でそれを排除しな
ければいけませんが、"%a", "%A", "%b", "%B" でそれらを表示することはでき
ます。`gnuplot` は数値から月や曜日を正しく求めます。これら、及び日時デー
タの出力の他のオプションの詳細に関しては、以下参照: *Note format::。

2 桁の西暦を %y で読む場合、69-99 は 2000 年未満、00-68 は 2000 年以後
と見なします。注: これは、UNIX98 の仕様に合わせたものですが、この慣例は
あちこちで違いがあるので、2 桁の西暦値は本質的にあいまいです。

他の情報については、以下も参照: *Note xdata::, `time/date`。

例:
           set timefmt "%d/%m/%Y\t%H:%M"

は、`gnuplot` に日付と時間がタブで分離していることを教えます (ただし、
あなたのデータをよーく見てください。タブだったものがどこかで複数のスペー
スに変換されていませんか ? 書式文字列はファイル中に実際にある物と一致し
ていなければなりません)。以下も参照時系列データ (time data) デモ。
(http://www.gnuplot.info/demo/timedat.html)



File: gnuplot.info, Node: title_, Next: tmargin, Prev: timefmt, Up: set-show

title
-----



コマンド *Note title:: は、描画の上の真中に書かれる描画タイトルを生成し
ます。*Note title:: は `set label` の特殊なもの、とみなせます。

書式:
           set title {"<title-text>"} {offset <offset>} {font "<font>{,<size>}"}
                     {{textcolor | tc} {<colorspec> | default}} {{no}enhanced}
           show title


<offset> を x,y かまたは x,y,z の形式で指定した場合は、タイトルは与えら
れた値だけ移動されます。それに座標系を選択して、その前に `first`,
`second`, `graph`, `screen`, `character` のいずれかをつけることもできま
す。詳細は、以下参照: `coordinates`。デフォルトでは `character` 座標系
が使われます。例えば、"`set title offset 0,-1`" はタイトルの y 方向の位
置のみ変更し、大ざっぱに言って 1 文字分の高さだけタイトルを下に下げます。
1 文字の大きさは、フォントと出力形式の両方に依存します。

<font> はタイトルが書かれるフォントを指定するのに使われます。<size> の
単位は、どの出力形式 (terminal) を使っているかによって変わります。

`textcolor <colorspec>` は、文字の色を変更します。<colorspec> は、線種、
rgb 色、またはパレットへの割当のいずれかが指定できます。以下参照:
`colorspec`, *Note palette::。

`noenhanced` は、拡張文字列処理 (enhanced text) モードが有効になってい
る場合でも、タイトルを拡張文字列処理させないようにします。

*Note title:: をパラメータなしで使うとタイトルを消去します。

バックスラッシュ文字列の作用、及び文字列を囲む単一引用符と二重引用符の
違いについては、以下参照: `syntax`。



File: gnuplot.info, Node: tmargin, Next: trange, Prev: title_, Up: set-show

tmargin
-------



コマンド *Note tmargin:: は上の余白のサイズをセットします。詳細は、以下
参照: *Note margin::。



File: gnuplot.info, Node: trange, Next: urange, Prev: tmargin, Up: set-show

trange
------



コマンド *Note trange:: は、媒介変数モード、あるいは極座標モードでの x,y
の値を計算するのに使われる媒介変数の範囲を設定します。詳細は、以下参照:
*Note xrange::。



File: gnuplot.info, Node: urange, Next: variables, Prev: trange, Up: set-show

urange
------



*Note urange:: と *Note vrange:: は、`splot` の媒介変数モードで x,y,z の値
を計算するのに使われる媒介変数の範囲を設定します。詳細は、以下参照:
*Note xrange::。



File: gnuplot.info, Node: variables, Next: version, Prev: urange, Up: set-show

variables
---------

*Note variables:: コマンドはユーザ定義変数と内部変数の現在の値の一覧を
表示します。gnuplot は、GPVAL_, MOUSE_, FIT_, TERM_ で始まる名前を持つ
変数を内部で定義しています。

書式:
           show variables      # GPVAL_ で始まるもの以外の変数を表示
           show variables all  # GPVAL_ で始まるものも含め全ての変数を表示
           show variables NAME # NAME で始まる変数のみを表示





File: gnuplot.info, Node: version, Next: view, Prev: variables, Up: set-show

version
-------

コマンド *Note version:: は現在起動している gnuplot のバージョン、最終
修正日、著作権者と、FAQ や info-gnuplot メーリングリスト、バグレポート
先のメールアドレスを表示します。対話的にプログラムが呼ばれているときは
スクリーン上にその情報を表示します。

書式:
           show version {long}


`long` オプションを与えると、さらにオペレーティングシステム、
`gnuplot`インストール時のコンパイルオプション、ヘルプファイルの置き場所、
そして(再び) 有用なメールアドレスを表示します。



File: gnuplot.info, Node: view, Next: vrange, Prev: version, Up: set-show

view
----



コマンド *Note view:: は `splot` の視線の角度を設定します。これは、グラ
フ描画の 3 次元座標をどのように 2 次元の画面 (screen) に投影するかを制
御します。これは、描画されたデータの回転と縮尺の制御を与えてくれますが
正射影しかサポートしていません。3 次元射影、および 2 次元描画的地図上へ
の 2 次元直交射影がサポートされています。

書式:
           set view <rot_x>{,{<rot_z>}{,{<scale>}{,<scale_z>}}}
           set view map
           set view {no}equal {xy|xyz}
           show view


ここで <rot_x> と <rot_z> は、画面に投影される仮想的な 3 次元座標系の回
転角 (単位は度) の制御で、最初は (すなわち回転が行なわれる前は)画面内の
水平軸は x, 画面内の垂直軸は y, 画面自身に垂直な軸が z となっています。
最初は x 軸の周りに <rot_x> だけ回転されます。次に、新しいz 軸の周りに
<rot_z> だけ回転されます。

コマンド `set view map` は、描画を地図として表示するのに使います。これ
は等高線 (`contour`) の描画、およびカラー表示 (`pm3d`) の色地図に使えま
す。後者に関しては、入力データ点のフィルタ用の *Note zrange:: の設定、
および色の範囲の縮尺に関する *Note cbrange:: の設定を適切に行うことに注
意してください。

<rot_x> は [0:180] の範囲に制限されていて、デフォルトでは 60 度です。
<rot_z> は [0:360] の範囲に制限されていて、デフォルトでは 30 度です。
<scale> は `splot` 全体の伸縮率を制御し、<scale_z> は z 軸の伸縮のみを
行ないます。伸縮率のデフォルトはどちらも 1.0 です。

例:
           set view 60, 30, 1, 1
           set view ,,0.5


最初の例は 4 つの全てをデフォルトの値にしています。2 つめの例は縮小率の
みを 0.5 に変更しています。

* Menu:

* equal_axes::



File: gnuplot.info, Node: equal_axes, Prev: view, Up: view

equal_axes
..........


コマンド `set view equal xy` は x 軸と y 軸の単位の長さが強制的に等しく
なるように縮尺を合わせ、グラフがページに丁度合うようにその縮尺を選択し
ます。コマンド `set view equal xyz` は、さらに z 軸も x と y 軸に合うよ
うにしますが、現在の z 軸の範囲が、描画境界の範囲に合う保証はありません。
デフォルトでは、3 つの軸は独立に有効な領域を埋めるように伸縮されます。

以下も参照: *Note xyplane::。



File: gnuplot.info, Node: vrange, Next: x2data, Prev: view, Up: set-show

vrange
------



コマンド *Note urange:: と *Note vrange:: は、`splot` の媒介変数 (パラ
メータ) モードで x, y, z の値を計算するのに使われる媒介変数の範囲を設定
します。 詳細は、以下参照: *Note xrange::。



File: gnuplot.info, Node: x2data, Next: x2dtics, Prev: vrange, Up: set-show

x2data
------



コマンド *Note x2data:: は x2 (上) 軸のデータを時系列 (日時) 形式に設定
します。詳細は、以下参照: *Note xdata::。



File: gnuplot.info, Node: x2dtics, Next: x2label, Prev: x2data, Up: set-show

x2dtics
-------




コマンド *Note x2dtics:: は x2 (上) 軸の目盛りを曜日に変更します。詳細
は、以下参照: *Note xdtics::。



File: gnuplot.info, Node: x2label, Next: x2mtics, Prev: x2dtics, Up: set-show

x2label
-------



コマンド *Note x2label:: は x2 (上) 軸の見出しを設定します。詳細は、以
下参照: *Note xlabel::。



File: gnuplot.info, Node: x2mtics, Next: x2range, Prev: x2label, Up: set-show

x2mtics
-------




コマンド *Note x2mtics:: は、x2 (上) 軸を 1 年の各月に設定します。詳細
は、以下参照: *Note xmtics::。



File: gnuplot.info, Node: x2range, Next: x2tics, Prev: x2mtics, Up: set-show

x2range
-------



コマンド *Note x2range:: は x2 (上) 軸の表示される水平範囲を設定します。
詳細は、以下参照: *Note xrange::。



File: gnuplot.info, Node: x2tics, Next: x2zeroaxis, Prev: x2range, Up: set-show

x2tics
------




コマンド *Note x2tics:: は x2 (上) 軸の、見出し付けされる大目盛りの制御
を行ないます。詳細は、以下参照: `set xtics`。



File: gnuplot.info, Node: x2zeroaxis, Next: xdata, Prev: x2tics, Up: set-show

x2zeroaxis
----------




コマンド *Note x2zeroaxis:: は、原点を通る x2 (上) 軸 (y2 = 0) を描きま
す。詳細は、以下参照: *Note zeroaxis::。



File: gnuplot.info, Node: xdata, Next: xdtics, Prev: x2zeroaxis, Up: set-show

xdata
-----



このコマンドは x 軸のデータ形式を日時データにセットします。同様のコマン
ドが他の軸それぞれに用意されています。

書式:
           set xdata {time}
           show xdata


*Note ydata::, *Note zdata::, *Note x2data::, *Note y2data::, *Note
cbdata:: にも同じ書式が当てはまります。

`time` オプションはデータが日時データであることを伝えます。オプションを
つけない場合、データ型は通常のものに戻ります。

gnuplot にどのように日時データを読みこませるかについては、以下参照:
*Note timefmt::。日時データは今世紀の始まり (訳注: 厳密には 2000 年 1
月1 日の始まり) からの秒数に変換されます。時間書式 (timefmt) は現在はた
だ一つだけしか使えません。それは、全ての日時データ項目がこの書式に一致
しなければならないことを意味します。また、範囲の指定は、日時指定が数式
と解釈されるのを避けるために、その書式に従った文字列を引用符で囲んで指
定すべきです。

目盛り刻みの見出し (label) を表示するのには関数 'strftime' (unix でそれ
を調べるには "man strftime" とタイプしてください) が使われます。`set
format x "string"` で、10 進数の書式ではなさそうなもの (2 つ以上の '%'、
または %f でも %g でもないもの) が与えられていなければ、`gnuplot` はこ
れを適当に意味のある書式で計算して表示します。

他の情報については、以下参照: `time/date`。



File: gnuplot.info, Node: xdtics, Next: xlabel, Prev: xdata, Up: set-show

xdtics
------




コマンド *Note xdtics:: は x 軸の目盛りの刻みを曜日に変換します
(0=Sun, 6=Sat)。6 を越える場合は 7 による余りが使われます。*Note
xdtics:: はその見出しをデフォルトの形式に戻します。他の軸にも同じことを
行なう同様のコマンドが用意されています。

書式:
           set xdtics
           unset xdtics
           show xdtics


*Note ydtics::, *Note zdtics::, *Note x2dtics::, *Note y2dtics::,
*Note cbdtics:: にも同じ書式が当てはまります。

以下も参照: *Note format::。



File: gnuplot.info, Node: xlabel, Next: xmtics, Prev: xdtics, Up: set-show

xlabel
------



コマンド *Note xlabel:: は x 軸の見出しを設定します。他の軸にも見出しを
設定する同様のコマンドがあります。

書式:
           set xlabel {"<label>"} {offset <offset>} {font "<font>{,<size>}"}
                      {textcolor <colorspec>} {{no}enhanced}
                      {rotate by <degrees> | rotate parallel | norotate}
           show xlabel


同じ書式が *Note x2label::, *Note ylabel::, *Note y2label::, *Note
zlabel::, *Note cblabel:: にも適用されます。

<offset> を x,y かまたは x,y,z の形式で指定した場合は、見出しは与えられ
た値だけ移動されます。それに座標系を選択して、その前に `first`,
`second`, `graph`, `screen`, `character` のいずれかをつけることもできま
す。詳細は、以下参照: `coordinates`。デフォルトでは `character` 座標系
が使われます。例えば、"`set xlabel offset -1,0`" は見出しの x 方向の位
置のみ変更し、大ざっぱに言って 1 文字分の幅だけ見出しを左にずらします。
1 文字の大きさは、フォントと出力形式の両方に依存します。

<font> は見出しが書かれるフォントを指定するのに使われます。フォントの
<size> (大きさ) の単位は、どんな出力形式を使うかに依存します。

`noenhanced` は、拡張文字列処理 (enhanced text) モードが有効になってい
る場合でも、ラベル文字列を拡張文字列処理させないようにします。

見出しを消去するには、オプションをつけずに実行します。例: "*Note
y2label::"

軸の見出しのデフォルトの位置は以下の通りです:

xlabel: x 軸の見出しはグラフの下の真中

ylabel: y 軸の見出しはグラフの左の真中で、水平方向に書かれるか垂直方向
になるかは出力形式依存

zlabel: z 軸の見出しは軸の表示範囲より上で、見出しの真中が z 軸の真上

cblabel: 色見本 (color box) の軸の見出しは箱に沿って中央揃えされ、箱の
向きが水平なら下に、垂直なら右に

y2label: y2 軸の見出しは y2 軸の右。その位置は、出力形式依存で y 軸と同
様の規則で決定。

x2label: x2 軸の見出しはグラフの上で、タイトルよりは下。これは、 改行文
字を使えば、それによる複数の行からなる描画タイトルで x2 軸の見出しを生
成することも可能。例:

           set title "This is the title\n\nThis is the x2label"


これは二重引用符を使うべきであることに注意してください。この場合、もち
ろん 2 つの行で同じフォントが使われます。

2 次元描画の場合の x, x2, y, y2 軸のラベルの方向 (回転角) は、`rotate
by <角度>` を指定することで変更できます。3 次元描画の x, y 軸のラベルの
方向はデフォルトでは水平方向になっていますが、`rotate parallel` を指定
することで軸に平行にすることができます。

もし軸の位置のデフォルトの位置が気に入らないならば、代わりに `set
label`を使ってください。このコマンドは文字列をどこに配置するかをもっと
自由に制御できます。

バックスラッシュ文字列の作用、及び文字列を囲む単一引用符と二重引用符の
違いに関するより詳しい情報については、以下参照: `syntax`。



File: gnuplot.info, Node: xmtics, Next: xrange, Prev: xlabel, Up: set-show

xmtics
------




コマンド *Note xmtics:: は x 軸の目盛りの見出しを月に変換します。1=Jan
(1 月)、12=Dec (12 月) となります。12 を越えた数字は、12 で割ったあまり
の月に変換されます。*Note xmtics:: で目盛りはデフォルトの見出しに戻りま
す。他の軸に対しても同じ役割をする同様のコマンドが用意されています。

書式:
           set xmtics
           unset xmtics
           show xmtics


*Note x2mtics::, *Note ymtics::, *Note y2mtics::, *Note zmtics::,
*Note cbmtics:: にも同じ書式が適用されます。

以下も参照: コマンド *Note format::。



File: gnuplot.info, Node: xrange, Next: xtics, Prev: xmtics, Up: set-show

xrange
------





コマンド *Note xrange:: は表示される水平方向の範囲を指定します。他の軸
にも同様のコマンドが存在しますし、極座標での動径 r, 媒介変数 t, u, vに
も存在します。

書式:
           set xrange { [{{<min>}:{<max>}}] {{no}reverse} {{no}writeback} }
                      | restore
           show xrange


ここで <min> と <max> には定数、数式、または '*' で、'*' は自動縮尺機能
を意味します。自動縮尺機能に関する詳細は下に述べます。日時データの場合、
範囲は *Note timefmt:: の書式に従った文字列を引用符で囲む必要があります。
省略された値は変更されません。

*Note yrange::, *Note zrange::, *Note x2range::, *Note y2range::, *Note cbrange::, *Note rrange::, *Note trange::,
*Note urange::, *Note vrange:: は同じ書式を使用します。

オプション `reverse` は軸の方向を逆にします。例えば`set xrange [0:1]
reverse` は、1 が左、0 が右であるような軸にします。これは、もちろん
`set xrange [1:0]` と同じですが、`reverse` は主に自動縮尺 (*Note
autoscale::) で用いられることを意図しています。

自動縮尺機能: <min> (同様のことが <max> にも適用されます) がアスタリス
ク "*" の場合は自動縮尺機能がオンになります。その場合のその値に、下限
<lb>、または上限 <ub>、またはその両方の制限を与えられます。書式は以下の
通りです。
           { <lb> < } * { < <ub> }

例えば
           0 < * < 200

は <lb> = 0, <ub> = 200 となります。そのような設定では、<min> は自動縮
尺されますが、その最終的な値は 0 から 200 の間になります (記号は '<'で
すが両端の値も含みます)。下限か上限を指定しない場合は、その '<' も省略
できます。<ub> が <lb> より小さい場合は、制限はオフになり、完全な自動縮
尺になります。この機能は、自動縮尺だけれども範囲に制限がある測定データ
の描画や、外れ値のクリッピング、またはデータがそれほどの範囲を必要とし
ていなくても最小の描画範囲を保証するのに有用でしょう。

オプション `writeback` は、*Note xrange:: で占められているバッファの中
に自動縮尺機能により作られた範囲を保存します。これは、いくつかの関数を
同時に表示し、しかしその範囲はそのうちのいくつかのものから決定させたい
場合に便利です。`writeback` の作用は、*Note plot:: の実行中に機能するの
で、そのコマンドの前に指定する必要があります。最後に保存した水平方向の
範囲は`set xrange restore` で復元できます。例を上げます。

           set xrange [-10:10]
           set yrange [] writeback
           plot sin(x)
           set yrange restore
           replot x/2


この場合、y の範囲 (yrange) は sin(x) の値域として作られた [-1:1] の方
になり、x/2 の値域 [-5:5] は無視されます。上記のそれぞれのコマンドの後
に *Note yrange:: を実行すれば、上で何が行なわれているかを理解する助け
になるでしょう。

2 次元描画において、*Note xrange:: と *Note yrange:: は軸の範囲を決定し、
*Note trange::は、媒介変数モードの媒介変数の範囲、あるいは極座標モード
の角度の範囲を決定します。同様に 3 次元媒介変数モードでは、*Note
xrange::, *Note yrange::, *Note zrange::が軸の範囲を管理し、*Note
urange:: と *Note yrange:: が媒介変数の範囲を管理します。

極座標モードでは、*Note rrange:: は描画される動径の範囲を決定します。
<rmin>は動径への追加の定数として作用し、一方 <rmax> は動径を切り捨てる
(clip)ように作用し、<rmax> を越えた動径に対する点は描画されません。
*Note xrange::と *Note yrange:: は影響されます。これらの範囲は、グラフ
が r(t)-rmin のグラフで、目盛りの見出しにはそれぞれ rmin を加えたような
ものであるかのようにセットされます。

全ての範囲は部分的に、または全体的に自動縮尺されますが、データの描画で
なければ、パラメータ変数の自動縮尺機能は意味がないでしょう。

範囲は *Note plot:: のコマンドライン上でも指定できます。コマンドライン
上で与えられた範囲は単にその *Note plot:: コマンドでだけ使われ、`set`
コマンドで設定された範囲はその後の描画で、コマンドラインで範囲を指定し
ていないもの全てで使われます。これは `splot` も同じです。

例:

x の範囲をデフォルトの値にします:
           set xrange [-10:10]


y の範囲が下方へ増加するようにします:
           set yrange [10:-10]


z の最小値には影響を与えずに (自動縮尺されたまま)、最大値のみ 10 に設定
します:
           set zrange [:10]


x の最小値は自動縮尺とし、最大値は変更しません:
           set xrange [*:]


x の最小値を自動縮尺としますが、その最小値は 0 以上にします。
           set xrange [0<*:]


x の範囲を自動縮尺としますが、小さくても 10 から 50 の範囲を保持します
(実際はそれより大きくなるでしょう):
           set xrange [*<10:50<*]


自動縮尺で最大範囲を -1000 から 1000、すなわち [-1000:1000] 内で自動縮
尺します:
           set xrange [-1000<*:*<1000]


x の最小値を -200 から 100 の間のどこかにします:
           set xrange [-200<*<100:]





File: gnuplot.info, Node: xtics, Next: xyplane, Prev: xrange, Up: set-show

xtics
-----




x 軸の (見出しのつく) 大目盛りは コマンド `set xtics` で制御できます。
目盛りは `unset xtics` で消え、`set xtics` で (デフォルトの状態の) 目盛
りがつきます。y,z,x2,y2 軸の大目盛りの制御を行なう同様のコマンドがあり
ます。

書式:
           set xtics {axis | border} {{no}mirror}
                     {in | out} {scale {default | <major> {,<minor>}}}
                     {{no}rotate {by <ang>}} {offset <offset> | nooffset}
                     {left | right | center | autojustify}
                     {add}
                     {  autofreq
                      | <incr>
                      | <start>, <incr> {,<end>}
                      | ({"<label>"} <pos> {<level>} {,{"<label>"}...) }
                     { format "formatstring" } { font "name{,<size>}" }
                     { rangelimited }
                     { textcolor <colorspec> }
           unset xtics
           show xtics


同じ書式が *Note ytics::, *Note ztics::, *Note x2tics::, *Note
y2tics::, *Note cbtics:: にも適用されます。

`axis` と *Note border:: は `gnuplot` に目盛り (目盛りの刻自身とその見
出し)を、それぞれ軸につけるのか、境界につけるのかを指示します。軸が境界
にとても近い場合、`axis` を使用すると目盛りの見出し文字を境界の外に出し
てしまうでしょう。この場合自動的なレイアウトアルゴリズムによる余白設定
は大抵よくないものとなってしまいます。

`mirror` は `gnuplot` に反対側の境界の同じ位置に、見出しのない目盛りを
出力するよう指示します。`nomirror` は、あなたが想像している通りのことを
行ないます。

`in` と `out` は目盛りの刻みを内側に描くか外側に描くかを切り変えます。

目盛りの刻みのサイズは `scale` で調整できます。<minor> の指定が省略され
た場合は、それは 0.5*<major> になります。デフォルトのサイズは、大目盛り
が 1.0 で小目盛りが 0.5 で、これは `scale default` で呼びだせます。

`rotate` は、文字列を 90 度回転させて出力させようとします。これは、文字
列の回転をサポートしている出力ドライバ (terminal) では実行されます。
`norotate` はこれをキャンセルします。`rotate by <ang>` は角度 <ang> の
回転を行ないますが、これはいくつかの出力形式 (terminal) でサポートされ
ています。

x と y 軸の大目盛りのデフォルトは `border mirror norotate` で、x2, y2軸
は `border nomirror norotate` がデフォルトです。z 軸には、`{axis |
border}` オプションは無効で、デフォルトは `nomirror` です。z軸の目盛り
をミラー化したいなら、多分 *Note border:: でそのための空間をあける必要
があるでしょう。

<offset> は x,y かまたは x,y,z の形式で指定しますが、それに座標系を選択
して、その前に `first`, `second`, `graph`, `screen`, `character` のいず
れかをつけることもできます。<offset> は刻み文字のデフォルトの位置からの
ずれを表し、デフォルトの座標系は `character` です。詳細は、以下参照:
`coordinates`。`nooffset` はずらしを無効にします。

例:

xtics をより描画に近づける:
           set xtics offset 0,graph 0.05


デフォルトでは見出しラベルは、美しい結果を生むように、軸と回転角に依存
した位置に自動的に位置合わせされます。それが気にいらなければ、明示的に
`left`, `right`, `center` のキーワードにより位置合わせを変更できます。
`autojustify` でデフォルトの挙動に復帰します。

オプションなしで `set xtics` を実行すると、目盛りが表示される状態であれ
ば、それはデフォルトの境界、または軸を復元し、そうでなければ何もしませ
ん。その前に指定した目盛りの間隔、位置 (と見出し) は保持されます。

目盛りの位置は、デフォルト、またはオプション `autofreq` が指定されてい
れば自動的に計算されます。そうでなければ、次の 2 つの形式で指定されます:

暗示的な <start>, <incr>, <end> 形式は、目盛りの列を <start> から
<end>の間を <incr> の間隔で表示します。<end> を指定しなければ、それは無
限大とみなされます。<incr> は負の値も可能です。<start> と <end> の両方
が指定されていない場合、<start> は -∞、<end> は +∞とみなされ、目盛りは
<incr> の整数倍の位置に表示されます。軸が対数軸の場合、目盛りの間隔(増
分) は、倍数として使用されます。

負の <start> や <incr> を、数値の後ろに指定すると (例えば`rotate by
<angle>` とか `offset <offset>` の後ろ)、gnuplot の構文解析器は、その値
からその負の <start> や <incr> の値の引き算を行おうとする間違いを犯しま
す。これを回避するには、そのような場合は、`0-<start>` や`0-<incr>` のよ
うに指定してください。

例:
           set xtics border offset 0,0.5 -5,1,5

最後の ',' のところで失敗します。
           set xtics border offset 0,0.5 0-5,1,5

か
           set xtics offset 0,0.5 border -5,1,5

ならば、ちゃんと指示通りに、目盛りを境界に、目盛り見出し文字列を 0,0.5
文字分だけずらして、start, increment, end をそれぞれ -5,1,5 に設定しま
す。

*Note grid:: のオプション 'front', 'back', 'layerdefault' も、x 軸の目
盛りの描画の順序に影響します。

例:

目盛りを 0, 0.5, 1, 1.5, ..., 9.5, 10 の位置に生成
           set xtics 0,.5,10


目盛りを ..., -10, -5, 0, 5, 10, ... に生成
           set xtics 5


目盛りを 1, 100, 1e4, 1e6, 1e8 に生成
           set logscale x; set xtics 1,100,1e8


明示的な ("<label>" <pos> <level>, ...) の形式は、任意の目盛りの位置、
あるいは数字でない見出しの生成も可能にします。この形式では、目盛りは位
置の数字の順に与える必要はありません。各目盛りは位置 (pos) と見出し
(label) を持ちますが、見出しは必須ではありません。見出しは二重引用符で
囲まれた文字列であることに注意してください。それは、"hello" のような固
定文字列でも構いませんし、"%3f clients" のようにその位置を数字に変換す
る書式文字列を含んでも構いませんし、空文字列 "" でも構いません。より詳
しい情報については、以下参照: *Note format::。もし、文字列が与えられな
ければ、デフォルトの数字の見出しが使用されます。

明示的な形式では 3 つ目のパラメータとして "レベル" (level) を与えること
ができます。デフォルトのレベルは 0 で、これは大目盛りを意味し、レベルが
1 の場合小目盛りが生成されます。レベルを指定する場合はラベルも必ず指定
する必要があります。

例:
           set xtics ("low" 0, "medium" 50, "high" 100)
           set xtics (1,2,4,8,16,32,64,128,256,512,1024)
           set ytics ("bottom" 0, "" 10, "top" 20)
           set ytics ("bottom" 0, "" 10 1, "top" 20)


2 番目の例では、全ての目盛りが見出し付けされます。3 番目の例では、端の
ものだけが見出し付けされます。4 番目の例の、見出しのない目盛りは小目盛
りになります。

通常明示的な (手動の) 目盛り位置が与えられた場合、自動的に生成される目
盛りは使われません。逆に、`set xtics auto` のようなものが指定された場合
は、以前に手動で設定した目盛りは消されてしまします。この手動の目盛りと
自動的な目盛りを共存させるにはキーワード `add` を使用してください。これ
は追加する目盛りのスタイルの前に書かなければいけません。

例:
           set xtics 0,.5,10
           set xtics add ("Pi" 3.14159)


これは自動的に目盛りの刻みを x 軸に 0.5 間隔でつけますが、πのところに明
示的な見出しも追加します。

しかし指定しても、表示されるのはあくまで描画範囲のものだけです。

目盛りの見出しの書式 (または省略) は *Note format:: で制御されます。た
だしそれは `set xtics (`<label>`)` の形式の明示的な見出し文字列が含まれ
ていない場合だけです。

(見出し付けされない) 小目盛りは、*Note mxtics:: コマンドで自動的に追加
するか、または位置を手動で `set xtics ("" <pos> 1, ...)` の形式で与える
こともできます。

* Menu:

* xtics_time_data::
* xtics_rangelimited::



File: gnuplot.info, Node: xtics_time_data, Next: xtics_rangelimited, Prev: xtics, Up: xtics

xtics time_data
...............

時系列データの場合、軸の目盛り位置の値は *Note timefmt:: の書式にしたがった
日付、または時刻を引用符で囲んで与えなければいけません。<start>,
<incr>, <end> 形式を使う場合、<start> と <end> は *Note timefmt:: に従って与
えますが、<incr> は秒単位で与える必要があります。その時刻は実際には
*Note format:: で与えた書式に従って表示されます。

例:
           set xdata time
           set timefmt "%d/%m"
           set xtics format "%b %d"
           set xrange ["01/12":"06/12"]
           set xtics "01/12", 172800, "05/12"


           set xdata time
           set timefmt "%d/%m"
           set xtics format "%b %d"
           set xrange ["01/12":"06/12"]
           set xtics ("01/12", "" "03/12", "05/12")

これらは両方とも "Dec 1", "Dec 3", "Dec 5", の目盛りを生成しますが、2番
目の例 "Dec 3" の目盛りは見出し付けされません。



File: gnuplot.info, Node: xtics_rangelimited, Prev: xtics_time_data, Up: xtics

xtics rangelimited
..................



このオプションは、自動的に生成される軸の目盛りの見出しと、描画されたデー
タで実際に与えられる範囲に対応する描画境界の両方を制限します。これは描
画に対する現在の範囲制限とは無関係であることに注意してください。例えば
データ "file.dat" のデータがすべて 2 < y < 4 の範囲にあるとすると、以下
のコマンドは、左側の描画境界 (y 軸) は y の範囲全体 ([0:10]) のこの部分
([2:4]) のみが描画され、この範囲 ([2:4]) の軸の目盛りのみが作られる描画
を生成します。つまり、描画は y の範囲全体 ([0:10]) に拡大されますが、左
の境界は 0 から 2 の間、4 から 10 の間は空白領域となります。このスタイ
ルは、`範囲枠` グラフ (range-frame) とも呼ばれます。
           set border 3
           set yrange [0:10]
           set ytics nomirror rangelimited
           plot "file.dat"




File: gnuplot.info, Node: xyplane, Next: xzeroaxis, Prev: xtics, Up: set-show

xyplane
-------



*Note xyplane:: コマンドは 3D 描画で描かれる xy 平面の位置を調整するの
に使われます。後方互換性のために、"set ticslevel" も同じ意味のコマンド
として使うことができます。

書式:
           set xyplane at <zvalue>
           set xyplane relative <frac>
           set ticslevel <frac>        # set xyplane relative と同等
           show xyplane


`set xyplane relative <frac>` は、xy 平面を Z 軸の範囲のどこに置くかを
決定します。<frac> には、xy 平面と z の一番下の位置との差の、z 軸の範囲
全体に対する割合を与えます。デフォルトの値は 0.5 です。負の値も許されて
いますが、そうすると 3 つの軸の目盛りの見出しが重なる可能性があります。
非推奨ですが、古い形式 *Note ticslevel:: も後方互換性のために残されてい
ます。

xy 平面を z 軸の 'pos' の位置に置くには、*Note ticslevel:: の値を
(pos - zmin) / (zmin - zmax) としてください。しかし、この位置は z の範
囲 (*Note zrange::) を変更した場合は変わってしまいます。

もう一つの形式である `set xyplane at <zvalue>` は、現在の z の範囲を気
にすることなく、指定した z の値の位置に xy 平面を固定します。よって、
x,y,z 軸を共通の原点を通るようにするには、`set xyplane at 0` とすればい
いことになります。

以下も参照: *Note view::, *Note zeroaxis::。



File: gnuplot.info, Node: xzeroaxis, Next: y2data, Prev: xyplane, Up: set-show

xzeroaxis
---------




コマンド *Note xzeroaxis:: は y = 0 の直線を描きます。詳細に関しては、
以下参照: *Note zeroaxis::。



File: gnuplot.info, Node: y2data, Next: y2dtics, Prev: xzeroaxis, Up: set-show

y2data
------



コマンド *Note y2data:: は y2 (右) 軸のデータを時系列 (日時) 形式に設定
します。詳細は、以下参照: *Note xdata::。



File: gnuplot.info, Node: y2dtics, Next: y2label, Prev: y2data, Up: set-show

y2dtics
-------




コマンド *Note y2dtics:: は y2 (右) 軸の目盛りを曜日に変更します。詳細
は、以下参照: *Note xdtics::。



File: gnuplot.info, Node: y2label, Next: y2mtics, Prev: y2dtics, Up: set-show

y2label
-------



コマンド *Note y2label:: は y2 (右) 軸の見出しを設定します。詳細は、以
下参照: *Note xlabel::。



File: gnuplot.info, Node: y2mtics, Next: y2range, Prev: y2label, Up: set-show

y2mtics
-------




コマンド *Note y2mtics:: は y2 (右) 軸の目盛りを 1 年の各月に変更します。
詳細は、以下参照: *Note xmtics::。



File: gnuplot.info, Node: y2range, Next: y2tics, Prev: y2mtics, Up: set-show

y2range
-------



コマンド *Note y2range:: は y2 (右) 軸の表示される垂直範囲を設定します。
詳細は、以下参照: *Note xrange::。



File: gnuplot.info, Node: y2tics, Next: y2zeroaxis, Prev: y2range, Up: set-show

y2tics
------




コマンド *Note y2tics:: は y2 (右) 軸の、見出し付けされる大目盛りの制御
を行ないます。詳細は、以下参照: `set xtics`。



File: gnuplot.info, Node: y2zeroaxis, Next: ydata, Prev: y2tics, Up: set-show

y2zeroaxis
----------




コマンド *Note y2zeroaxis:: は、原点を通る y2 (右) 軸 (x2 = 0) を描きま
す。詳細は、以下参照: *Note zeroaxis::。



File: gnuplot.info, Node: ydata, Next: ydtics, Prev: y2zeroaxis, Up: set-show

ydata
-----



コマンド *Note ydata:: は y 軸のデータを時系列 (日時) 形式に設定します。
以下参照: *Note xdata::。



File: gnuplot.info, Node: ydtics, Next: ylabel, Prev: ydata, Up: set-show

ydtics
------




コマンド *Note ydtics:: は y 軸の目盛りを曜日に変更します。詳細は、以下
参照: *Note xdtics::。



File: gnuplot.info, Node: ylabel, Next: ymtics, Prev: ydtics, Up: set-show

ylabel
------



このコマンドは y 軸の見出しを設定します。以下参照: *Note xlabel::。



File: gnuplot.info, Node: ymtics, Next: yrange, Prev: ylabel, Up: set-show

ymtics
------




コマンド *Note ymtics:: は、y 軸の目盛りを月に変更します。詳細は、以下
参照: *Note xmtics::。



File: gnuplot.info, Node: yrange, Next: ytics, Prev: ymtics, Up: set-show

yrange
------



コマンド *Note yrange:: は、y 方向の垂直範囲を設定します。詳細は、以下
参照: *Note xrange::。



File: gnuplot.info, Node: ytics, Next: yzeroaxis, Prev: yrange, Up: set-show

ytics
-----




コマンド *Note ytics:: は y 軸の (見出し付けされる) 大目盛りを制御しま
す。詳細は、以下参照: `set xtics`。



File: gnuplot.info, Node: yzeroaxis, Next: zdata, Prev: ytics, Up: set-show

yzeroaxis
---------




コマンド *Note yzeroaxis:: は x = 0 の直線 (y 軸) を書きます。詳細は、
以下参照: *Note zeroaxis::。



File: gnuplot.info, Node: zdata, Next: zdtics, Prev: yzeroaxis, Up: set-show

zdata
-----



コマンド *Note zdata:: は z 軸のデータを時系列 (日時) 形式に設定します。
以下参照: *Note xdata::。



File: gnuplot.info, Node: zdtics, Next: zzeroaxis, Prev: zdata, Up: set-show

zdtics
------




コマンド *Note zdtics:: は z 軸の目盛りを曜日に変更します。詳細は、以下
参照: *Note xdtics::。



File: gnuplot.info, Node: zzeroaxis, Next: cbdata, Prev: zdtics, Up: set-show

zzeroaxis
---------




コマンド *Note zzeroaxis:: は (x=0,y=0) を通る直線を描きます。これは、
2D描画、および `set view map` での splot では効力を持ちません。詳細は、
以下参照: *Note zeroaxis::, *Note xyplane::。



File: gnuplot.info, Node: cbdata, Next: cbdtics, Prev: zzeroaxis, Up: set-show

cbdata
------



このコマンドはカラーボックス軸のデータを時系列 (日時) 形式に式に設定し
ます。以下参照: *Note xdata::。



File: gnuplot.info, Node: cbdtics, Next: zero, Prev: cbdata, Up: set-show

cbdtics
-------




コマンド *Note cbdtics:: はカラーボックス軸の目盛りの刻みを曜日に変換し
ます。詳細は、以下参照: *Note xdtics::。



File: gnuplot.info, Node: zero, Next: zeroaxis, Prev: cbdtics, Up: set-show

zero
----



`zero` の値は、0.0 に近いデフォルトの閾値を表します。

書式:
           set zero <expression>
           show zero


`gnuplot` は、(複素数値を持つ点の描画においては) その値の虚数部分の絶対
値が `zero` 閾値より大きい場合 (つまり実数でない値を持つ点) は、その点
を描画しません。この閾値は `gnuplot` の他の様々な部分においてその(大ま
かな) 数値誤差の閾値としても使われています。デフォルトの `zero` の値は
1e-8 です。1e-3 (= 典型的なビットマップディスプレイの解像度の逆数)より
大きい `zero` の値は設定すべきではないでしょうが、`zero` を 0.0 と設定
するのは意味のないことではありません。



File: gnuplot.info, Node: zeroaxis, Next: zlabel, Prev: zero, Up: set-show

zeroaxis
--------



x 軸は *Note xzeroaxis:: によって描かれ、*Note xzeroaxis:: によって削除
されます。同様の y, x2, y2, z 軸用のコマンドが同様の働きをします。

書式:
           set {x|x2|y|y2|z}zeroaxis { {linestyle | ls <line_style>}
                                      | { linetype | lt <line_type>}
                                        { linewidth | lw <line_width>}}
           unset {x|x2|y|y2|z}zeroaxis
           show {x|y|z}zeroaxis



デフォルトでは、これらのオプションはオフになっています。選択された 0の
軸は <line_type> の線の型と<line_width> の線の幅 (現在使用している出力
形式がサポートしていれば) で、あるいはあらかじめ定義された<line_style>
のスタイルで描かれます。

線の型を指定しなければ、軸は通常の軸の線の型 (型 0) で描かれます。

*Note zeroaxis:: は *Note yzeroaxis:: と同等です。z 軸は、
*Note zzeroaxis:: を使って独立に設定する必要があることに注意してください。

例:

y=0 の軸を見えるように簡単に書く場合:

            set xzeroaxis


太い線にして、違った色、または点線パターンにしたい場合:

            set xzeroaxis linetype 3 linewidth 2.5




File: gnuplot.info, Node: zlabel, Next: zmtics, Prev: zeroaxis, Up: set-show

zlabel
------



このコマンドは z 軸の見出しを設定します。以下参照: *Note xlabel::。



File: gnuplot.info, Node: zmtics, Next: zrange, Prev: zlabel, Up: set-show

zmtics
------




コマンド *Note zmtics:: は z 軸の目盛りを月に変更します。詳細は、以下参
照: *Note xmtics::。



File: gnuplot.info, Node: zrange, Next: ztics, Prev: zmtics, Up: set-show

zrange
------



コマンド *Note zrange:: は z 軸方向に表示される範囲を設定します。このコ
マンドは `splot` にのみ有効で、*Note plot:: では無視されます。詳細は、
以下参照: *Note xrange::。



File: gnuplot.info, Node: ztics, Next: cblabel, Prev: zrange, Up: set-show

ztics
-----




コマンド *Note ztics:: は z 軸の (見出し付けされる) 大目盛りを制御しま
す。詳細は、以下参照: `set xtics`。



File: gnuplot.info, Node: cblabel, Next: cbmtics, Prev: ztics, Up: set-show

cblabel
-------



このコマンドはカラーボックス軸の見出しを設定します。以下参照:
*Note xlabel::。



File: gnuplot.info, Node: cbmtics, Next: cbrange, Prev: cblabel, Up: set-show

cbmtics
-------




コマンド *Note cbmtics:: はカラーボックス軸の目盛りの見出しを月に変換し
ます。詳細は、以下参照: *Note xmtics::。



File: gnuplot.info, Node: cbrange, Next: cbtics, Prev: cbmtics, Up: set-show

cbrange
-------



コマンド *Note cbrange:: は、スタイル `with pm3d`, `with image` や
*Note palette:: などによって現在のパレット (*Note palette::) を使って色
付けされる値の範囲を設定します。その範囲外の値に対しては、最も近い限界
の値の色が使用されます。

カラーボックス軸 (cb-軸) が `splot` で自動縮尺されている場合は、そのカ
ラーボックスの範囲は *Note zrange:: が使われます。
`splot ... pm3d|palette`で描画される点は、異なる *Note zrange:: と
*Note cbrange:: を使うことでフィルタリングできます。

*Note cbrange:: の書式に関する詳細は、以下参照: *Note xrange::。以下も参照:
*Note palette::, `set colorbox`。



File: gnuplot.info, Node: cbtics, Prev: cbrange, Up: set-show

cbtics
------




コマンド *Note cbtics:: はカラーボックス軸の (見出し付けされる) 大目盛
りを制御します。詳細は、以下参照: `set xtics`。



File: gnuplot.info, Node: shell, Next: splot, Prev: set-show, Up: コマンド_(Commands)

shell
=====



*Note shell:: コマンドは対話的なシェルを起動します。`gnuplot` に戻るに
は、VMS では `logout` を、Unix ならば *Note exit:: もしくは
END-OF-FILE 文字を、MS-DOS か OS/2 ならば *Note exit:: を入力して下さい。

シェルコマンドを実行する方法は 2 つあります: コマンド *Note system:: を
使うか `!` (VMS では $) を使うか。前者は、コマンド文字列をパラメータと
して取るので、他の gnuplot コマンドのどこでも使うことができますが、後者
の書式は、その行にそのコマンドただ一つであることを要求します。これらの
場合コマンドが終了するとすぐに制御は `gnuplot` に戻ってきます。例えば
MS-DOS, OS/2 では、

          ! dir

または
          system "dir"


とするとディレクトリの一覧を表示して `gnuplot` に戻ってきます。

*Note system:: を使う他の例:
            system "date"; set time; plot "a.dat"
            print=1; if (print) replot; set out; system "lpr x.ps"




File: gnuplot.info, Node: splot, Next: stats_(簡単な統計情報), Prev: shell, Up: コマンド_(Commands)

splot
=====



`splot` は 3 次元描画のためのコマンドです (もちろんご存知でしょうが、実
際にはその 2 次元への射影)。それは関数、またはファイルから読み込んだデー
タから *Note plot:: コマンドととても良く似た方法でその描画を作ります。
`splot` は、それぞれ単一の x, y, z 軸を提供するだけで、*Note plot:: で
用意されている第 2 軸 x2, y2 のようなものはありません。

2 次元と 3 次元描画の両方で使える多くのオプションについては、以下参照:
*Note plot::。

書式:
           splot {<ranges>}
                 {<iteration>}
                 <function> | "<datafile>" {datafile-modifiers}}
                 {<title-spec>} {with <style>}
                 {, {definitions{,}} <function> ...}


ここで、関数 <function>、またはクォートでくくられたデータファイル名のど
ちらかが必要です。関数は、一本の数式、あるいは媒介変数モードでは3 つの
数式の組です。

デフォルトでは、`splot` は描画されるデータの下に完全な xy 面を描きます。
z の一番下の目盛りと xy 平面の位置関係は *Note xyplane:: で変更できます。
`splot` の射影の向きは *Note view:: で制御できます。詳細は、以下参照:
*Note view::, *Note xyplane::。

`splot` コマンドの範囲の指定の書式は *Note plot:: の場合と同じです。媒
介変数モードでなければ範囲は *Note xrange::, *Note yrange::, *Note
zrange:: の順であり、媒介変数モードでは *Note urange::, *Note
vrange::, *Note xrange::, *Note yrange::, *Note zrange:: の順です。

*Note title:: オプションも *Note plot:: と同じです。*Note with:: も
*Note plot:: とほぼ同じですが、`splot` では利用可能な描画スタイルは
`lines`, `points`, *Note linespoints::, *Note dots::, *Note impulses::
に限られています。*Note plot:: で使えるエラーバーの機能は `splot` には
ありません。

*Note datafile:: オプションにはさらに違いがあります。

以下も参照: *Note plot::。

* Menu:

* データファイル_(datafile)::
* 格子状データ_(grid_data)::
* splot_の曲面_(splot_surfaces)::



File: gnuplot.info, Node: データファイル_(datafile), Next: 格子状データ_(grid_data), Prev: splot, Up: splot

データファイル (datafile)
-------------------------

*Note plot:: と同じように、`splot` でファイルからグラフを生成できます。

書式:
           splot '<file_name>' {binary <binary list>}
                               {{nonuniform} matrix}
                               {index <index list>}
                               {every <every list>}
                               {using <using list>}


`""` や `"-"` といった特別なファイル名も *Note plot:: と同様に許されま
す。以下参照: `special-filenames`。

手短にいうと、*Note binary:: や *Note matrix:: はそのデータが特別な形であることを、
*Note index:: は多重データ集合ファイルからどのデータ集合を選んで描画するかを、
*Note every:: は各データ集合からどのデータ行 (部分集合) を選んで描画するかを、
*Note using:: は各データ行からどのように列を選ぶかを指定します。

*Note index:: と *Note every:: オプションは *Note plot:: の場合と同じよ
*うに振舞います。Note using:: も、*Note using:: のリストが 2 つでなく
*3 つ必要であるということを除いては同様です。

*Note thru:: や *Note smooth:: といった *Note plot:: のオプションは
`splot` では利用できません。しかし、*Note cntrparam:: や *Note
dgrid3d:: が、制限されてはいますが平滑化のために用意されています。

データファイルの形式は、各点が (x,y,z) の 3 つ組である以外は、本質的に
*Note plot:: と同じです。もし一つの値だけが与えられれば、それは z とし
て使われ、データブロック番号が y として、そして x はそのデータブロック
内での番号が使われます。もし 2 つ、あるいは 4 つの値が与えられれば、
`gnuplot` はその最後の値を pm3d plot での色の計算に使います。3 つの値は
(x,y,z) の組と見なされます。他に値があれば、それは一般に誤差と見なされ
ます。それは `fit`で使うことが可能です。

`splot` のデータファイルでは、1 行の空行はデータブロックの分離子です。
`splot` は個々のデータブロックを、関数の y-孤立線と同じものとして扱いま
す。1 行の空行で分離されている点同士は線分で結ばれることはありません。
全てのデータブロックが全く同じ点の数を持つ場合、`gnuplot` はデータブロッ
クを横断し、対応する点同士を結ぶ孤立線を描きます。これは "grid data" と
呼ばれ、曲面の描画、等高線の描画 (`set contour`)、隠線処理(*Note
hidden3d::) では、この形のデータであることが必要となります。以下も参照:
`splot grid_data`。

3 列の `splot` データにおいては、媒介変数モード (*Note parametric::) を
指定することはもはや不要です。

* Menu:

* matrix::
* データファイルの例::



File: gnuplot.info, Node: matrix, Next: データファイルの例, Prev: データファイル_(datafile), Up: データファイル_(datafile)

matrix
......

gnuplot は、matrix (配列) 形式のデータを、2 つの異なる形式で解釈するこ
とができます。その 1 つは、x, y の座標が一様であると仮定して、その値を
この一様な格子の matrix のそれぞれの要素に割り当てる方法です。これは、
ASCII データに対してはデフォルトですが、バイナリデータに対してはそうで
はありません。一様な matrix データを描画するコマンドの例:
          splot 'file' matrix using 1:2:3          # ASCII データ
          splot 'file' binary general using 1:2:3  # バイナリデータ


一様な格子の matrix データでは、各ブロックの z の値は一行で一度に読まれ
ます。すなわち、
         z11 z12 z13 z14 ...
         z21 z22 z23 z24 ...
         z31 z32 z33 z34 ...

等。

ASCII 入力では、空行やコメント行は配列データを終了させ、新たな曲面の網
(mesh) を開始します。いつものことですが、`splot` コマンド の *Note
index::オプションを使ってファイル内の網を自由に選択できます。

2 つ目の形式は、非一様な格子で、x, y 座標は明示していると仮定するもので、
入力データの最初の行を y 座標、最初の列を x 座標とみなします。バイナリ
データに対しては、1 行目の最初の要素は、データ列数でなければいけません
(ASCII データではその数は無視されます)。座標とデータ値は、バイナリデー
タでは単精度浮動小数値とみなされます。非一様な matrix データを描画する
コマンドの例:
          splot 'file' nonuniform matrix using 1:2:3  # ASCII データ
          splot 'file' binary matrix using 1:2:3      # バイナリデータ


よって、非一様な matrix データの構造は以下のようになります:

           <N+1>  <y0>   <y1>   <y2>  ...  <yN>
            <x0> <z0,0> <z0,1> <z0,2> ... <z0,N>
            <x1> <z1,0> <z1,1> <z1,2> ... <z1,N>
             :      :      :      :   ...    :


これらは以下のような 3 つの数字の組に変換されます:

           <x0> <y0> <z0,0>
           <x0> <y1> <z0,1>
           <x0> <y2> <z0,2>
            :    :     :
           <x0> <yN> <z0,N>


           <x1> <y0> <z1,0>
           <x1> <y1> <z1,1>
            :    :     :


そして、これらの 3 つの数字の組は `gnuplot` の孤立線に変換され、その後
`gnuplot` が通常の方法で描画の残りを行います。

行列やベクトルの操作のサブルーチン (C による) が `binary.c` に用意され
ています。バイナリデータを書くルーチンは

           int fwrite_matrix(file,m,nrl,nrl,ncl,nch,row_title,column_title)


です。これらのサブルーチンを使う例が `bf_test.c` として用意されていて、
これはデモファイル `demo/binary.dem` 用に複数のバイナリファイルを生成し
ます。

*Note plot:: での使用法:
         plot `a.dat` matrix
         plot `a.dat` matrix using 1:3
         plot 'a.gpbin' {matrix} binary using 1:3

これらは配列の行を描画し、using 2:3 とすれば配列の列を描画、using 1:2は、
点の座標を描画します (多分無意味です)。オプション *Note every:: を適用
することで明示的に行や列を指定できます。

例 -- ASCII データファイルの配列の軸の拡大:
         splot `a.dat` matrix using (1+$1):(1+$2*10):3


例 -- ASCII データファイルの配列の第 3 行の描画:
         plot 'a.dat' matrix using 1:3 every 1:999:1:2

(行は 0 から数えられるので、3 ではなくて 2 を指定します)。

Gnuplot は、*Note array::, *Note record::, *Note format::, *Note
filetype:: などの general バイナリ形式を特定するようなキーワードをつけ
ずにオプション *Note binary:: を使うことで、matrix バイナリファイルを読
み込むことができます。その他の変換用の general バイナリキーワードは、
matrix バイナリファイルにも適用できるでしょう。(詳細は、以下参照:
*Note general::。)



File: gnuplot.info, Node: データファイルの例, Prev: matrix, Up: データファイル_(datafile)

データファイルの例
..................

以下は3 次元データファイルの描画の単純な一つの例です。

           splot 'datafile.dat'


ここで、"datafile.dat" は以下を含むとします:

           # The valley of the Gnu.
              0 0 10
              0 1 10
              0 2 10


              1 0 10
              1 1 5
              1 2 10


              2 0 10
              2 1 1
              2 2 10


              3 0 10
              3 1 0
              3 2 10


この "datafile.dat" は 4*3 の格子 (それぞれ 3 点からなるブロックの4 つ
の行) を定義することに注意して下さい。行 (データブロック) は 1 行の空行
で区切られます。

x の値はそれぞれのデータブロックの中で定数になっていることに注意して下
さい。もし y を定数の値とし、隠線処理が有効な状態で描画すると、その曲面
は裏返しで書かれることになります。

格子状データ (grid data) に対して、個々のデータブロック内で x の値を定
数としておく必要はありませんし、同じ場所の y の値を同じ値に揃えておく必
要もありません。`gnuplot` は個々のデータブロック内の点の数が等しいとい
うことを必要としているだけです。しかし、等高線を導くのに用いられる曲面
の網目は、対応する点を列的に選んで結ぶため、不揃いの格子データに対する
曲面の描画への影響は予想できません。それはケースバイケースの原理でテス
トすべきでしょう。



File: gnuplot.info, Node: 格子状データ_(grid_data), Next: splot_の曲面_(splot_surfaces), Prev: データファイル_(datafile), Up: splot

格子状データ (grid data)
------------------------


3 次元描画のためのルーチンは、個々の網目の格子においては一つの標本点と
一つのデータ点がある、という形の格子状データ用に設計されています。各デー
タ点は、関数の値を評価すること (以下参照: *Note isosamples::)、またはデー
タファイルを読み込むこと (以下参照: *Note datafile::) によって生成され
ます。"孤立線" という言葉は関数に対しても、データに対してもその網目の線
を表すものとして用いられます。網目は、必ずしも x, y に関する長方形でな
くてもよく、u,v で媒介変数表示されても構わないことに注意して下さい。以
下参照: *Note isosamples::。

しかし、`gnuplot` はそのような形式を必ずしも必要とはしません。例えば関
数の場合は、*Note samples:: は *Note isosamples:: と違っていても構いま
せん。すなわち、x-孤立線のうち、1 本の y-孤立線と交わないものがいくつか
あることがあります。データファイルの場合は、個々のデータブロックのばら
ついた点の個数が全て同じであれば、"孤立線は" はデータブロックの点を結び、
横断孤立線" は各データブロックの対応する点同士を結び、"曲面" を作ろうと
します。どちらの場合でも、等高線、および隠線処理モードは点が意図した
フォーマットであった場合とは違った描画を与えることになります。ばらつき
のあるデータは *Note dgrid3d:: によって{異なる}格子状データに変換するこ
とができます。

等高線に関するコードは、y-孤立線の点と、それに対応する隣の y-孤立線上の
点の間の線分に沿っての z の張力を計測します。よって、x-孤立線に、y-孤立
線との交点とはならないような標本点があるような曲面に対しては、`splot`
の等高線はそのような標本点を無視することになります。以下を試してみて下
さい:
            set xrange [-pi/2:pi/2]; set yrange [-pi/2:pi/2]
            set style function lp
            set contour
            set isosamples 10,10; set samples 10,10;
            splot cos(x)*cos(y)
            set samples 4,10; replot
            set samples 10,4; replot





File: gnuplot.info, Node: splot_の曲面_(splot_surfaces), Prev: 格子状データ_(grid_data), Up: splot

splot の曲面 (splot surfaces)
-----------------------------

`splot` は点の集まりとして、あるいは、それらの点を結ぶことによって曲面
を表示することができます。*Note plot:: と同様に、点はデータファイルから
読むこともできますし、指定された区間で関数の値を評価して得ることもでき
ます。以下参照: *Note isosamples::。曲面は、各点を線分で結ぶことで近似
的に作られます。以下参照: *Note surface::。そしてその場合曲面は、*Note
hidden3d::で不透明にもできます。3 次元曲面を眺める向きは、*Note view::
で変更できます。

さらに、格子状のデータ点に対しては、`splot` は同じ高さを持つ点を補間す
ることができ (以下参照: `set contour`)、そしてそれらを結んで等高線を描
くことができます。さらに、その結び方には真直な線分や滑らかな線を使うこ
とができます (以下参照: *Note cntrparam::)。関数は、常に *Note
isosamples::と *Note samples:: で決定される格子状データとして評価されま
す。一方、ファイルのデータは、`data-file` に書かれているような格子状デー
タフォーマットにするか、あるいは格子データを生成する (以下参照: *Note
dgrid3d::)ということをしなければそうはなりません。

等高線は曲面の上に表示することもできますし、底面に射影することもできま
す。底面への射影は、ファイルに書き出すこともでき、そしてそれを *Note
plot::で再び読み込んで *Note plot:: のより強い整形能力を生かすこともで
きます。



File: gnuplot.info, Node: stats_(簡単な統計情報), Next: system_, Prev: splot, Up: コマンド_(Commands)

stats (簡単な統計情報)
======================



書式:
          stats 'filename' [using N[:M]] [name 'prefix'] [[no]output]]

このコマンドは、ファイルの 1 列、または 2 列のデータの簡単な統計情報を
提供します。using 指定子は、plot コマンドと同じ形で解釈されますが、
*Note index::, *Note every::, *Note using:: 指定に関する詳細については
以下参照: *Note plot::。データ点は、その解析の前に xrange, yrange に従っ
てフィルタにかけられます。以下参照: *Note xrange::。その情報はデフォル
トではスクリーンに出力されますが、コマンド *Note print:: を先に使うこと
で出力をファイルにリダイレクトしたり、オプション `nooutput` を使うこと
で出力しないようにすることもできます。

画面出力に加え、gnuplot は個々の統計情報を 3 つの変数グループに保存しま
す。1 番目の変数グループは、どんなデータが並んでいるかを示します:
          STATS_records           # 範囲内のデータ行の総数
          STATS_outofrange        # 範囲外として除かれた行数
          STATS_invalid           # 無効/不完全/欠損データ行の総数
          STATS_blank             # 空行の総数
          STATS_blocks            # ファイル内の index データブロック数


2 番目の変数グループは、1 つの列の、範囲内のデータの性質を示します。対
応する軸 (1 つ目の列には x 軸、追加の 2 つ目の列には y 軸) が自動縮尺の
場合は、範囲に制限はありません。2 つの列を 1 回の `stats` コマンドで解
析する場合は、各変数名には "_x", "_y" という接尾辞が追加されます。例え
ば STATS_mix_x は、1 つ目の列のデータの最小値で、STATS_min_y は 2 つ目
の列のデータの最小値を意味します。
          STATS_min               # 範囲内のデータ点の最小値
          STATS_max               # 範囲内のデータ点の最大値
          STATS_index_min         # data[i] == STATS_min となる添字 i
          STATS_index_max         # data[i] == STATS_max となる添字 i
          STATS_lo_quartile       # 第一 (下の) 四分位境界値
          STATS_median            # メジアン値 (第二四分位境界値)
          STATS_up_quartile       # 第三 (上の) 四分位境界値
          STATS_mean              # 範囲内のデータ点の平均値
          STATS_stddev            # 範囲内のデータ点の標準偏差
          STATS_sum               # 和
          STATS_sumsq             # 平方和


3 番目の変数グループは、2 つの列のデータの解析専用です。
          STATS_correlation       # x と y の相関係数
          STATS_slope             # 回帰直線 y = Ax + B の係数 A
          STATS_intercept         # 回帰直線 y = Ax + B の係数 B
          STATS_sumxy             # 積和 (x*y の和)
          STATS_pos_min_y         # y の最小値を与える x 座標
          STATS_pos_max_y         # y の最大値を与える x 座標


同時に 2 つ以上のファイルからの統計情報を使うことができれば便利でしょう
から、変数のデフォルトの接頭辞である "STATS" をオプション `name` でユー
ザが指定する文字列に置き換えることができるようになっています。例えば、
異なる 2 つのファイルのそれぞれの 2 列目のデータの平均値は以下のように
して比較できます:
          stats "file1.dat" using 2 name "A"
          stats "file2.dat" using 2 name "B"
          if (A_mean < B_mean) {...}


STATS_index_xxx で示される添字の値は、plot コマンドの第 0 疑似列 ($0)の
値に対応し、最初の点は添字は 0、最後の点の添字は N-1 となります。

メジアンと四分位境界値を探す際はデータの値をソートし、点の総数 N が奇数
の場合は、その (N+1)/2 番目の値をメジアン値とし、N が偶数の場合は、N/2
番目と (N+2)/2 番目の値の平均値をメジアン値とします。四分位境界値も同様
に処理します。

その後の描画に注釈をつけるためにコマンド `stats` を利用した例については、
以下を参照してください。stats.dem。
(http://www.gnuplot.info/demo/stats.html)

現在の実装では、X 軸と Y 軸の一方が対数軸の場合は解析できません。この制
限は今後のバージョンでは解消されるでしょう。




File: gnuplot.info, Node: system_, Next: test, Prev: stats_(簡単な統計情報), Up: コマンド_(Commands)

system
======



`system "command"` は、標準的なシェルを使って "command" を実行します。
以下参照: *Note shell::。関数として呼ばれた場合、`system("command")` は
結果として標準出力に流れる文字列を文字列値として返します。一つ追加され
る改行文字は無視されます。

これは、gnuplot スクリプト内に外部関数を取り込むのに使えます:

           f(x) = real(system(sprintf("somecommand %f", x)))




File: gnuplot.info, Node: test, Next: undefine, Prev: system_, Up: コマンド_(Commands)

test
====



このコマンドは、出力形式やパレットでどのような出力が行なえるかを画像で
テストし表示します。

書式:
           test {terminal | palette [rgb|rbg|grb|gbr|brg|bgr]}


*Note test:: または *Note terminal:: は、現在使用中の出力形式 (*Note
terminal::) で使える線の種類、点の種類、または有用なそして利用可能なそ
の他の描画を生成します。

*Note palette:: は、R(z),G(z),B(z) (0<=z<=1) の状態を描画します。これら
は現在のカラーパレット (*Note palette::) の RGB 成分を示します。また、
RGB を灰色階調に写像する NTSC 係数を用いて計算された視光度も描画します。
追加のパラメータは、r,g,b の文字の組合せで、それにより描画する順番が決
定されます。



File: gnuplot.info, Node: undefine, Next: unset, Prev: test, Up: コマンド_(Commands)

undefine
========



1 つ、または複数の定義済みのユーザ変数を削除します。これは、初期化テス
トを含むようなスクリプトの状態をリセットするのに便利でしょう。

変数名には、最後の文字としてワイルドカード文字 `*` を使うことができます。
ワイルドカード文字が見つかると、それより前の部分で始まるすべての変数を
削除します。これは、共通の接頭語を使っている複数の変数を削除するのに便
利でしょう。ただし、ワイルドカード文字は変数名の最後にしか使えないこと
に注意してください。*Note undefine:: にワイルドカード文字のみを引数とし
て与えた場合は何もしません。

例:

           undefine foo foo1 foo2
           if (!exists("foo")) load "initialize.gp"


           bar = 1; bar1 = 2; bar2 = 3
           undefine bar*                 # 3 つの変数を全部削除





File: gnuplot.info, Node: unset, Next: update, Prev: undefine, Up: コマンド_(Commands)

unset
=====




コマンド `set` で設定したオプションは、それに対応した *Note unset:: コ
マンドによってそのデフォルトの値に戻すことが可能です。*Note unset:: コ
マンドには繰り返し節も利用できます。以下参照: `iteration`。

例:
           set xtics mirror rotate by -45 0,10,100
           ...
           unset xtics


           # 番号 100 から 200 までのラベルを unset
           unset for [i=100:200] label i


* Menu:

* terminal_::



File: gnuplot.info, Node: terminal_, Prev: unset, Up: unset

terminal
--------

プログラムの最初に有効になるデフォルトの出力形式は、個々のシステム環境、
gnuplot のコンパイルオプション、および環境変数 GNUTERM に依存します。こ
のデフォルトが何であっても、gnuplot はそれを内部変数 GNUTERM に保存して
いますが、コマンド *Note terminal:: は、この初期値を復帰します。これは、
`set terminal GNUTERM` とすることと同じです。



File: gnuplot.info, Node: update, Next: While, Prev: unset, Up: コマンド_(Commands)

update
======



このコマンドは当てはめ (fit) のパラメータの現在の値を、初期値のファイル
の形式で (`fit` の項で説明されている)、与えられたファイルに書き出します。
これは、現在の値を、後で使うために、あるいは終了/中断した当てはめを再実
行するために保存しておくのに有用です。

書式:
           update <filename> {<filename>}


2 番目のファイル名を指定すると、元のパラメータファイルは変更せずに 2番
目のファイルの方に更新された値を書き出します。

そうでなければ、指定したファイルが存在すれば `gnuplot` はそのファイル名
に `.old` をつけてファイル名を変更し、指定したファイル名のファイルを新
たに開き直します。つまり、"`update 'fred'`" とすると、それは"`!rename
fred fred.old; update 'fred.old' 'fred'`" としたことと同じことになりま
す。["filename.ext" の 12 文字しか使えない MS-DOS や他のシステムでは、
ext" が "`old`" になって "filename" は最初のファイルに関係するもの (多
分どれかがすぐに分かるでしょう) が使われます。VMS では、ファイルのバー
ジョン管理システムが使われるため、名前の変更は行なわれません。]

より詳しい情報に関しては、以下参照: `fit`。



File: gnuplot.info, Node: While, Prev: update, Up: コマンド_(Commands)

While
=====


書式:
           while (<expr>) {
               <commands>
           }

これは、コマンドのブロックを、<expr> が 0 でない値と評価される間、繰り
返し実行します。このコマンドは、古い形式 (かっこなし) の if/else 構文と
一緒に使うことはできません。以下参照: `if`。



File: gnuplot.info, Node: 出力形式_(Terminal), Next: バグ_(Bugs), Prev: コマンド_(Commands), Up: Top

出力形式 (Terminal)
*******************


* Menu:

* 出力形式の一覧::



File: gnuplot.info, Node: 出力形式の一覧, Prev: 出力形式_(Terminal), Up: 出力形式_(Terminal)

出力形式の一覧
==============




gnuplot はとても多くの出力形式をサポートしています。これらは、適切な出
力形式を、必要なら機能を変更する追加オプションをつけて選択することによ
り設定されます。以下参照: *Note terminal::。

この文書は、あなたのシステム上で初期設定およびインストールがなされなかっ
たために利用できない出力形式についても記述されているかも知れません。イ
ンストールされた個々の gnuplot で、どの出力形式が有効なのかの一覧を見る
には、オプションを何もつけずに 'set terminal' と打ってください。

(訳注: この日本語訳に含まれる terminal のマニュアルは、その一覧にはな
い出力形式のものも含まれているかもしれませんし、逆にその一覧内の出力形
式でマニュアルがないものもあるかもしれません。)
@c <3 -- 全ての出力ドライバの項目は、.trm ファイルから引っ張って来られます。

* Menu:

* aed767::
* aifm::
* aqua::
* be::
* epscairo::
* canvas::
* cgi::
* cgm::
* context::
* corel::
* debug::
* svga::
* dumb::
* dxf::
* dxy800a::
* eepic::
* emf::
* emxvga::
* epson_180dpi::
* excl::
* fig::
* png_::
* ggi::
* gpic::
* grass::
* hp2623a::
* hp2648::
* hp500c::
* hpgl::
* hpljii::
* hppj::
* imagen::
* kyo::
* latex::
* linux::
* lua::
* macintosh::
* mf::
* mp::
* mif::
* next::
* Openstep_(next)::
* pbm::
* dospc::
* pdf::
* pstricks::
* qms::
* regis::
* sun::
* svg::
* tek410x::
* tek40::
* texdraw::
* tgif::
* tkcanvas::
* tpic::
* unixpc::
* vx384::
* vgagl::
* VWS::
* windows::
* wxt::
* x11::
* xlib::



File: gnuplot.info, Node: aed767, Next: aifm, Prev: 出力形式の一覧, Up: 出力形式の一覧

aed767
------





出力ドライバ `aed512` と `aed767` は AED グラフィック端末をサポートしま
す。この 2 つのドライバは、水平方向の範囲のみが違っていて、それぞれ512
ピクセルと 767 ピクセルです。垂直方向はいずれも 575 ピクセルです。これ
らのドライバにはオプションはありません。"



File: gnuplot.info, Node: aifm, Next: aqua, Prev: aed767, Up: 出力形式の一覧

aifm
----



`注意: 時代遅れの出力形式`、元々は Adobe Illustrator 3.0+ 用。Adobe
Illustrator はレベル 1 の PostScriptファイルを直接認識するので、これの
代わりに `set terminal post level1` 使うべきでしょう。

書式:
           set terminal aifm {color|monochrome} {"<fontname>"} {<fontsize>}





File: gnuplot.info, Node: aqua, Next: be, Prev: aifm, Up: 出力形式の一覧

aqua
----



この出力形式は Mac OS X 上の表示に関する AquaTerm.app に依存しています。

書式:
           set terminal aqua {<n>} {title "<wintitle>"} {size <x> <y>}
                             {font "<fontname>{,<fontsize>}"}
                             {{no}enhanced} {solid|dashed} {dl <dashlength>}}


<n> は描画するウィンドウの番号 (デフォルトでは 0) <wintitle> はタイトル
バーに表示される名前 (デフォルトは "Figure <n>"), <x> <y> は描画サイズ
(デフォルトは 846x594 pt = 11.75x8.25 インチ) です。

使用するフォントは <fontname> で指定し (デフォルトは "Times-Roman")、フォ
ントサイズは <fontsize> で指定します (デフォルトは 14.0 pt)。

aqua 出力形式は、拡張文字列処理モード (enhanced text mode; 以下参照:
`enhanced`) を、重ね書き以外はサポートしてます。フォントの使用はシステ
ムで有効なフォントに制限されています。文字エンコーディングは、*Note
encoding:: で選択できますが、現在は iso_latin_1, iso_latin_2, cp1250 と
UTF8 (default) をサポートしています。

曲線は、実線か点線 (デフォルトは実線) のいずれかで描画でき、点線の間隔
は倍率 <dashlength> (>0) で変更できます。




File: gnuplot.info, Node: be, Next: epscairo, Prev: aqua, Up: 出力形式の一覧

be
--



出力形式 `be` は、X サーバを利用する`beos` オペレーティングシステム上で
gnuplot をコンパイルする人のためのものです。環境変数 `DISPLAY` がセット
されているか、環境変数 `TERM` が `xterm` にセットされているか、またはコ
マンドラインオプションとして `-display` が使われていれば、プログラムの
起動時にこの出力形式が選択されます。

書式:
               set terminal be {reset} {<n>}


複数のグラフ描画ウィンドウをサポートしています。`set terminal be <n>`は
番号 n のウィンドウに出力します。n>0 の場合、その番号はウィンドウタイト
ルとアイコン名に `gplt <n>` として付けられます。現在のウィンドウはカー
ソル記号の変化で区別できます (デフォルトカーソルから十字カーソルへ)。

`gnuplot` ドライバが別な出力ドライバに変更されても、描画ウィンドウは開
いたままになります。描画ウィンドウは、そのウィンドウにカーソルを置いて
文字 q を押すか、ウィンドウマネージャのメニューの `close` を選択すれば
閉じることができます。*Note reset:: を実行すれば全てのウィンドウを一度
に閉じれます。それは実際にウィンドウを管理している子プロセスを終了しま
す (もし `-persist` が指定されていなければ)。

描画ウィンドウは `-persisit` オプションが与えられていなければ、対話の終
了時に自動的に閉じられます。

描画サイズとアスペクト比は、`gnuplot` のウィンドウをリサイズすることで
も変更できます。

線の幅と点のサイズは `gnuplot` の `set linestyle` で変更可能です。

出力ドライバ `be` に関しては、`gnuplot` は (起動時に)、コマンドライン、
または設定ファイルから、geometry や font, name などの通常の X Toolkitオ
プションやリソースの指定を受け付けます。それらのオプションについては
X(1) マニュアルページ (やそれと同等のもの) を参照してください。

他にも `be` 出力形式用の多くの `gnuplot` のオプションがあります。これら
は `gnuplot` を呼ぶときにコマンドラインオプションとして指定するか、また
は設定ファイル ".Xdefaults" のリソースとして指定できます。これらは起動
時に設定されるので、`gnuplot` 実行時には変更できません。

* Menu:

* コマンドラインオプション_(command-line_options)::
* 白黒オプション_(monochrome_options)::
* カラーリソース_(color_resources)::
* 灰色階調リソース_(grayscale_resources)::
* 線描画リソース_(line_resources)::



File: gnuplot.info, Node: コマンドラインオプション_(command-line_options), Next: 白黒オプション_(monochrome_options), Prev: be, Up: be

コマンドラインオプション (command-line_options)
...............................................

X Toolkit オプションに加え、以下のオプションが gnuplot の立ち上げ時のコ
マンドラインで、またはユーザのファイル ".Xdefaults" 内のリソースとして
指定できます:

      `-mono`    カラーディスプレイ上で強制的に白黒描画
      `-gray`    グレイスケールまたはカラーディスプレイ上でのグレイスケール描画
                 (デフォルトではグレイスケールディスプレイは白黒描画を受け付ける)
      `-clear`   新しい描画を表示する前に (瞬間的に) 画面を消去
      `-raise`   各描画後に描画ウィンドウを最前面へ出す
      `-noraise` 各描画後に描画ウィンドウを最前面へ出すことはしない
      `-persist` gnuplot プログラム終了後も描画ウィンドウを残す


上記のオプション、はコマンドライン上での指定書式で、".Xdefaults" にリソー
スとして指定するときは異なる書式を使います。

例:
               gnuplot*gray: on


`gnuplot` は描画スタイル `points` で描画する点のサイズの制御にも、コマ
ンドラインオプション (`-pointsize <v>`) とリソース
(`gnuplot*pointsize: <v>`)を提供しています。値 `v` は点のサイズの拡大率
として使われる実数値(0 < v <= 10) で、例えば `-pointsize 2` はデフォル
トのサイズの 2 倍、`-pointsize 0.5` は普通のサイズの半分の点が使われま
す。



File: gnuplot.info, Node: 白黒オプション_(monochrome_options), Next: カラーリソース_(color_resources), Prev: コマンドラインオプション_(command-line_options), Up: be

白黒オプション (monochrome_options)
...................................

白黒ディスプレイに対しては `gnuplot` は描画色 (foreground) も背景色
(background) も与えません。デフォルトでは背景は白、描画は黒です。
`-rv`や `gnuplot*reverseVideo: on` の場合には背景が黒で描画は白になりま
す。




File: gnuplot.info, Node: カラーリソース_(color_resources), Next: 灰色階調リソース_(grayscale_resources), Prev: 白黒オプション_(monochrome_options), Up: be

カラーリソース (color_resources)
................................

カラーディスプレイに対しては、`gnuplot` は以下のリソース (ここではその
デフォルトの値を示します)、または白黒階調 (greyscale) のリソースを参照
します。リソースの値はシステム上の BE rgb.txt ファイルに書かれている色
名、または 16 進の色指定 (BE のマニュアルを参照) か、色名と強度 (0 から
1 の間の値) をコンマで区切った値を使用できます。例えば `blue, 0.5`は半
分の強度の青、を意味します。

      gnuplot*background:  white
      gnuplot*textColor:   black
      gnuplot*borderColor: black
      gnuplot*axisColor:   black
      gnuplot*line1Color:  red
      gnuplot*line2Color:  green
      gnuplot*line3Color:  blue
      gnuplot*line4Color:  magenta
      gnuplot*line5Color:  cyan
      gnuplot*line6Color:  sienna
      gnuplot*line7Color:  orange
      gnuplot*line8Color:  coral



これらに関するコマンドラインの書式は、例えば以下の通りです。

例:
               gnuplot -background coral





File: gnuplot.info, Node: 灰色階調リソース_(grayscale_resources), Next: 線描画リソース_(line_resources), Prev: カラーリソース_(color_resources), Up: be

灰色階調リソース (grayscale_resources)
......................................

`-gray` を選択すると、`gnuplot` は、グレイスケールまたはカラーディスプ
レイに対して、以下のリソースを参照します (ここではそのデフォルトの値を
示します)。デフォルトの背景色は黒であることに注意してください。

      gnuplot*background: black
      gnuplot*textGray:   white
      gnuplot*borderGray: gray50
      gnuplot*axisGray:   gray50
      gnuplot*line1Gray:  gray100
      gnuplot*line2Gray:  gray60
      gnuplot*line3Gray:  gray80
      gnuplot*line4Gray:  gray40
      gnuplot*line5Gray:  gray90
      gnuplot*line6Gray:  gray50
      gnuplot*line7Gray:  gray70
      gnuplot*line8Gray:  gray30






File: gnuplot.info, Node: 線描画リソース_(line_resources), Prev: 灰色階調リソース_(grayscale_resources), Up: be

線描画リソース (line_resources)
...............................

`gnuplot` は描画の線の幅 (ピクセル単位) の設定のために以下のリソースを
参照します (ここではそのデフォルトの値を示します)。0 または 1 は最小の
線幅の 1 ピクセル幅を意味します。2 または 3 の値によってグラフの外観を
改善できる場合もあるでしょう。

      gnuplot*borderWidth: 2
      gnuplot*axisWidth:   0
      gnuplot*line1Width:  0
      gnuplot*line2Width:  0
      gnuplot*line3Width:  0
      gnuplot*line4Width:  0
      gnuplot*line5Width:  0
      gnuplot*line6Width:  0
      gnuplot*line7Width:  0
      gnuplot*line8Width:  0



`gnuplot` は線描画で使用する点線の形式の設定用に以下のリソースを参照し
ます。0 は実線を意味します。2 桁の 10 進数 `jk` (`j` と `k` は 1 から9
までの値) は、`j` 個のピクセルの描画に `k` 個の空白のピクセルが続くパター
ンの繰り返しからなる点線を意味します。例えば '16' は 1 個のピクセルの後
に 6 つの空白が続くパターンの点線になります。さらに、4 桁の 10進数でよ
り詳細なピクセルと空白の列のパターンを指定できます。例えば、'4441' は
4 つのピクセル、4 つの空白、4 つのピクセル、1 つの空白のパターンを意味
します。以下のデフォルトのリソース値は、白黒ディスプレイ、あるいはカラー
や白黒階調 (grayscale) ディスプレイ上の白黒描画における値です。カラーディ
スプレイではそれらのデフォルトの値はほとんど 0 (実線)で、`axisDashes`
のみがデフォルトで '16' の点線となっています。

      gnuplot*borderDashes:   0
      gnuplot*axisDashes:        16
      gnuplot*line1Dashes:        0
      gnuplot*line2Dashes:   42
      gnuplot*line3Dashes:   13
      gnuplot*line4Dashes:   44
      gnuplot*line5Dashes:   15
      gnuplot*line6Dashes: 4441
      gnuplot*line7Dashes:   42
      gnuplot*line8Dashes:   13





File: gnuplot.info, Node: epscairo, Next: canvas, Prev: be, Up: 出力形式の一覧

epscairo
--------



出力形式 `epscairo` は、cairo, pango ライブラリを用いて EPS 出力
(Encapsulated PostScript) を生成します。cairo は version 1.6 以降が必要
です。

詳細は、`pdfcairo` 出力形式のヘルプを参照してください。"




File: gnuplot.info, Node: canvas, Next: cgi, Prev: epscairo, Up: 出力形式の一覧

canvas
------


出力形式 `canvas` は、HTML5 の canvas 要素上に描画する javascript コマ
ンドの集合を生成します。書式:
           set terminal canvas {size <xsize>, <ysize>} {background <rgb_color>}
                               {font {<fontname>}{,<fontsize>}} | {fsize <fontsize>}","                           {{no}enhanced} {linewidth <lw>}
                               {rounded | butt}
                               {solid | dashed {dashlength <dl>}}
                               {standalone {mousing} | name '<funcname>'}
                               {jsdir 'URL/for/javascripts'}
                               {title '<some string>'}


<xsize> と <ysize> は描画領域のピクセル単位でのサイズを設定します。
standalone モードでのデフォルトのサイズは、600x400 ピクセルです。デフォ
ルトのフォントサイズは 10 です。

注: ファイル canvastext.js で提供している Hershey simplex Roman フォン
トのアスキー部分のフォント一つだけが利用できます。これは、ファイル
canvasmath.js で置き換えることもでき、そこには UTF-8 エンコードされた
Hershey simplex Greek と math symbols も含まれています。他の出力形式に
合わせて、`font "name,size"` の形式も使えるようになっています。今のとこ
ろ `name` のフォント名部分は無視されますが、そのうちにブラウザが名前付
きフォントをサポートしだすでしょう。

デフォルトの `standalone` モードは、HTML 5 の canvas 要素を使用してグラ
フを描画するような javascript コードを含む HTML ページを生成します。そ
の HTML ページは、2 つの必要な javascript ファイル
'canvastext.js'、'gnuplot_common.js' にリンクします。点線をサポートする
ためにはさらに追加ファイル 'gnuplot_dashedlines.js' が必要です。デフォ
ルトではそれらはローカルファイルへのリンクで、Unix 互換のシステムでは通
常はそれらディレクトリ /usr/local/share/gnuplot/<version>/js にあります。
他の環境については、インストールに関する注意を参照してください。この設
定は、オプション `jsdir` に別のローカルディレクトリ、あるいは一般的な
URL を指定することで変更できます。グラフをリモートクライアントのマシン
で見れるようにする場合は、通常は後者の設定が適切でしょう。

canvas 出力形式で生成される描画はすべてマウス操作可能です。キーワード
`mousing` を追加すると、`standalone` モードのグラフの下にマウストラッキ
ングボックスをつけます。これは、`canvastext.js` が置かれているのと同じ
ローカルディレクトリ、または URL 内の、'gnuplot_mouse.js' という
javascript ファイルへのリンクと 'gnuplot_mouse.css' というマウスボック
スに関するスタイルシートも追加します。

オプション `name` は、javascript のみを含むファイルを一つ生成します。そ
れが含む javascript 関数と、それが描画する canvas 要素の id の両方は、
以下の文字列パラメータから取られます。例えば以下のコマンド
           set term canvas name 'fishplot'
           set output 'fishplot.js'

は、javascript 関数 fishplot() を含むファイルを生成し、その関数はグラフ
を id=fishplot の canvas 上に描画します。この javascript 関数を呼び出す
HTML ページは、上で説明した canvastext.js も読み込まなければいけません。
上のように生成した、この fishplot を取りこむ最小の HTML ファイルは以下
のようになります:

           <html>
           <head>
               <script src="canvastext.js"></script>
               <script src="gnuplot_common.js"></script>
           </head>
           <body onload="fishplot();">
               <script src="fishplot.js"></script>
               <canvas id="fishplot" width=600 height=400>
                   <div id="err_msg">No support for HTML 5 canvas element</div>
               </canvas>
           </body>
           </html>


このキャンバス上に描かれるそれぞれのグラフの名前は、fishplot_plot_1,
fishplot_plot_2 等となります。外部の javascript ルーチンでそれらを参照
することもできます。例: gnuplot.toggle_visibility("fishplot_plot_2")




File: gnuplot.info, Node: cgi, Next: cgm, Prev: canvas, Up: 出力形式の一覧

cgi
---





`cgi` と `hcgi` 出力ドライバは SCO CGI ドライバをサポートします。
`hcgi`はプリンタ用で、環境変数 CGIPRNT が設定されている必要があります。
`cgi`はディスプレイ、またはハードコピーに使えます: 環境変数 CGIDISP を
まずチェックし、次に CGIPRNT を調べます。これらの出力ドライバにはオプショ
ンはありません。"



File: gnuplot.info, Node: cgm, Next: context, Prev: cgi, Up: 出力形式の一覧

cgm
---



`cgm` ドライバは CGM 出力 (Computer Graphics Metafile Version 1) を生成
します。このファイルフォーマットは ANSI 規格書 X3.122-1986 "Computer
Graphics - Metafile for the Storage and Transfer of Picture
Description Information" で定義されているものの一部分です。

書式:
           set terminal cgm {color | monochrome} {solid | dashed} {{no}rotate}
                            {<mode>} {width <plot_width>} {linewidth <line_width>}
                            {font "<fontname>,<fontsize>"}
                            {background <rgb_color>}
       [deprecated]         {<color0> <color1> <color2> ...}


`solid` は全ての曲線を実線で描き、どんな点線パターンも塗りつぶします;
<mode> は `landscape`, `portrait`, `default` のいずれか; <plot_width>
はポイント単位でのグラフの仮定されている幅; <line_width> はポイント単位
での線幅 (デフォルトは 1); <fontname> はフォントの名前 (以下のフォント
一覧参照); そして<fontsize> はポイント単位でのフォントのサイズ (デフォ
ルトは 12) です。

最初の 6 つのオプションはどの順番で指定しても構いません。`default` を選
択すると、全てのオプションをそのデフォルトの値にします。

線の色を `set term` コマンドで設定する仕組みは、今は非推奨です。代わり
に、背景色は分離されたキーワード background で、線の色は `set
linetype`で設定すべきでしょう。この非推奨の仕組みでは色は 'xrrggbb' の
形式で受けつけますが、x は文字 'x' そのもの、'rrggbb' は 16 進数での赤、
緑、青の成分です。最初の色を背景色として使い、その後に続く色指定を順次
線の色ととして割り当てていました。

例:
           set terminal cgm landscape color rotate dashed width 432 \\
                          linewidth 1  'Helvetica Bold' 12       # デフォルト
           set terminal cgm linewidth 2  14  # やや広い線とやや大きいフォント
           set terminal cgm portrait "Times Italic" 12
           set terminal cgm color solid    # 面倒な点線など消えてしまえ !


* Menu:

* CGM_のフォント_(font)::
* CGM_のフォントサイズ_(fontsize)::
* cgm_linewidth::
* cgm_rotate::
* cgm_solid::
* CGM_のサイズ_(size)::
* cgm_width::
* cgm_nofontlist::



File: gnuplot.info, Node: CGM_のフォント_(font), Next: CGM_のフォントサイズ_(fontsize), Prev: cgm, Up: cgm

CGM のフォント (font)
.....................

CGM (Computer Graphics Metafile) ファイルの最初の部分、メタファイルの記
述部分には、フォントリスト (font table) が含まれています。画像の本体部
では、フォントはこのリストにある番号で指定されます。デフォルトではこの
ドライバは以下の 35 個のフォントリストを生成し、さらにこのリストの
`Helvetica`, `Times`, `Courier` の各フォントの `italic` を `oblique`で
置き換えたもの、およびその逆による 6 つの追加のフォントが含まれます
(Microsoft Office と Corel Draw CGM の import フィルタは `italic` と
`oblique` を同じものとして扱うからです)。

           Helvetica
           Helvetica Bold
           Helvetica Oblique
           Helvetica Bold Oblique
           Times Roman
           Times Bold
           Times Italic
           Times Bold Italic
           Courier
           Courier Bold
           Courier Oblique
           Courier Bold Oblique
           Symbol
           Hershey/Cartographic_Roman
           Hershey/Cartographic_Greek
           Hershey/Simplex_Roman
           Hershey/Simplex_Greek
           Hershey/Simplex_Script
           Hershey/Complex_Roman
           Hershey/Complex_Greek
           Hershey/Complex_Script
           Hershey/Complex_Italic
           Hershey/Complex_Cyrillic
           Hershey/Duplex_Roman
           Hershey/Triplex_Roman
           Hershey/Triplex_Italic
           Hershey/Gothic_German
           Hershey/Gothic_English
           Hershey/Gothic_Italian
           Hershey/Symbol_Set_1
           Hershey/Symbol_Set_2
           Hershey/Symbol_Math
           ZapfDingbats
           Script
           15


これらのフォントの最初の 13 個は WebCGM で要求されているものです。
Microsoft Office の CGM import フィルタはその 13 個の標準フォント
と'ZapfDingbats' と 'Script' をサポートしています。しかし、そのスクリプ
ト (script) フォントは '15' という名前でしかアクセスできません。
Microsoft の import フィルタの font の置き換えに関するより詳しい情報に
ついては、
       C:\\Program Files\\Microsoft Office\\Office\\Cgmimp32.hlp

のヘルプファイル、または
       C:\\Program Files\\Common Files\\Microsoft Shared\\Grphflt\\Cgmimp32.cfg

の設定ファイルなどをチェックしてください。

`set term` コマンドでデフォルトのフォントリストにないフォント名を指定す
ることも可能です。その場合、その指定したフォントが最初に現われる新しい
フォントリストが作られます。そのフォント名に関して、スペル、単語の先頭
の大文字化やどこにスペースが入るかなどが、作られる CGM ファイルを読むア
プリケーションにとって適切なものであるかをちゃんと確認する必要がありま
す。(gnuplot と任意の MIL-D-28003A 準拠アプリケーションは、フォント名の
大文字小文字の違いは無視します。) 新しいフォントをいくつも追加したい場
合は、`set term` コマンドを繰り返し使用してください。

例:
           set terminal cgm 'Old English'
           set terminal cgm 'Tengwar'
           set terminal cgm 'Arabic'
           set output 'myfile.cgm'
           plot ...
           set output


`set label` コマンドでは新しいフォントを導入することはできません。



File: gnuplot.info, Node: CGM_のフォントサイズ_(fontsize), Next: cgm_linewidth, Prev: CGM_のフォント_(font), Up: cgm

CGM のフォントサイズ (fontsize)
...............................

フォントは、ページが 6 インチの幅であると仮定して伸縮されます。*Note
size::コマンドでページの縦横比が変更されていたり、CGM ファイルが異なる
幅に変換されている場合、結果としてフォントのサイズも拡大されたり縮小さ
れたりすることになります。仮定されている幅を変更するには、`width` オプ
ションを使用してください。



File: gnuplot.info, Node: cgm_linewidth, Next: cgm_rotate, Prev: CGM_のフォントサイズ_(fontsize), Up: cgm

cgm linewidth
.............

`linewidth` オプションは線の幅をポイント単位 (pt) で設定します。デフォ
ルトの幅は 1 pt です。`fontsize` や `width` オプションのところで説明さ
れているように、ページの実際の幅によってその縮尺は影響を受けます。



File: gnuplot.info, Node: cgm_rotate, Next: cgm_solid, Prev: cgm_linewidth, Up: cgm

cgm rotate
..........

`norotate` オプションはテキストの回転をしないようにします。例えば Word
for Windows 6.0c 用の CGM 入力フィルタは回転された文字列を受け付けます
が、Word に付属する DRAW エディタはそれを受け付けることができず、グラフ
を編集すると (例えば曲線に見出しをつける)、全ての回転された文字列は水平
方向になって保存されてしまい、Y 軸の見出しはクリップされる境界線を越え
てしまうでしょう。`norotate` オプションを使えば、見栄えの良くない場所か
ら Y 軸の見出しが始まってしまいますが、編集によってダメージを受けること
はなくなります。`rotate` オプションはデフォルトの挙動を保証します。



File: gnuplot.info, Node: cgm_solid, Next: CGM_のサイズ_(size), Prev: cgm_rotate, Up: cgm

cgm solid
.........

`solid` オプションは描画の点線の線描画スタイルを無効するのに使います。
これは、カラーが有効である場合、また点線にすることでグラフが見にくくな
る場合に有用でしょう。`dashed` オプションはデフォルトの挙動を保証し、こ
の場合個々の線種に異なる点線のパターンが与えられます。



File: gnuplot.info, Node: CGM_のサイズ_(size), Next: cgm_width, Prev: cgm_solid, Up: cgm

CGM のサイズ (size)
...................

CGM グラフのデフォルトのサイズは、横置き (landscape) では幅 32599, 縦
23457、縦置き (portrait) では幅 23457, 縦 32599 です。



File: gnuplot.info, Node: cgm_width, Next: cgm_nofontlist, Prev: CGM_のサイズ_(size), Up: cgm

cgm width
.........

CGM ファイルの全ての長さは抽象的な単位を持ち、そのファイルを読むアプリ
ケーションが最終的なグラフのサイズを決定します。デフォルトでは最終的な
グラフの幅は 6 インチ (15.24 cm) であると仮定されています。この幅は正し
いフォントサイズを計算するのに使われ、`width` オプションで変更できます。
キーワード `width` の後に幅をポイント単位で指定します。(ここで、ポイン
トは PostScript と同様 1/72 インチを意味します。この単位は TeX では
big point" と呼ばれています。) 他の単位から変換するには、gnuplot の数式
が使えます。

例:
           set terminal cgm width 432            # デフォルト
           set terminal cgm width 6*72           # 上と同じ値
           set terminal cgm width 10/2.54*72     # 10 cm の幅




File: gnuplot.info, Node: cgm_nofontlist, Prev: cgm_width, Up: cgm

cgm nofontlist
..............

デフォルトのフォントリスト (font table) は WebCGM で勧告されているフォ
ントを含んでいて、これは Microsoft Office と Corel Draw の CGM
(Computer Graphics Metafile) 入力フィルタに適合しています。他のアプリケー
ションは異なるフォント、あるいは異なるフォント名を使用するかも知れませ
んが、それはマニュアルには書かれていないかも知れません。オプション
`nofontlist` (`winword6` も同じ意味) を使用すると CGM ファイルからフォ
ントリストを削除します。この場合、読み込んだアプリケーションはデフォル
トのフォントリストを使用するでしょう。gnuplot はその場合でもフォント番
号の選択のために自分のデフォルトのフォントリストを使用します。よっ
て、'Helvetica' が 1 番になり、それがあなたの使用するアプリケーションの
デフォルトフォントリストの最初のものになります。'Helvetica Bold' がその
フォントリストの 2 番目のフォントに対応し、他も同様となります。




File: gnuplot.info, Node: context, Next: corel, Prev: cgm, Up: 出力形式の一覧

context
-------



ConTeXt は (絵の描画のために) Metapost と高度に融合し、高品質な PDF 文
書を生成するための TeX のマクロパッケージです。この出力形式は、Metafun
ソースを生成しますが、これは手動で編集でき、外部からほとんどのことをあ
なたが設定できます。

ConTeXt + gnuplot モジュールの平均的なユーザには、このページを読むより
も、`Using ConTeXt` を参照するか、ConTeXt の gnuplot モジュールのマニュ
アルを参照することを推奨します。

出力形式 `context` は、以下のオプションをサポートしています:

書式:
          set term context {default}
                  {defaultsize | size <scale> | size <xsize>{in|cm}, <ysize>{in|cm}}
                  {input | standalone}
                  {timestamp | notimestamp}
                  {noheader | header "<header>"}
                  {color | colour | monochrome}
                  {rounded | mitered | beveled} {round | butt | squared}
                  {dashed | solid} {dashlength | dl <dl>}
                  {linewidth | lw <lw>}
                  {fontscale <fontscale>}
                  {mppoints | texpoints}
                  {inlineimages | externalimages}
                  {defaultfont | font "{<fontname>}{,<fontsize>}"}


standalone でないグラフ (`input`) では、オプションはグラフサイズを選択
する *Note size::、すべてのラベルを倍率 <fontscale> で伸縮する
`fontscasle`、および font サイズのみ意味を持ち、他のオプションは警告な
く無視されるのみで、それらはそのグラフィックを読み込む .tex ファイルの
方で設定してください。元の文書のフォントが 12pt ではない場合は、適切な
フォントサイズを指定することを強く推奨します。それにより、gnuplot がラ
ベル用にどれくらいの大きさのスペースを確保すればいいかを知ることができ
まず。

`default` は、すべてのオプションをデフォルトの値にリセットします。

`defaultsize` は、描画サイズを 5in x 3in に設定します。*Note size::
<scale> は、描画サイズをデフォルトサイズの <scale> 倍にしますが引数を
',' 区切りで 2 つ与えた場合は、最初のものは横のサイズを、2 つ目のものは
垂直サイズを設定します。それらのサイズには、単位としてインチ('in'), セ
ンチ ('cm') が使えますが、省略した場合はデフォルト値に対する比であると
みなします。

`input` (デフォルト) は、他の ConTeXt 文書から取り込めるグラフを生成し
ます。`standalone` は、それに数行追加し、それ自身がそのままコンパイルで
きるようにします。その場合、`header` オプションが必要になるかもしれませ
ん。

standalone のグラフに設定/定義/マクロを追加したい場合は `header` を使用
してください。デフォルトは `noheader` です。

`notimestamp` は、コメント部分の日時の出力を抑制します (バージョン管理
システムを使っている場合、日付だけ違うものを新しいバージョンとして登録
したくはないでしょう)。

`color` (デフォルト) は、カラー描画を生成しますが、`monochrome` は一切
special を入れません。白黒プリンタ用には、その挙動をこんな風に変えた方
がもっと良くなるというアイデアを持っている人は、是非提案してください。

`rounded` (デフォルト) と `mitered`, `beveled` は、線分の接合部の形状を
制御し、`round` (default) と `butt`, `squared` は、線分の端の形状を制御
します。詳細は、PostScript か PDF のリファレンスマニュアルを参照してく
ださい。激しく変化する関数と太い線用には、線分の接合部での尖った角を避
けるように`rounded` と `round` を使うといいでしょう。(これに関する一般
的な仕組みは、このオプションを各描画スタイル毎に別々に指定できるよう
gnuplot がサポートすべきだと思います。)

`dashed` (デフォルト) は、異なる線種に異なる点線パターンを使い、
`solid`は、すべての描画に実線を使用します。

`dashlength` (または `dl`) は、点線の線分の長さを <dl> 倍します。
`linewidth` (または `lw`) は、すべての線幅を <lw> 倍します。(lw 1 は
0.5bp を意味し、これは Metapost の描画のデフォルトの線幅です)
`fontscale` は、テキストラベルをデフォルトの文書フォントの <fontscale>
倍に拡大します。

`mppoints` は、Metapost で描画された定義済みの点の形状を使用します。
`texpoints` は、簡単に設定できる記号セットを使用します。これは、以下の
ようにして ConTeXt で定義できます:
          \\defineconversion[my own points][+,{\\ss x},\\mathematics{\\circ}]
          \\setupGNUPLOTterminal[context][points=tex,pointset=my own points]


`inlineimages` は、バイナリ画像を文字列として書き出しますが、これは
ConTeXt MKIV のみで機能します。`externalimages` は、PNG ファイルを外部
出力し、これは ConTeXt MKII で機能します。これが動作するためには、
gnuplot が PNG 画像出力をサポートしている必要があります。

standalone のグラフでは、`font` でフォント名とサイズを設定できます。
standalone でないモード (`input`) では、テキストラベルに十分なスペース
を割り当てるためにフォントサイズのみが意味を持ちますコマンド
          set term context font "myfont,ss,10"

は、以下のようになります:
          \\setupbodyfont[myfont,ss,10pt]

例えばさらに追加で `fontscale` を 0.8 に設定すると、結果としてフォント
は 8pt の大きさになり、
          set label ... font "myfont,12"

は 9.6pt になります。

適当なタイプスクリプトフォント (とヘッダー) を用意するのは自分で行って
さもなくばフォントの切り替えは効果を持ちません。ConTeXt MKII (pdfTeX)の
標準フォントは、以下のようにして使えます:
          set terminal context standalone header '\\usetypescript[iwona][ec]' \\
              font "iwona,ss,11"

フォントの利用に関する ConTeXt の最新の情報については、ConTeXt の文書、
wiki、メーリングリスト (アーカイブ) を探してみてください。

例:
          set terminal context size 10cm, 5cm     # 10cm, 5cm
          set terminal context size 4in, 3in      # 4in, 3in

UTF-8 エンコードラベルを standalone (ページ全体) グラフで使用するには:
          set terminal context standalone header '\\enableregime[utf-8]'

, /* TODO: LaTeX formatting */

* Menu:

* Requirements::
* Calling_gnuplot_from_ConTeXt::



File: gnuplot.info, Node: Requirements, Next: Calling_gnuplot_from_ConTeXt, Prev: context, Up: context

Requirements
............

ConTeXt 用の gnuplot モジュール: http://ctan.org/pkg/context-gnuplot
(http://ctan.org/pkg/context-gnuplot)と、最新の ConTeXt が必要です。そ
こから gnuplot を呼び出すには、write18 を可能にする必要があります。ほと
んどの TeX 配付物では、これは texmf.cnf で shell_escape=t とすることで
設定できます。

この出力形式とより詳しいヘルプと例に関しては以下も参照してください:
http://wiki.contextgarden.net/Gnuplot
(http://wiki.contextgarden.net/Gnuplot)




File: gnuplot.info, Node: Calling_gnuplot_from_ConTeXt, Prev: Requirements, Up: context

Calling gnuplot from ConTeXt
............................

ConTeXt 文書でグラフを作成する最も簡単な方法は以下の通り:
          \\usemodule[gnuplot]
          \\starttext
          \\title{How to draw nice plots with {\\sc gnuplot}?}
          \\startGNUPLOTscript[sin]
          set format y "%.1f"
          plot sin(x) t '$\\sin(x)$'
          \\stopGNUPLOTscript
          \\useGNUPLOTgraphic[sin]
          \\stoptext

これは自動的に gnuplot を実行し、その結果の画像を文書中に取り込みます。




File: gnuplot.info, Node: corel, Next: debug, Prev: context, Up: 出力形式の一覧

corel
-----



`corel` 出力形式は CorelDraw 用の出力です。

書式:
           set terminal corel {  default
                               | {monochrome | color
                                    {"<font>" {<fontsize> 
                                       {<xsize> <ysize> {<linewidth> }}}}}


ここで、フォントサイズ (`fontsize`) と線幅 (`linewidth`) はポイント単位、
横幅 (`xsize`) と縦幅 (`ysize`) はインチ単位です。デフォルトの値はそれ
ぞれ、monochrome, "SwitzerlandLight", 22, 8.2, 10, 1.2 です。"



File: gnuplot.info, Node: debug, Next: svga, Prev: corel, Up: 出力形式の一覧

debug
-----



このドライバは `gnuplot` のデバッグのために提供されているものです。おそ
らくソースコードを修正するユーザのみが使用するものでしょう。"



File: gnuplot.info, Node: svga, Next: dumb, Prev: debug, Up: 出力形式の一覧

svga
----



`svga` ドライバは SVGA グラフィックの PC をサポートします。これはDJGPP
でコンパイルされた場合のみ使うことができます。オプションはフォントに関
するもののみです。

書式:
           set terminal svga {"<fontname>"}"




File: gnuplot.info, Node: dumb, Next: dxf, Prev: svga, Up: 出力形式の一覧

dumb
----



ダム端末 (`dumb`) ドライバは、ASCII 文字を使用してテキスト領域に描画し
ます。サイズの指定と改行制御用のオプションがあります。

書式:
           set terminal dumb {size <xchars>,<ychars>} {[no]feed}
                             {[no]enhanced}


<xchars>, <ychars> はテキスト領域のサイズを設定し、デフォルトは 79 x
24となっています。最後の改行は、`feed` オプションが設定されている場合の
み出力されます。

例:
           set term dumb size 60,15
           plot [-5:6.5] sin(x) with impulse


                1 +-------------------------------------------------+
              0.8 +|||++                   ++||||++   sin(x) +----+ |
              0.6 +|||||+                 ++|||||||+                |
              0.4 +||||||+               ++|||||||||+               |
              0.2 +|||||||+             ++|||||||||||+             +|
                0 ++++++++++++++++++++++++++++++++++++++++++++++++++|
             -0.2 +        +|||||||||||+              +|||||||||||+ |
             -0.4 +         +|||||||||+                +|||||||||+  |
             -0.6 +          +|||||||+                  +|||||||+   |
             -0.8 +   +       ++||||+   +       +        ++||||+  + |
               -1 +---+--------+--------+-------+--------+--------+-+
                     -4       -2        0       2        4        6  "




File: gnuplot.info, Node: dxf, Next: dxy800a, Prev: dumb, Up: 出力形式の一覧

dxf
---



`dxf` ドライバは、AutoCad (リリース 10.x) に取り込むことができる画像を
生成します。このドライバ自身にはオプションはありませんが、描画に関する
いくつかの特徴は他の方法で変更できます。デフォルトの大きさは AutoCadの
単位での 120x80 で、これは *Note size:: で変更できます。`dxf` は 7 色
(白、赤、黄、緑、水色、青、赤紫) を使いますが、これを変更するにはドライ
バソースファイルを修正する必要があります。白黒の出力装置を使う場合、そ
れらの色は線の太さの違いで表現されます。詳細は AutoCad の印刷/プロッタ
出力コマンドに関する記述を参照してください。"



File: gnuplot.info, Node: dxy800a, Next: eepic, Prev: dxf, Up: 出力形式の一覧

dxy800a
-------



このドライバは Roland DXY800A プロッタをサポートします。オプションはあ
りません。"



File: gnuplot.info, Node: eepic, Next: emf, Prev: dxy800a, Up: 出力形式の一覧

eepic
-----



`eepic` ドライバは LaTeX picture 環境を拡張するものをサポートします。こ
れは `latex` ドライバに代わる別な選択肢です。

このドライバによる出力は、LaTeX 用の "eepic.sty" マクロパッケージと共に
使われることを仮定しています。それを使うには、"eepic.sty" と"epic.sty"、
および "tpic" \\special 命令群をサポートするプリンタドライバが必要です。
もし、あなたの使うプリンタドライバがそれらの "tpic" \\special 命令をサ
ポートしていない場合でも、"eepicemu.sty" を使うことでそれらのうちのいく
つかを使えるようになります。dvips と dvipdfm は "tpic" \\special をサポー
トしています。

書式:
        set terminal eepic {default} {color|dashed} {rotate} {size XX,YY}
                           {small|tiny|<fontsize>}


オプション:オプションは任意の順番で与えることができます。'color' は
gnuplot に \\color{...} コマンドを生成させ、それによりグラフをカラーに
します。このオプションを使用する場合は、latex 文書のプリアンブルに
usepackage{color} を入れる必要があります。'dashed' は線種に点線を使用す
ることを許可します。このオプションを指定しないと、色々な太さの実線のみ
が使われます。'dashed' と 'color' は一方のみが意味を持ち、'color' が指
定された場合、'dashed' は無視されます。'rotate' は本当に回転 (90 度) さ
れた文字列を使用するようになります。指定しない場合は、1 文字 1 文字、上
に積み上げていく方法で回転された文字列を作ります。このオプションを使う
場合は、\\usepackage{graphicx} をプリアンブルに入れる必要がありま
す。'small' は point スタイルでのグラフ描画の印として \\scriptsize の記
号を使用します (多分これは TeX ではだめで、LaTeX2e でしか使えないでしょ
う)。デフォルトでは標準の数式のサイズを使用します。'tiny' は、それに
scriptscriptstyle の記号を使用します。'default' は全てのオプションをデ
フォルトの値にリセットします。デフォルトは、color はなし、dashed line
はなし、疑似回転 (積み上げ) 文字列の使用、大きなサイズの記号の使用、で
す。<fontsize> は picture 環境内でのフォントサイズを指定する数字です。
単位は pt (ポイント) で、10 pt はほぼ 3.5 mm です。フォントサイズを指定
しない場合、全てのグラフ内の文字は \\footnotesize に設定されます。

注意:文字 # (およびその他 (La)TeX で特別な意味を持つその他の文字) を
(バックスラッシュ 2 つ) でエスケープすることを忘れないでください。グラ
フの角が近すぎると点線は実線のようになります。(これが tpic specialsの一
般的な問題なのか、eepic.sty や dvips/dvipdfm のバグが原因なのかは私には
わかりません。)デフォルトの eepic グラフの大きさは 5x3 インチで、これは
teminal オプションの *Note size:: で変更可能です。数ある中で、点
(point) は、LaTeX のコマンド "\\Diamond", "\\Box" などを使って描かれま
す。これらのコマンドは現在は LaTeX2e のコアには存在せずlatexsym パッケー
ジに含まれていますが、このパッケージ基本配布の一部であり、よって多くの
LaTeX のシステムの一部になっています。このパッケージを使うことを忘れな
いでください。latexsym の代わりに amssymb パッケージを使うことも可能で
す。LaTeX に関する全てのドライバは文字列の配置の制御に特別な方法を提供
します: '{' で始まる文字列は、'}' で閉じる必要がありますが、その文字列
全体が水平方向にも垂直方向にもセンタリングされます。'[' で始まる文字列
の場合は、位置の指定をする文字列 (t,b,l,r のうち 2 つまで) が続き、次
に']{'、文字列本体、で最後に '}' としますが、この文字列は LaTeX が
LR-boxとして整形します。'\\rule{}{}' を使えばさらに良い位置合わせが可能
でしょう。

例: set term eepic
       は、グラフを picture 環境に含まれた eepic マクロとして出力します。
       そのファイルを LaTeX 文書に \\input で取り込んでください。

set term eepic color tiny rotate 8
       eepic マクロを \\color マクロ、point 印は \\scripscriptsize の大きさ、
       本当に回転された文字の使用、および全ての文字を 8pt にセットして出力
       します。


見出しの位置合わせに関して: gnuplot のデフォルト (大抵それなりになるが、
そうでないこともある):
            set title '\\LaTeX\\ -- $ \\gamma $'

水平方向にも垂直方向にもセンタリング:
            set label '{\\LaTeX\\ -- $ \\gamma $}' at 0,0

位置を明示的に指定 (上に合わせる):
            set xlabel '[t]{\\LaTeX\\ -- $ \\gamma $}'

他の見出し -- 目盛りの長い見出しに対する見積り:
            set ylabel '[r]{\\LaTeX\\ -- $ \\gamma $\\rule{7mm}{0pt}}'"




File: gnuplot.info, Node: emf, Next: emxvga, Prev: eepic, Up: 出力形式の一覧

emf
---



`emf` ドライバは EMF (Enhanced Metafile Format) ファイルを生成します。
この形式のファイルは多くの MS-Windows アプリケーションで認識できます。

書式:
           set terminal emf {color | monochrome} {solid | dashed}
                            {enhanced {noproportional}}
                            {rounded | butt}
                            {linewidth <LW>} {dashlength <DL>}
                            {size XX,YY} {background <rgb_color>}
                            {font "<fontname>{,<fontsize>}"}
                            {fontscale <scale>}


`monochorome` モードは折れ線を点線のパターンを循環させて打ち出します。
`color` モードは折れ線をいくつかの色で打ち出し、すべての 8 つのデフォル
ト色を使いつくした後にのみ点線パターンを変化させます。`solid` は全ての
線を実線で書き、点線のパターンは塗りつぶします。`linewidth <factor>` は
全ての線幅をここで指定する値倍にします。`dashlength <factor>` は、太い
線には便利でしょう。`<fontname>` はフォント名、`<fontsize>` はポイント
単位でのフォントの大きさです。

出力画像の形式的な (名ばかりの) サイズは、デフォルトでは適当な単位での
1024x768 になっています。オプション *Note size:: を使って別な形式的なサ
イズを指定できます。

拡張文字列処理モード (enhanced text mode) は、プロポーショナル文字間隔
を近似しようとします。モノスペースフォントを使う場合、あるいはこの近似
を好まない場合、オプション `noproportional` を使うことでこの補正をオフ
にできます。

デフォルトの設定は、`color solid font "Arial,12" size 1024,768` で、
`default` を選択すると全てのオプションがそのデフォルトの値になります。

例:
           set terminal emf 'Times Roman Italic, 12'
           set terminal emf dashed    # こうしないと線分はすべて実線です。"




File: gnuplot.info, Node: emxvga, Next: epson_180dpi, Prev: emf, Up: 出力形式の一覧

emxvga
------







`emxvga`, `emxvesa`, `vgal` の各ドライバはそれぞれ SVGA, vesa SVGA,
VGA グラッフィックボードの PC をサポートします。これらは DOS、または
OS/2 上で、"emx-gcc" でコンパイルされたることを意図しています。これらに
はさらに VESA パッケージと SVGAKIT が必要です。これらは Johannes
Martin (JMARTIN@GOOFY.ZDV.UNI-MAINZ.DE) が保守し David J. Liu
(liu@phri.nyu.edu) が拡張しているライブラリです。

書式:
           set terminal emxvga
           set terminal emxvesa {vesa-mode}
           set terminal vgal


唯一のオプションは `emxvesa` に対する vesa のモードで、デフォルトではそ
れは G640x480x256 となっています。"



File: gnuplot.info, Node: epson_180dpi, Next: excl, Prev: emxvga, Up: 出力形式の一覧

epson_180dpi
------------












このドライバはエプソンプリンタのいくつかとそれに類似するものをサポート
します。

`epson_180dpi` と `epson_60dpi` はそれぞれ 180dpi (ドット/インチ),
60dpi の解像度の Epson LQ 型 24 ピンプリンタ用のドライバです。

`epson_lx800` は Epson LX-800, Star の NL-10 や NX-1000, PROPRINTER な
どの適当なプリンタに流用できる、一般的な 9 ピンプリンタドライバです。

`nec_cp6` は NEC CP6 や Epson LQ-800 などのプリンタで使える、一般的な
24 ピンプリンタ用のドライバです。

`okidata` ドライバは 9 ピンの OKIDATA 320/321 標準プリンタをサポートし
ます。

`starc` ドライバは Star カラープリンタ用です。

`tandy_60dpi` ドライバは 9 ピン 60dpi の Tandy DMP-130 シリーズ用です。

`dpu414` ドライバは Seiko DPU-414 感熱プリンタ用です。

`nec_cp6` にはオプションがあります:

書式:
           set terminal nec_cp6 {monochrome | colour | draft}


デフォルトでは白黒 (monochrome) です。

`dpu414` にはオプションがあります:

書式:
           set terminal dpu414 {small | medium | large} {normal | draft}


デフォルトは medium (= フォントサイズ) で normal です。おすすめの組み合
わせは、`medium normal` か `small draft` です。

これらのドライバのそれぞれで PC 上で印刷する場合はバイナリコピーが必要
です。*Note print:: を使ってはいけません。その代わりに `copy file /b
lpt1:`としてください。




File: gnuplot.info, Node: excl, Next: fig, Prev: epson_180dpi, Up: 出力形式の一覧

excl
----



`excl` ドライバは EXCL レーザープリンターや 1590 のような Talaris プリ
ンタをサポートします。オプションはありません。"



File: gnuplot.info, Node: fig, Next: png_, Prev: excl, Up: 出力形式の一覧

fig
---



`fig` ドライバは Fig グラフィック言語での出力を生成します。

書式:
           set terminal fig {monochrome | color}
                            {landscape | portrait}
                            {small | big | size <xsize> <ysize>}
                            {metric | inches}
                            {pointsmax <max_points>}
                            {solid | dashed}
                            {font "<fontname>{,<fontsize>}"}
                            {textnormal | {textspecial texthidden textrigid}}
                            {{thickness|linewidth} <units>}
                            {depth <layer>}
                            {version <number>}


`monochrome` と `color` は 画像を白黒にするか `color` にするかを決定し
ます。`small` と `big` は、デフォルトの `landscape` モードではグラフを
5x3 インチにするか 8x5 インチにするか、`portrait` モードでは 3x5 インチ
にするか 5x8 インチにするかを決定します。*Note size:: は描画範囲を
<xsize>*<ysize> に設定 (変更) します。この場合の単位は、`inches` か
`metric` かの設定によってそれぞれインチかセンチメートルかになります。こ
の設定は "xfig" での編集に対するデフォルトの単位としても使われます。

`pointsmax <max_points>` は折れ線の最大点数を設定します。

`solid` は、実線 (solid) の linestyle が全部使われてしまった後で自動的
に使われる点線の使用を抑制し、別な形で表示します。

`font` は、テキストフォントフェース名を <fontname> に、フォントサイズを
<fontsize> ポイントに設定します。`textnormal` はテキストフラグの設定を
リセットして postscript フォントを選択し、`textspecial` はテキストフラ
グを LaTeX special に設定し、`texthidden`, `textrigid` はそれぞれ無表示
のテキスト、スケーリングされないテキスト用のフラグを設定します。

`depth` は全ての線と文字列に対する、重なりに関するデフォルトの深さ
(depth layer) を設定します。デフォルトの深さは 10 で、"xfig" でグラフの
上に何かを上書きするための余地を残しています。

*Note version:: は生成される fig 出力の書式バージョンを設定します。現在
は、バージョン 3.1 と 3.2 のみがサポートされています。

`thickness` はデフォルトの線の太さを設定し、指定されなければ 1 になりま
す。太さの変更は、*Note plot:: コマンドの `linetype` の値に 100 倍の数
を加えることで実現できます。同様に、(デフォルトの深さに対する) 各描画要
素の深さの値は <linetype> に 1000 倍の数を加えることで制御できます。よっ
てその深さは <layer>+<linetype>/1000 になり、線の太さは
(<linetype>%1000) /100 となりますが、その値が 0 の場合はデフォルトの線
の太さになります。`linewidth` は `thickness` と同義です。

*Note plot:: コマンドの `point` スタイルによる描画の際の記号を `fig` ド
ライバで追加することもできます。記号の指定は (`pointtype` の値) % 100
の50 以上の値が使われ、その塗りつぶしの濃さは <pointtype> % 5 の値で制
御し、その輪郭は黒 (<pointtype> % 10 < 5 の場合) または現在の色で書かれ
ます。利用可能な記号は以下の通りです。
             50 - 59:  円
             60 - 69:  正方形
             70 - 79:  ひし形
             80 - 89:  上向きの三角形
             90 - 99:  下向きの三角形

これらの記号の大きさはフォントの大きさと関係しています。デフォルトでは
記号の深さは、良いエラーバーを実現するために、線の深さより 1 だけ小さい
値になっています。<pointtype> が 1000 より大きい場合、深さは <layer>
+<pointtype>/1000-1 になります。<pointtype>%1000 が 100 より大きい場合
塗りつぶし色は (<pointtype>%1000)/100-1 になります。

有効な塗りつぶし色 (1 から 9) は、黒、青、緑、水色、赤、紫、黄、白、暗
い青 (白黒モードでは 1 から 6 までは黒で 7 から 9 までは白) です。

<linetype> と <pointtype> の詳細については、以下参照: *Note with::。

`big` オプションは以前のバージョンの `bfig` ドライバの代用品ですが、こ
のドライバは今はもうサポートされていません。

例:
           set terminal fig monochrome small pointsmax 1000  # デフォルト


           plot 'file.dat' with points linetype 102 pointtype 759

は、黄色で塗りつぶされた円を生成し、それら輪郭は幅 1 の青い線です。

           plot 'file.dat' using 1:2:3 with err linetype 1 pointtype 554

は黒い線によるエラーバーと赤で塗りつぶされた円を生成します。この円は線
よりも 1 層だけ上になります (デフォルトでは深さは 9)。

円の上にエラーバーを書くには以下のようにしてください。
           plot 'file.dat' using 1:2:3 with err linetype 1 pointtype 2554"




File: gnuplot.info, Node: png_, Next: ggi, Prev: fig, Up: 出力形式の一覧

png
---



書式:
           set terminal png 
                  {{no}enhanced}
                  {{no}transparent} {{no}interlace}
                  {{no}truecolor} {rounded|butt}
                  {linewidth <lw>} {dashlength <dl>}
                  {tiny | small | medium | large | giant}
                  {font "<face> {,<pointsize>}"} {fontscale <scale>}
                  {size <x>,<y>} {{no}crop}
                  {background <rgb_color>}


PNG, JPEG, GIF 画像は、外部ライブラリ libgd を使って生成されます。PNGの
描画は、ImageMagick パッケージのソフト 'display' にその出力を以下のよう
にパイプで渡すことで対話的に表示させることができます:
                    set term png
                    set output '| display png:-'

次の描画コマンドからの出力は、display ウィンドウ上で対話的に <space>を
打つことで見ることができます。現在の描画をファイルに保存するには、
display ウィンドウで左クリックし、*Note save:: を選択してください。

`transparent` は、ドライバに背景色の透明化 (transparent) を行うよう指示
します。デフォルトは `notransparent` です。

`interlace` は、ドライバにインターレース GIF を生成するよう指示します。
デフォルトは `nointerlace` です。

オプション `linewidth` と `dashlength` は拡大率で、描画されるすべての線
に影響を与えます。すなわち、これらは様々な描画コマンドで要求される値に
掛算されます。

デフォルトでは、出力される PNG 画像は 256 個に番号付けられた色を使用し
ます。代わりにオプション `truecolor` を使えば、24 ビット/ピクセルの色情
報を持つ TrueColor 画像が生成されます。透明化塗りつぶし (transparent
fill) を使用するときは、このオプション `truecolor` が必要になります。以
下参照: `fillstyle`。背景の透明化は、番号付け画像か TrueColor 画像で可
能です。

`butt` は線分の描画で、その端の点でのはみだしを起こさない描画メソッドを
使うようドライバに指示します。この設定は、線幅が 1 より大きい場合にのみ
有効です。この設定は、水平線、垂直線の描画の場合に有用でしょう。デフォ
ルトは `rounded` (丸め) です。

フォントの選択の詳細は、やや複雑です。以下に同じ意味を持つ簡単な例を示
します:
          set term png font arial 11
          set term png font "arial,11"

より詳しい情報については、`fonts` の下の該当するセクションを参照してく
ださい。

出力描画サイズ <x,y> はピクセル単位で与えます。デフォルトは 640x480 で
す。以下も参照: `canvas`, *Note size::。描画終了後の端の余白は、オプショ
ン `crop` で取り除くことができ、その結果としてその画像サイズは小さくな
ります。デフォルトは `nocrop` です。


* Menu:

* 例::



File: gnuplot.info, Node: 例, Prev: png_, Up: png_

例
..

           set terminal png medium size 640,480 background '#ffffff'


この例は medium サイズの、大きさ変更不能で回転できない組み込みフォント
を使用し、透明化されない背景色として白 (16 進数の 24bit RGB) を使用しま
す。

           set terminal png font arial 14 size 800,600


これは、'arial' というフェース名のスケーラブルフォントを検索し、フォン
トサイズを 14pt に設定します。フォントの検索がどのように行われるかにつ
いては以下参照: `fonts`。

           set terminal png transparent truecolor enhanced


これは、24 ビット/ピクセルの色情報を使用し、背景を透明化します。そして
表示される文字列の配置制御として `enhanced text` モードを使用します。




File: gnuplot.info, Node: ggi, Next: gpic, Prev: png_, Up: 出力形式の一覧

ggi
---



`ggi` ドライバは X や svgalib のような異なるターゲット上で動作します。

書式:
        set terminal ggi [acceleration <integer>] [[mode] {mode}]


X では、ウィンドウマネージャの機能を使ってウィンドウのサイズを変更する
ことはできませんが、モードを mode オプションを使って、例えば以下のよう
に変更することができます:
      - V1024x768
      - V800x600
      - V640x480
      - V320x200

他のモードについては、ggi (libggi) のドキュメントを参照してください。キー
ワード `mode` は追加してもしなくても結構です。libggi のマニュアルページ
で紹介されているように、環境変数でターゲットを選択することをお勧めしま
す。X 上で DGA を使うなら、例えば以下のようにしてください。
        bash> export GGI_DISPLAY=DGA
        csh>  setenv GGI_DISPLAY DGA


`acceleration` は、相対的なポインタ動作イベントを発生するターゲット(例
えば DGA) でのみ使用され、正の整数で相対的な距離に対する倍率 (積因子)
を表します。デフォルトの acceleration は 7 です。

例:
        set term ggi acc 10
        set term ggi acc 1 mode V1024x768
        set term ggi V1024x768"




File: gnuplot.info, Node: gpic, Next: grass, Prev: ggi, Up: 出力形式の一覧

gpic
----



`gpic` ドライバは FSF (the Free Software Foundations) の "groff" パッケー
ジの中の GPIC 形式のグラフを生成します。デフォルトの大きさは 5 x 3イン
チです。オプションは原点に関するもののみで、デフォルトでは (0,0)です。

書式:
           set terminal gpic {<x> <y>}


ここで `x` と `y` の単位はインチです。

単純なグラフを整形するには以下のようにします。

           groff -p -mpic -Tps file.pic > file.ps


pic からの出力はパイプで eqn に渡すこともできるので、'set label' と
`set {x/y}label` コマンドでグラフに複雑な関数の式を入れることも可能です。
例えば、

           set ylab '@space 0 int from 0 to x alpha ( t ) roman d t@'


とすれば、以下のコマンドによって y 軸に綺麗な積分が見出し付けされます。

           gpic filename.pic | geqn -d@@ -Tps | groff -m[macro-package] -Tps
               > filename.ps


このようにして作られた図は文書に綺麗に当てはまるように伸縮することがで
きます。pic 言語は簡単に理解できるので、必要なら容易にグラフを直接編集
できます。`gnuplot` で作られる pic ファイルの全ての座標は x+gnuplotx,
y+gnuploty の形で与えられます。デフォルトでは x, y の値は 0 です。いく
つかのファイルに対してその x,y を 0 と設定している行を削除すれば、以下
のようにして複数のグラフを一つの図の中に入れてしまうこともできます (デ
フォルトの大きさは 5.0x3.0 インチ):

           .PS 8.0
           x=0;y=3
           copy "figa.pic"
           x=5;y=3
           copy "figb.pic"
           x=0;y=0
           copy "figc.pic"
           x=5;y=0
           copy "figd.pic"
           .PE


これは、横に 2 つ、縦に 2 つずつ並んだ 4 つのグラフからなる、8 インチの
広さの図を生成します。

以下のコマンドでも同じことができます。

           set terminal gpic x y


これを例えば以下のように使います。

           .PS 6.0
           copy "trig.pic"
           .PE"




File: gnuplot.info, Node: grass, Next: hp2623a, Prev: gpic, Up: 出力形式の一覧

grass
-----



`grass` ドライバは GRASS 地理情報システムのユーザが `gnuplot` を利用す
ることを可能にします。詳しい情報については
grassp-list@moon.cecer.army.milに連絡を取ってください。ページは GRASS
グラフウィンドウの現在のフレームに書かれます。オプションはありません。




File: gnuplot.info, Node: hp2623a, Next: hp2648, Prev: grass, Up: 出力形式の一覧

hp2623a
-------



`hp2623a` ドライバはヒューレットパッカード (Hewlett Packard) HP2623Aを
サポートします。オプションはありません。"



File: gnuplot.info, Node: hp2648, Next: hp500c, Prev: hp2623a, Up: 出力形式の一覧

hp2648
------



`hp2648` ドライバはヒューレットパッカード (Hewlett Packard) HP2647 と
HP2648 をサポートします。オプションはありません。"



File: gnuplot.info, Node: hp500c, Next: hpgl, Prev: hp2648, Up: 出力形式の一覧

hp500c
------



`hp500c` ドライバはヒューレットパッカード (Hewlett Packard) 社の HP
DeskJet 500c をサポートします。これには解像度と圧縮に関するオプションが
あります。

書式:
           set terminal hp500c {<res>} {<comp>}


ここで `res` は 75, 100, 150, 300 のいずれかの解像度 (DPI; dots per
inch) で、`comp` は "rle" か "tiff" です。他の設定をするとそれはデフォ
ルトの値になります。デフォルトは 75 dpi で圧縮はなしです。高解像度での
ラスタライズはたくさんのメモリを必要とします。"



File: gnuplot.info, Node: hpgl, Next: hpljii, Prev: hp500c, Up: 出力形式の一覧

hpgl
----





`hpgl` ドライバは HP7475A プロッタのような装置用の HPGL 出力を行ないま
す。これは 2 つの設定可能なオプションを持ちます: それはペンの数と
`eject`オプションで、"eject" は描画後にプロッタにページを排出させるよう
指示しデフォルトでは 6 つのペンを使い、描画後のページの排出は行ないませ
ん。

国際的文字セット ISO-8859-1 と CP850 を `set encoding iso_8859_1` や
`set encoding cp850` で認識させることができます (詳細は、以下参照:
*Note encoding::)。

書式:
           set terminal hpgl {<number_of_pens>} {eject}


以下の設定

           set terminal hpgl 8 eject


は、以前の `hp7550` ドライバと同等で、設定

           set terminal hpgl 4


は、以前の `hp7580b` ドライバと同等です。

`pcl5` ドライバは、Hewlett-Packard Designjet 750C、Hewlett-Packard
Laserjet III, Hewlett-Packard Laserjet IV のようなプロッタをサポートし
ます。これは実際には HPGL-2 を使用しているのですが、装置間で名前の衝突
があります。このドライバにはいくつかのオプションがありますが、それらは
以下に示した順序で指定しなければいけません:

書式:
           set terminal pcl5 {mode <mode>} {<plotsize>}
               {{color {<number_of_pens>}} | monochrome} {solid | dashed}
               {font <font>} {size <fontsize>} {pspoints | nopspoints}


<mode> は `landscape` か `portrait` です。<plotsize> はグラフの物理的な
描画サイズで、それは以下のうちのいずれかです: `letter` は標準の(8 1/2"
X 11") 出力、`legal` は (8 1/2" X 14") 出力、`noextended` は(36" X
48") 出力 (letter サイズ比)、`extended` は (36" X 55") 出力(ほぼ legal
サイズ比)。`color` は複数のペン (すなわちカラー) 描画用で
<number_of_pens> はカラー出力で使用されるペンの本数 (すなわち色数) です。
`monochrome` は 1 本のペン (例えば黒) の描画です。`solid` は全ての線を
実線で描き、`dashed` は異なる点線や鎖線パターンで線を描き分けます。
<font> は `stick`, `univers`, `cg_times`, `zapf_dingbats`,
`antique_olive`, `arial`, `courier`, `garamond_antigua`,
`letter_gothic`, `cg_omega`, `albertus`, `times_new_roman`,
`clarendon`, `coronet`, `marigold`, `truetype_symbols`, `wingdings` の
いずれかです。<fontsize> はポイント単位でのフォントの大きさです。点の種
類 (point type) は、`nopspoints` を指定することで標準的なデフォルトの設
定から選択できるようになりますが、`pspoints` を指定すると postscript
terminal と同じ点の種類の設定から選択できるようになります。

これらのオプションのいくつかの組み込まれたサポートは、プリンタに依存す
ることに注意してください。例えば全てのフォントは恐らく HP Laserjet IVで
はサポートされているでしょうが、HP Laserjet III と Designjet 750C では
2,3 (例えば univers, stick) がサポートされているのみでしょう。また、
laserjet は白黒の出力装置なので、それらではカラーも明らかに使えません。

デフォルト: landscape, noextended, color (6 pens), solid, univers, 12
                 point, nopspoints


`pcl5` では国際的文字セットはプリンタで扱われますので、テキスト文字列に
適切な 8-bit 文字コードを入れるだけで、わざわざ *Note encoding:: で邪魔
をする必要はありません。

HPGL グラフィックは多くのソフトウェアパッケージで取り込むことが可能です。




File: gnuplot.info, Node: hpljii, Next: hppj, Prev: hpgl, Up: 出力形式の一覧

hpljii
------





`hpljii` ドライバは HP Laserjet Sries II プリンタを、`hpdj` ドライバは
HP DeskJet 500 プリンタをサポートします。これらのドライバでは、解像度の
選択が可能です。

書式:
           set terminal hpljii | hpdj {<res>}


ここで `res` は 75, 100, 150, 300 のいずれかの解像度 (DPI; dots per
inch) で、デフォルトは 75 です。高解像度でのラスタライズはたくさんのメ
モリを必要とします。

`hp500c` ドライバは `hpdj` とほぼ同じですが、`hp500c` は加えてカラーと
圧縮もサポートしています。"



File: gnuplot.info, Node: hppj, Next: imagen, Prev: hpljii, Up: 出力形式の一覧

hppj
----



`hppj` ドライバは HP PaintJet と HP3630 プリンタをサポートします。オプ
ションはフォントを選択するものがあるのみです。

書式:
           set terminal hppj {FNT5X9 | FNT9X17 | FNT13X25}


中間サイズフォント (FNT9X17) がデフォルトです。"



File: gnuplot.info, Node: imagen, Next: kyo, Prev: hppj, Up: 出力形式の一覧

imagen
------



`imagen` ドライバは Imagen レーザプリンタをサポートします。これは 1 ペー
ジに複数のグラフを配置することも可能です。

書式:
           set terminal imagen {<fontsize>} {portrait | landscape}
                               {[<horiz>,<vert>]}


`fontsize` はデフォルトでは 12 ポイントで、レイアウトのデフォルトは
`landscape` です。`<horiz>` と `<vert>` はグラフを横方向と縦方向に何列
置くかを指定します。これらのデフォルトは 1 です。

例:
           set terminal imagen portrait [2,3]


これは、1 ページに 6 つのグラフを横に 2 列、縦に 3 列、縦置き
(portrait)で配置します。"



File: gnuplot.info, Node: kyo, Next: latex, Prev: imagen, Up: 出力形式の一覧

kyo
---





`kyo` と `prescribe` のドライバは Kyocera (京セラ) レーザープリンタをサ
ポートします。この両者の唯一の違いは、`kyo` が "Helvetica" を使うのに対
して `prescribe` が "Courier" を使うことだけです。オプションはありませ
ん。"



File: gnuplot.info, Node: latex, Next: linux, Prev: kyo, Up: 出力形式の一覧

latex
-----





書式:
           set terminal {latex | emtex} {default | {courier|roman} {<fontsize>}}
                        {size <XX>{unit}, <YY>{unit}} {rotate | norotate}


デフォルトでは、それを埋め込む文書のフォントの設定を引き継ぎますが、代
わりに Courier (cmtt) か Roman (cmr) フォントのいずれかにするオプション
が使えます。その際はフォントサイズも指定できます。あなたの DVI ドライバ
が任意のサイズのフォントを作り出すことができない場合 (例えば dvips)、標
準的な 10, 11, 12 ポイントサイズでなんとかしのいでください。

METAFONT ユーザへの警告: METAFONT は妙なサイズは好みません。

LaTeX に関する全てのドライバは文字列の配置の制御に特別な方法を提供しま
す: '{' で始まる文字列は、'}' で閉じる必要がありますが、その文字列全体
が水平方向にも垂直方向にもセンタリングされます。'[' で始まる文字列の場
合は、位置の指定をする文字列 (t,b,l,r のうち 2 つまで) が続き、次に']{'、
文字列本体、で最後に '}' としますが、この文字列は LaTeX が LR-boxとして
整形します。'\\rule{}{}' を使えばさらに良い位置合わせが可能でしょう。

数ある中で、点 (point) は、LaTeX のコマンド "\\Diamond" と "\\Box" を使っ
て描かれます。これらのコマンドは現在は LaTeX2e のコアには存在せず、
latexsym パッケージに含まれていますが、このパッケージ基本配布の一部であ
り、よって多くの LaTeX のシステムの一部になっています。このパッケージを
使うことを忘れないでください。他の点種は、amssymb パッケージの記号を使
用します。

デフォルトの描画サイズは 5 inch × 3 inch ですが、オプション *Note
size:: でこれをユーザの希望するものに変更できます。また、デフォルトでは
X と Yのサイズの単位は inch ですが、他の単位を使うことも可能です (現在
は cmのみ)。

'rotate' を指定すると、文字列の回転、特に y 軸のラベルの回転が可能にな
ります (graphics か graphicx パッケージが必要)。その場合、y 軸ラベルを'積
み上げ型' にする仕組みは停止されます。

例:見出しの位置合わせに関して: gnuplot のデフォルト (大抵それなりになる
が、そうでないこともある):
            set title '\\LaTeX\\ -- $ \\gamma $'

水平方向にも垂直方向にもセンタリング:
            set label '{\\LaTeX\\ -- $ \\gamma $}' at 0,0

位置を明示的に指定 (上に合わせる):
            set xlabel '[t]{\\LaTeX\\ -- $ \\gamma $}'

他の見出し -- 目盛りの長い見出しに対する見積り:
            set ylabel '[r]{\\LaTeX\\ -- $ \\gamma $\\rule{7mm}{0pt}}'"




File: gnuplot.info, Node: linux, Next: lua, Prev: latex, Up: 出力形式の一覧

linux
-----



`linux` ドライバには指定するオプションは何もありません。それはデフォル
トのモード用に環境変数 GSVGAMODE を参照します。もしそれが設定されていな
ければ 1024x768x256 をデフォルトとして使用しますが、それができなければ
640x480x16 (標準の VGA) とします。"



File: gnuplot.info, Node: lua, Next: macintosh, Prev: linux, Up: 出力形式の一覧

lua
---



この `lua` 出力ドライバは、対象先指定描画ファイルを作成するための、外部
Lua スクリプトとの組み合わせで機能します。現在サポートしている対象は、
TikZ -> pdflatex のみです。

Lua に関する情報は、http://www.lua.org で参照できます。

書式:
        set terminal lua <target name> | "<file name>"
                            {<script_args> ...}
                            {help}


スクリプト用に 'target name'、または引用符付きの 'file name' が必須です。
スクリプトの 'target name' を与えた場合は、この出力形式は、
gnuplot-<target name>.lua" をまずローカルディレクトリで探し、それに失敗
すると環境変数 GNUPLOT_LUA_DIR を探します。

その他のすべての引数は、選択したスクリプトに評価させるように与えられま
す。例えば、'set term lua tikz help' は、スクリプトそれ自身に、スクリプ
ト用のオプションと選択に関する追加のヘルプを表示させます。



File: gnuplot.info, Node: macintosh, Next: mf, Prev: lua, Up: 出力形式の一覧

macintosh
---------



書式:
          set terminal macintosh {singlewin | multiwin} {vertical | novertical}
                                 {size <width>, <height> | default}


'singlewin' は単一ウィンドウへの制限であり、アニメーション用に有用で
す。'multiwin' は複数のウィンドウが使えるようになります。'vertical' は
gx オプションの元でのみ有効です。このオプションでは回転した文字列を垂直
方向に書きます。novertical はこのオプションを無効にします。size
<width>, <height> は preferences dialog で設定されたグラフサイズを書き
換え、'set term mac size default' か 'set term mac default' が指定され
るまでその値は保持されます。

'set term mac size default' はウィンドウサイズの設定を preferences
dialog で設定したものにします。

'set term mac default' は全てのオプションをデフォルトの値に設定します。
デフォルト値は nogx, multiwin, novertical です。

multiwin オプションの元でグラフを作成し、その後 singlewin にスイッチし
た場合、次の plot コマンドでは更に一つウィンドウが作られ、この新しいウィ
ンドウでは singlewin が有効な間使用されます。そして multiwin に戻り、い
くつかのグラフを生成し、また再び singlewin にスイッチすると、もし元の
'singlewin' ウィンドウがまだ開いていればそれが使われ、そうでなければ新
しい 'singlewin' ウィンドウが作られます。'singlewin' ウィンドウは番号付
けはされません。"



File: gnuplot.info, Node: mf, Next: mp, Prev: macintosh, Up: 出力形式の一覧

mf
--



`mf` ドライバは METAFONT プログラムへの入力ファイルを作ります。よってそ
の図は TeX の文書中では文字と同じように使うことができます。

文書中で図を使うには、`gnuplot` の出力するファイルを入力として
METAFONTプログラムを実行する必要があります。よって、ユーザはフォントが
作られるプロセスと新しく作ったフォントをドキュメントに取り込むための基
礎知識が必要となります。しかし、使用するサイトで METAFONT プログラムが
適切に設定されていれば、経験のないユーザでもそう問題なく操作はできるで
しょう。

グラフ中の文字は METAFONT の文字セットに基づいてサポートされます。現状
では Computer Modern Roman フォントセットが入力ですが、ユーザは必要なフォ
ントを何でも自由に選ぶことができます。ただしその選んだフォントの
METAFONT ソースファイルが使える状態になっている必要があります。個々の文
字は METAFONT の中で別々のピクチャー変数に保存され、文字が必要になった
ときにこれらの変数が操作 (回転、伸縮等) されます。欠点は、METAFONTプロ
グラムが解釈に要する時間です。ある計算機 (つまり PC) では、ピクチャー変
数をたくさん使用しすぎることで、使えるメモリの量の限界が問題を起こすこ
ともあります。

`mf` ドライバにはオプションはありません。

* Menu:

* METAFONT_の使い方::



File: gnuplot.info, Node: METAFONT_の使い方, Prev: mf, Up: mf

METAFONT の使い方
.................


- 出力形式 (terminal) を METAFONT にセット:
       set terminal mf

- 出力ファイル名を設定。例えば:
       set output "myfigures.mf"

- グラフの描画。各グラフは別々の文字を生成し、そのデフォルトの大きさは
5x3 インチですが、この大きさは `set size 0.5,0.5` のようにしてどんなサ
イズにでも自由に変更できます。

- `gnuplot` を終了

- `gnuplot` の出力ファイルに対して METAFONT を実行し、TFM ファイルと GF
ファイルを作ります。グラフは割と大きい (5x3 インチ) ので、memmax の値が
少なくとも 150000 である METAFONT を使う必要があるでしょう。Unix では、
それは通常 bigmf という名前でインストールされているでしょう。以下では、
virmf コマンドが big 版の METAFONT であると仮定し、実行例を示します:

- METAFONT の立ち上げ:
         virmf '&plain'

- 出力装置の選択: METAFONT プロンプト ('*') 上で次のように打ちます:
         \\mode:=CanonCX; % あなたの使用するプリンタを指定

- 拡大率 (magnification) の選択 (オプション):
         mag:=1; % あなたの好みの値を指定

- `gnuplot` で作ったファイルを入力:
         input myfigures.mf

典型的な Unix マシンでは、virmf '&plain' を実行するスクリプト "mf" があ
るので、virmf &plain の代わりに mf を使えます。これにより mfput.tfmと
mfput.$$$gf ($$$ は出力装置の解像度) の 2 つのファイルが作られます。上
の作業は、すべてをコマンドライン上で簡単に実行することもできます:
virmf '&plain' '\\mode:=CanonCX; mag:=1; input myfigures.mf'この場合、
作られるファイル名は myfigures.tfm と myfigures.300gf という名前になり
ます。

- gftopk を使って GF ファイルから PK ファイルを生成:
       gftopk myfigures.300gf myfigures.300pk

gftopk が作るファイルの名前はあなたが使用する DVI ドライバに依存します
ので、サイトの TeX の管理者にフォント名の規則について聞いてください。次
に TFM ファイルと PK ファイルを適当なディレクトリにインストールするかま
たは環境変数を適切な値に設定します。通常それは、TEXFONTS にカレントディ
レクトリを含めることと、あなたが使用する DVI ドライバが使用している環境
変数 (標準的な名前はありませんが ...) に対して同じことをやれば済みます。
これは TeX がフォントメトリック (TFM) ファイル を見つけ、DVI ドライバが
PK ファイルを見つけられるようにするために必要な作業です。

- 文書にそのグラフを入れるために TeX にそのフォント名を指示:
       \\font\\gnufigs=myfigures

各グラフは、最初のグラフが文字 0、2 番目のグラフが文字 1 というように、
それぞれ一つの文字として保存されています。上記の作業を行なうと、グラフ
はその他の文字と同じように使うことができ、例えばグラフ 1 と 2 を文書中
にセンタリングして置くために plain TeX ファイル中ですべきことは:
       \\centerline{\\gnufigs\\char0}
       \\centerline{\\gnufigs\\char1}

だけです。もちろん LaTeX では picture 環境を使って \\makebox と \\put
マクロで任意の位置にグラフを配置することができます。

このやり方は、一度フォントを生成してしまえば、大幅に時間の節約になりま
す: TeX はグラフを文字として使い、それを配置するにはごく少ない時間しか
使用しませんし、グラフよりも文書の方が修正することが多いでしょうから。
そしてこれは TeX のメモリの節約にもなります。METAFONT ドライバを使うも
う最後の一つの利点は、生成される DVI ファイルが本来のデバイス非依存な形
になるということです。それは eepic や tpic ドライバのような \\specialコ
マンドを全く使わないからです。"



File: gnuplot.info, Node: mp, Next: mif, Prev: mf, Up: 出力形式の一覧

mp
--




`mp` ドライバは Metapost プログラムへ入力することを意図した出力を生成し、
そのファイルに対して Metapost を実行するとグラフを含む EPS ファイルが作
られます。デフォルトでは Metapost は全ての文字列を TeX に通します。これ
はタイトルや見出しに任意の TeX の記号を本質的に使うことができる、という
利点を持つことを意味します。

書式:
        set term mp {color | colour | monochrome}
                    {solid | dashed}
                    {notex | tex | latex}
                    {magnification <magsize>}
                    {psnfss | psnfss-version7 | nopsnfss}
                    {prologues <value>}
                    {a4paper}
                    {amstex}
                    {"<fontname> {,<fontsize>}"} 


オプション `color` は線をカラーで書くことを意味し (それをサポートするプ
リンタやディスプレイ上で)、`monochrome` (または何も指定しない場合)は黒
の線が選択されます。オプション `solid` は線を実線で描き、`dashed` (また
は無指定) は線を異なるパターンの点線で描き分けます。`solid` が指定され
てかつ `color` が指定されなかった場合、ほとんど全ての線が同じものになり
ますが、これも何かの場合には有用でしょうから認められています。

オプション `notex` は完全に TeX を迂回しますので、このオプションの元で
は見出しには TeX のコードは使うことができません。これは、古いグラフファ
イル、あるいは TeX では特殊記号として解釈されてしまう `$` や `%` のよう
な一般的な文字をたくさん使うファイルのために用意されています。

オプション `tex` は、TeX で処理する文字列を出力するように設定します。

オプション `latex` は、LaTeX で処理する文字列を出力するように設定します。
これによって TeX では使えないけれど LaTeX では使えるもの、例えば分数を
frac で書いたりすることができます。このオプションを使う場合は、環境変数
TEX に LaTeX の実行プログラム名 (通常は latex) を設定するか、あるいは
`mpost --tex=<LaTeX の実行プログラム名> ...` とすることを忘れないでくだ
さい。そうでないと metapost はテキストの処理に TeX を使おうとして失敗し
てしまうでしょう。

TeX におけるフォントサイズの変更は数式には効果がなく、そのような変更を
行なうとても簡単な方法は、大域的に拡大率 (magnification factor) を設定
する以外にはありません。それがオプション `magnification` の意味です。そ
の場合は拡大率を後ろに指定する必要があります。全ての文字 (グラフではな
く) はこの率で拡大されます。数式をデフォルトの 10pt 以外の他のサイズで
書きたい場合はこれを使用してください。ただ残念なことに全ての数式が同じ
サイズになってしまいますが、しかし、以下の MP 出力の編集に関する説明を
参照してください。`mag` は `notex` の元でも働きますが、それを行なう意味
がないくらい (以下に述べる) フォントサイズオプションはうまく働きます。

オプション `psnfss` は postscript フォントを LaTeX と組み合わせて使用し
ます。このオプションは LaTeX が使われる場合のみ意味を持ちますので、自動
的に `latex` オプションが選択されます。このオプションは以下のLaTeX パッ
ケージを使用します: inputenc(latin1), fontenc(T1), mathptmx,
helvet(scaled=09.2), courier, latexsym, textcomp

オプション `psnfss-version7` も postscript フォントを LaTeX と組み合わ
せて使用します (`latex` が自動的に選択されます) が、以下の LaTeX パッケー
ジを使用します: inputenc(latin1), fontenc(T1), times, mathptmx,
helvet, courier

オプション `nopsnfss` はデフォルトで、標準的なフォント (何も指定されて
いなければ cmr10) が使われます。

オプション `prologues` は追加の値を引数に持ち、metapost ファイルに
`prologues:=<その値>` という行を追加します。値として `2` を指定すると
metapost は eps ファイルを作るように postscript フォントを使用し、それ
によりその結果は例えば ghostscript などで参照できるようになります。標準
では metapost は TeX のフォントを使用しますので、それを参照するには
(La)TeX のファイルに取り込む必要があります。

オプション `noprologues` はデフォルトで、prologue で指定したいかなる行
も追加されません。

オプション `a4paper` は `[a4paper]` を documentclass に追加します。標準
では letter 用紙 (デフォルト) が使われます。このオプションは LaTeXでの
み使われますので、自動的に `latex` オプションが選択されます。

オプション `amstex` は、自動的に `latex` オプションを選択し、以下の
LaTeX パッケージを使用します: amsfonts, amsmath(intlimits)。デフォルト
ではこれらは使用されません。

引用符で囲まれた名前はフォント名を表し、`set label` や *Note title:: で
明示的にフォントが与えられない場合はこのフォントが使われます。フォント
は TeX が認識できる (TFM ファイルが存在する) ものを使う必要があります。
デフォルトでは `notex` が選択されていなければ "cmr10" が、そうでなけれ
ば "pcrr8r" (Courier) が使われます。`notex` の元でも、Metapost にはTFM
ファイルは必要です。`pcrr8r.tfm` は LaTeX psnfss パッケージのCourier フォ
ント名として与えられています。`notex` のデフォルトからフォントを変更す
る場合は、少なくとも 32-126 のコード範囲は ASCII エンコーディングに一致
するものを選んでください。`cmtt10` もほぼ使えますが、しかしこれはコード
32 (スペース) にスペースではない文字が入っています。

サイズは 5.0 から 99.99 の間の任意の数字を指定でき、省略された場合は
10.0 が使われます。なるべく `magstep` サイズ、つまり 1.2 の整数かまたは
0.5 乗の 10 倍を小数以下 2 桁未満を丸めた値を使用することをお勧めします。
それはそれが TeX のシステムで最もよく使われるフォントのサイズだからです。

全てのオプションは省略可能です。フォントを指定する場合はそれは (必要な
らサイズもつけて) 一番最後に指定する必要があります。フォント名にそのサ
イズ情報が含まれていたとしても、サイズを変えるにはフォントサイズを指定
する必要があります。例えば `set term mp "cmtt12"` は cmtt12 をデフォル
トのサイズである 10 に縮めて使います。それは多分望まないことでしょうし
cmtt10 を使う方が良いでしょう。

以下の ascii 文字は、TeX では特別に扱われます:
        $, &, #, %, _;  |, <, >;  ^, ~,  \\, {, }

$, #, &, _, % の 5 つは、例えば `\\$` とすることで容易にそれをエスケー
プできます。<, >, | の 3 つは、例えば `$<$` のように数式モードに入れて
やればうまくいきます。残りのものに関しては少し TeX の回避策が必要になり
ますが、適当なよい TeX の本がそれを指導してくれるでしょう。

見出しを二重引用符で囲む場合、TeX コードのバックスラッシュはエスケープ
する (2 つ書く) 必要があります。単一引用符を使えばそれを避けることはで
きますが、今度は改行として `\\n` を使えなくなります。これを書いている現
在、gnuplot 3.7 は *Note plot:: コマンドで与えられたタイトルは、別な場
所で与えられた場合とは異なる処理をしますし、引用符のスタイルにかかわら
ず TeXコマンドのバックスラッシュは二重化した方が良さそうです。

Metapost の画像は TeX の文書内で一般に使われています。Metapost はフォン
トを TeX が行なうのと全く同じ方法で扱い、それは他の大抵の文書整形プログ
ラムとは異なっています。グラフが LaTeX の文書に graphics パッケージで取
り込まれ、あるいは epsf.tex を使って plainTeX に取り込まれ、そして
dvips (または他の dvi から ps への変換ソフト) で PostScript に変換され
る場合、そのグラフ内の文字は大抵は正しく扱われているでしょう。しかし、
Metapost 出力をそのまま PostScript インタプリタに送っても、グラフ内の文
字は出力されないでしょう。


* Menu:

* Metapost_の使い方::



File: gnuplot.info, Node: Metapost_の使い方, Prev: mp, Up: mp

Metapost の使い方
.................


- まず terminal ドライバを Metapost に設定、例えば:
        set terminal mp mono "cmtt12" 12


- 出力ファイルを選択、例えば:
        set output "figure.mp"


- グラフを作成。各 plot (または multiplot の各グループ) はそれぞれ別な
Metapost beginfig...endfig グループに分けられます。そのデフォルトのサイ
ズは 5x3 インチですが、それは `set size 0.5,0.5` とか、そうしたいと思う
適当な割合をそのように指定することで変更できます。

- gnuplot を終了。

-  gnuplot の出力ファイルに対して Metapost を実行して EPS ファイルを作
成:
        mpost figure.mp  OR  mp figure.mp

Metapost プログラム名はシステムに依存し、Unix では通常 `mpost` で、他の
多くのシステムでは `mp` です。Metapost は各グラフに対して 1 つずつの
EPS ファイルを生成します。

- そのグラフを文書に取り込むには LaTeX graphics パッケージや、plainTeX
では epsf.tex を使用:
        \\usepackage{graphics} % LaTeX
        \\input epsf.tex       % plainTeX

TeX DVI 出力を PS に変換するのに、dvips 以外の DVI ドライバを使う場合は、
LaTeX ファイルに以下の行を入れる必要があるかも知れません:
        \\DeclareGraphicsRule{*}{eps}{*}{}

作られた各グラフは分離したファイルになっていて、最初のグラフのファイル
は、例えば figure.0, 2 つ目は例えば figure.1 のような名前になります。よっ
て、3 つ目のグラフを文書に取り込むためにあなたがしなければいけないこと
は以下のみです:
        \\includegraphics{figure.2} % LaTeX
        \\epsfbox{figure.2}         % plainTeX


mp ドライバの postscript ドライバに代わる利点は、もしあるとすれば、それ
は編集可能な出力であるということでしょう。この出力を可能な限り綺麗にす
るための、かなりの努力が払われました。Metapost 言語に関するそういった知
識のおかげで、デフォルトの線種や色は配列 `lt[]` や `col[]` を編集するこ
とで変更できるようになりました。実線/点線、カラー/白黒といった選択も、
真偽値として定義されている `dashedlines` や `colorlines` を変更すること
で行なえます。デフォルトの `tex` オプションが有効な場合、ブロック
`vebatimtex...etex` を編集することで、ラベル文字フォントに対する大域的
な変更が行なえます。特に、もし望むなら LaTeX のプリアンブルを追加するこ
ともでき、その場合 LaTeX の持つサイズ変更コマンドを使えるので最大の柔軟
性を発揮できるでしょう。ただし、Metapost に plainTeX でなくLaTeX を実行
させるよう、適切な MP 設定変数を設定することを忘れないでください。"



File: gnuplot.info, Node: mif, Next: next, Prev: mp, Up: 出力形式の一覧

mif
---



`mif` ドライバは Frame Maker MIF フォーマット (version 3.00) の出力を生
成します。これは 15*10 cm のサイズの MIF フレームを出力し、同じペンで書
かれるグラフの基本要素は同じ MIF グループにグループ化されます。
`gnuplot` の 1 ページにおけるグラフの基本要素は一つの MIF フレームに描
画され、いくつかの MIF フレームは一つの大きな MIF フレーム内に集められ
ます。文字列で使われる MIF フォントは "Times" です。

MIF 3.00 ドライバではいくつかのオプションが設定できます。

書式:
           set terminal mif {color | colour | monochrome} {polyline | vectors}
                            {help | ?}


`colour` は線種 (line type) >= 0 の線をカラー (MIF separation 2--7) で、
`monochrome` は全ての線を黒 (MIF separation 0) で描画します。
`polyline` は曲線を連続曲線として描画し、*Note vectors:: は曲線をベクト
ルの集まりとして描画します。*Note help:: と `?` はオンラインヘルプを標
準エラー出力に表示します。両者はその使用法の短い説明を出力し、*Note
help:: は更にオプションも表示します。

例:
           set term mif colour polylines    # デフォルト
           set term mif                     # デフォルト
           set term mif vectors
           set term mif help"




File: gnuplot.info, Node: next, Next: Openstep_(next), Prev: mif, Up: 出力形式の一覧

next
----



`next` ドライバには設定のためのいくつかのオプションがあります。

書式:
           set terminal next {<mode>} {<type> } {<color>} {<dashed>}
                      {"<fontname>"} {<fontsize>} title {"<newtitle>"}


<mode> は `default` のみ指定でき、その場合全てのオプションがデフォルト
になります。<type> は `new` か `old` で、`old` は古い単一ウィンドウを要
求します。<color> は `color` (カラー) か `monochrome` (白黒)、<dashed>
は `solid` (実線のみ) か `dashed` (点線が有効)、"<fontname>"は有効な
PostScript フォントの名前を、<fontsize> は PostScript ポイント単位での
フォントのサイズを、<title> は GnuTerm ウィンドウのタイトルをそれぞれ設
定します。デフォルトは `new`, `monochrome`, `dashed`, "Helvetica",
14pt です。

例:
           set term next default
           set term next 22
           set term next color "Times-Roman" 14
           set term next color "Helvetica" 12 title "MyPlot"
           set term next old


点の大きさは `set linestyle` で変更できます。"



File: gnuplot.info, Node: Openstep_(next), Next: pbm, Prev: next, Up: 出力形式の一覧

Openstep (next)
---------------




/*


*/ openstep (next) ドライバには設定のためのいくつかのオプションがありま
す。

書式:
           set terminal openstep {<mode>} {<type> } {<color>} {<dashed>}
                      {"<fontname>"} {<fontsize>} title {"<newtitle>"}


<mode> は `default` のみ指定でき、その場合全てのオプションがデフォルト
になります。<type> は `new` か `old` で、`old` は古い単一ウィンドウを要
求します。<color> は `color` (カラー) か `monochrome` (白黒)、<dashed>
は `solid` (実線のみ) か `dashed` (点線が有効)、"<fontname>"は有効な
PostScript フォントの名前を、<fontsize> は PostScript ポイント単位での
フォントのサイズを、<title> は GnuTerm ウィンドウのタイトルをそれぞれ設
定します。デフォルトは `new`, `monochrome`, `dashed`, "Helvetica",
14pt です。

例:
           set term openstep default
           set term openstep 22
           set term openstep color "Times-Roman" 14
           set term openstep color "Helvetica" 12 title "MyPlot"
           set term openstep old


点の大きさは `set linestyle` で変更できます。"



File: gnuplot.info, Node: pbm, Next: dospc, Prev: Openstep_(next), Up: 出力形式の一覧

pbm
---



書式:
           set terminal pbm {<fontsize>} {<mode>} {size <x>,<y>}


<fontsize> は `small` か `medium` か `large` で、<mode> は
`monochrome`か `gray` か `color` です。デフォルトの描画サイズは 640 ピ
クセルの幅で480 ピクセルの高さです。出力サイズは、x と y の両方を 8 ピ
クセル倍したものに最も近くなるように空白が追加されます。必要であれば、
この空白部分は後で取り除くことができます。

`pbm` ドライバの出力は <mode> によります: `monochrome` は portable
bitmap (PBM; 1 ピクセル 1 ビット) を、`gray` は portable graymap (PGM;
1 ピクセル 3 bit) を、`color` は portable pixmap (PPM; 1 ピクセル 4 ビッ
ト) を出力します。

このドライバの出力は、NETPBM によって提供される様々な画像変換、画像処理
ツールで使うことができます。 Jef Poskanzer の PBMPLUS パッケージに基づ
く NETPBM は、上記の PBM 形式から GIF, TIFF, MacPaint, Macintosh PICT,
PCX, X11 ビットマップ、その他多くの形式に変換するプログラムを提供します。
完全な情報は http://netpbm.sourceforge.net/ にあります。

例:
           set terminal pbm small monochrome                # デフォルト
           set terminal pbm color medium size 800,600
           set output '| pnmrotate 45 | pnmtopng > tilted.png'  # NETPBM を利用"




File: gnuplot.info, Node: dospc, Next: pdf, Prev: pbm, Up: 出力形式の一覧

dospc
-----



`dospc` ドライバは PC の任意のグラフィックボードをサポートし、それらを
自動検出します。これは、gcc, または Zortec C/C++ コンパイラを使っていな
いときのみ利用可能です。"



File: gnuplot.info, Node: pdf, Next: pstricks, Prev: dospc, Up: 出力形式の一覧

pdf
---



このドライバは Adobe PDF (Portable Document Format) 出力を生成し、それ
は Acrobat Reader のようなツールで表示、印刷ができます。

書式:
           set terminal pdf {monochrome|color|colour}
                            {{no}enhanced}
                            {fname "<font>"} {fsize <fontsize>}
                            {font "<fontname>{,<fontsize>}"} {fontscale <scale>}
                            {linewidth <lw>} {rounded|butt}
                            {solid|dashed} {dl <dashlength>}}
                            {size <XX>{unit},<YY>{unit}}


デフォルトでは、個々の線種に対して異なる色を用います。`monochrome` を選
択すると全ての線種を黒で描きますので、線種を区別するために `dashed` を
使うと良いでしょう。モノクロモードでも塗りつぶし領域やラインスタイルで
は明示的に色を使用することができます。

<font> はデフォルトで使われるフォント名 (デフォルトでは Helvetica) で
<fontsize> はポイント単位でのフォントサイズ (デフォルトでは 12) です。
どのようなフォントが使えて、新しいフォントをインストールするには、といっ
たことに関しては、ローカルにインストールされている pdflib のドキュメン
トを参照してください。

オプション `enhanced` は、拡張文字列処理機能 (下付き文字、上付き文字、
および複数のフォントの利用) を有効にします。以下参照: `enhanced`。

描画における全ての線の幅は `linewidth` で指定する因子 <n> で増加するこ
とができます。同様に、`dashlength` はデフォルトの点線の空白部分に対する
積因子です。

`rounded` は、線の端や接合部を丸くし、デフォルトの `butt` は尖った端と
角張った接合部を使用します。

PDF 出力のデフォルトのサイズは、5inch x 3inch です。オプション *Note
size:: は、これをユーザの指定するものへ変更します。デフォルトの X, Y サ
イズの単位はインチですが、他の単位も使用可能です (現在は cm のみ)。

                                   {level1 | leveldefault}",\
                                   {color | colour | monochrome}",\
                                   {background <rgbcolor> | nobackground}",\
                                   {solid | dashed}",\
                                   {dashlength | dl <DL>}",\
                                   {linewidth | lw <LW>}",\
                                   {rounded | butt}",\
                                   {clip | noclip}",\
                                   {palfuncparam <samples>{,<maxdeviation>}}",\
                                   {size <XX>{unit},<YY>{unit}}
                                   {blacktext | colortext | colourtext}",\
                                   {{font} "fontname{,fontsize}" {<fontsize>}}",\
                                   {fontscale <scale>}

以下のようなエラーメッセージが出た場合:",\
           "Can't find PostScript prologue file ... "",\

以下参照: `postscript prologue`。そしてその指示に従ってください。",\

オプション `color` はカラーを有効にし、`monochrome` は各要素を黒と白",\
描画します。さらに、`monochrome` は灰色の *Note palette:: も使用しますが、",\
これは、明示的に `colorspec` で指定された部品の色を変更しません。",\
,\
`solid` は全てのグラフの点線のパターンを実線で上書きします。",\
`dashlength` または `dl` は点線の線分の長さを <DL> (0 より大きい実数)",\
に設定し、",\
`linewidth` または `lw` は全ての線の幅を <LW> に設定します。",\
,\
デフォルトでは、生成される PostScript コードは、特にフィルタリングや",\
filledcurves のようなでこぼこな領域のパターン塗りつぶしにおいて、",\
PostScript Level 2 として紹介されている言語機能を使います。PostScript",\
Level 2 の機能は条件的に保護されていて、PostScript Level 1 のインター",\
プリタがエラーを出さず、むしろメッセージか PostScript Level 1 による",\
近似であることを表示するようになっています。`level1` オプションは、こ",\
れらの機能を近似する PostScript Level1 で代用し、PostScript Level 2 ",\
コードを一切使用しません。これは古いプリンタや、Adobe Illustrator の",\
古いバージョンなどで必要になるかもしれません。このフラグ `level1` は",\
出力された PostScript ファイルのある一行を手で編集することで、後から",\
強制的に PostScript Level 1 機能を ON/OFF にすることもできます。level",\
2 のコードが含まれている場合、上の機能は現われないか、このフラグがセ",\
ットされた場合、あるいは PostScript インタプリタプログラムが level 2",\
以上の PostScript を解釈するとは言わなかった場合に警告文に置き換わり",\
ます。",\
,\
`rounded` は、線の端や接合部を丸くし、デフォルトの `butt` は尖った端と",\
角張った接合部を使用します。",\
,\
*Note clip:: は、PostScript にすべての出力を BoundingBox (PostScript の外枠)",\
でクリップすることを指示します; デフォルトは `noclip` です。",\
,\
`palfuncparam` は *Note functions:: から出力の傾きをどのようにコ",\
ード化するかを制御します。解析的な色の成分関数 (*Note functions:: ",\
で設定される) は、postscript 出力では傾きの線形補完を用いてコード化さ",\
れます: まず色の成分関数が <samples> 個の点で標本化され、そしてそれら",\
の点は、結果として線形補完との偏差が <maxdeviation> 以内に収まるように",\
削除されます。ほとんど全ての有効なパレットで、デフォルトの <samples>",\
=2000 と <maxdeviation>=0.003 の値をそのまま使うのが良いでしょう。",\
,\ PostScript 出力のデフォルトの大きさは 10 インチ x 7 インチです。EPS
,\出力のデフォルトの大きさは 5 x 3.5 インチです。オプション *Note
size:: は",\これらをユーザが指定したものに変更します。デフォルトでは X
と Y のサ",\イズの単位はインチとみなされますが、他の単位 (現在は cm の
み) も使う",\ことはできます。描画の BoundingBox (PostScript ファイルの
外枠) は、",\サイズが変更された画像を丁度含むように正しく設定されます。
,\スクリーン座標は、オプション *Note size:: で指定された描画枠の全体が
0.0",\から 1.0 になります。",\注意: `これは、以前は、出力形式での設定よ
りも、コマンド set size で",\設定した方がいい、と言っていたことの変更を
意味します`。以前の方法で",\は BoundingBox は変更されずに残ってしまい、
スクリーン座標が実際の描",\画の限界に対応していませんでした。",\





File: gnuplot.info, Node: pstricks, Next: qms, Prev: pdf, Up: 出力形式の一覧

pstricks
--------



`pstricks` ドライバは LaTeX の "pstricks.sty" マクロパッケージと共に使
われることを意図しています。これは `eepic` や `latex` ドライバに代わる
選択肢の一つです。"pstricks.sty" は必要ですが、もちろん PostScript を解
釈するプリンタ、または Ghostscript のような変換ソフトも必要です。

PSTricks は anonymous ftp で Princeton.EDU の /pub ディレクトリから取得
できます。このドライバは、PSTricks パッケージの全ての能力を使おうとなど
とは全く考えてはいません。

書式:
           set terminal pstricks {hacktext | nohacktext} {unit | nounit}


最初のオプションは、あまり綺麗ではない方法で数字のより良い出力を生成す
るもので、2 つ目のオプションはグラフを伸縮する際には必要です。デフォル
トでは `hacktext` と `nounit` です。"



File: gnuplot.info, Node: qms, Next: regis, Prev: pstricks, Up: 出力形式の一覧

qms
---



`qms` ドライバは QMS/QUIC レーザープリンタ、Talaris 1200、その他をサポー
トします。オプションはありません。"



File: gnuplot.info, Node: regis, Next: sun, Prev: qms, Up: 出力形式の一覧

regis
-----



`regis` ドライバは REGIS グラフィック言語での出力を生成します。このドラ
イバには色を 4 色使うか (デフォルト) 16 色使うかのオプションがあります。

書式:
           set terminal regis {4 | 16}"




File: gnuplot.info, Node: sun, Next: svg, Prev: regis, Up: 出力形式の一覧

sun
---



`sun` ドライバは SunView ウィンドウシステムをサポートしています。オプショ
ンはありません。"



File: gnuplot.info, Node: svg, Next: tek410x, Prev: sun, Up: 出力形式の一覧

svg
---



このドライバは W3C SVG (Scalable Vector Graphics) フォーマットを生成し
ます。

書式:
           set terminal svg {size <x>,<y> {|fixed|dynamic}}
                            {{no}enhanced}
                            {fname "<font>"} {fsize <fontsize>}
                            {mouse} {standalone | jsdir <dirname>}
                            {name <plotname>}
                            {font "<fontname>{,<fontsize>}"}
                            {fontfile <filename>}
                            {rounded|butt} {solid|dashed} {linewidth <lw>}
                            {background <rgb_color>}


ここで <x> と <y> は生成される SVG グラフのサイズですが、`dynamic` は
svg ビューワに描画のリサイズを許し、`fixed` は絶対サイズを要求します(デ
フォルト)。

`linewidth <w>` は図の中で使用される全ての線の幅を因子 <w> だけ増加させ
ます。

<font> はデフォルトとして使われるフォント名 (デフォルトでは Arial)、
<fontsize> はポイント単位でのフォントサイズ (デフォルトは 12) です。
svg ビューワソフトは、そのファイルの表示の際には別の代用フォントを使う
ことになるでしょう。

svg 出力形式は拡張文字列処理機能 (enhanced) をサポートしています。これ
は、フォント指定や他の書式命令をラベルや他の文字列内に埋め込むことを可
能にします。拡張文字列処理モードの書式指定は他の出力形式の場合と同じで
す。詳細は、以下参照: `enhanced`。

オプション `mouse` は、マウストラッキング機能と、対応する key 上でクリッ
クすることでそれぞれのグラフの描画を On/Off にする機能をサポートを追加
することを gnuplot に指示します。デフォルトではローカルディレクトリ、通
常は /usr/local/share/gnuplot/<version>/js 内のあるスクリプトを指すリン
クを取り込むことで行われますが、オプション `jsdir` に別のローカルディレ
クトリか、通常の URL を指定することでこれは変更できます。SVG 画像をWeb
ページに入れるのであれば、普通は後者の URL の方を指定します。一方でオプ
ション `standalone` は、マウス操作プログラムを SVG 文書自体に埋め込み、
外部リソースへのリンクは行いません。

SVG ファイルを何かの外部ファイルと組み合わせて利用したい場合、例えばそ
れが PNG 画像を内部に持っていたり、ある Web ページやそれが埋め込んでい
る文書の javascriptコードから参照されているような場合、他の SVG グラフ
への参照との衝突を避けるために一意的な名前が必要になります。その場合は
オプション `name` を使って固有の名前を確保してください。

SVG では、SVG 文書中にフォントを直接埋め込むこともできますし、好きなフォ
ントへのハイパーリンクを与えることもできます。`fontfile` オプションには、
結果として出力される SVG ファイルの <defs> セクションの中にコピーされる
ローカルファイル名を指定します。このファイルは、それ自身がフォントを含
んでいるか、または期待するフォントを参照するハイパーリンクを生成するた
めの行を含むもののどちらかです。gnuplot は、環境変数GNUPLOT_FONTPATH の
ディレクトリリストから要求されたファイルを探します。注: TrueType や
PostScript フォントではない svg フォントを埋め込む必要があります。"



File: gnuplot.info, Node: tek410x, Next: tek40, Prev: svg, Up: 出力形式の一覧

tek410x
-------



`tek410x` ドライバは Tektronix 410x, 420x ファミリーをサポートしていま
す。オプションはありません。"



File: gnuplot.info, Node: tek40, Next: texdraw, Prev: tek410x, Up: 出力形式の一覧

tek40
-----















書式:
        set terminal sixel {<fontsize>} {<mode>} {size <x>,<y>}


`sixel` 出力形式は、元は DEC ターミナル、プリンタで使われていました。
xterm エミュレーションで利用する場合、"--enable-sixel-graphics" 付きで
xterm が configure/コンパイルされていて、かつ "-ti 340" をつけて起動す
る必要があります。さらに、メニューオプション "sixelScrolling" で前景色
が黒で背景が白であることを確認する必要があります。


このドライバ群は VT-ライクな端末のいくつかをサポートします。`tek40xx`は
Tektronix 4010 とその他ほとんどの TEK エミュレータをサポートします。
`vttek` は VT-ライクな tek40xx 端末エミュレータをサポートします。以下の
ものは、gnuplot のコンパイル時に選択されたもののみが利用できます:
`kc-tek40xx` はカラーの MS-DOS Kermit Tek4010 ターミナルエミュレータを、
`km-tek40xx` はその白黒版をサポートします。`selanar` は Selanar グラ
フィック端末をサポートします。`bitgraph` は BBN Bitgraph 端末をサポート
します。いずれもオプションはありません。"



File: gnuplot.info, Node: texdraw, Next: tgif, Prev: tek40, Up: 出力形式の一覧

texdraw
-------



`texdraw` ドライバは LaTeX texdraw 環境をサポートします。それは
texdrawパッケージの "texdraw.sty" と "texdraw.tex" と共に使用されること
を仮定しています。

数ある中で、点 (point) は、LaTeX のコマンド "\\Diamond", "\\Box" などを
使って描かれます。これらのコマンドは現在は LaTeX2e のコアには存在せず
latexsym パッケージに含まれていますが、このパッケージ基本配布の一部であ
り、よって多くの LaTeX のシステムの一部になっています。このパッケージを
使うことを忘れないでください。

オプションはありません。"



File: gnuplot.info, Node: tgif, Next: tkcanvas, Prev: texdraw, Up: 出力形式の一覧

tgif
----



Tgif は X11 ベースのドローツールです -- ただし、これは GIF に関して何か
するわけではありません。

`tgif` ドライバは複数の点の大きさ (*Note pointsize:: で)、複数の見出し
用のフォント、フォントサイズ (例えば `set label "Hallo" at x,y font
Helvetica,34"`)、そして 1 ページ内の複数のグラフ描画をサポートします。
軸の比率は変更されません。

書式:
           set terminal tgif {portrait | landscape | default} {<[x,y]>}
                             {monochrome | color}
                             {{linewidth | lw} <LW>}
                             {solid | dashed}
                             {font "<fontname>{,<fontsize>}"}


<[x,y]> にはそのページ内の x 方向、y 方向のグラフの数を指定し、`color`
はカラー機能を有効にし、`linewidth` は全ての線幅を <LW> 倍し、
<fontname>" には有効な PostScript フォント名、<fontsize> はその
PostScript フォントの大きさを指定します。`defaults` は全てのオプション
の値をデフォルトの値にセットします。デフォルトは `portrait`, `[1,1]`,
`color`, `linewidth 1.0`, `dashed`, `"Helvetica,18"` です。

`solid` オプションは、編集作業中にそうであるように、線がカラーである場
合に普通使われます。ハードコピーは白黒になることが多いので、その場合は
`dashed` を選択すべきでしょう。

多重描画 (multiplot) は 2 種類の方法で実装されています。

その一つは、標準的な gnuplot の多重描画のやり方です:

           set terminal tgif
           set output "file.obj"
           set multiplot
           set origin x01,y01
           set size  xs,ys
           plot ...
                ...
           set origin x02,y02
           plot ...
           unset multiplot


より詳しい情報については、以下参照: *Note multiplot::。

もう一つの方法はドライバの [x,y] オプションです。この方法の長所は、原点
(origin) や大きさ (size) の設定をしなくても全てのグラフが自動的に縮尺さ
れ配置されることです。グラフの比 x/y は、自然な比 3/2 (または *Note
size:: で設定されたもの) が保持されます。

両方の多重描画の実装が選択された場合、標準的なやり方の方が選択され、警
告のメッセージが表示されます。

単一描画 (または標準的な多重描画) の例:
           set terminal tgif                  # デフォルト
           set terminal tgif "Times-Roman,24"
           set terminal tgif landscape
           set terminal tgif landscape solid


ドライバの持つ多重描画の仕組みを利用する例:
           set terminal tgif portrait [2,4]  # 縦置、x-方向に 2 つ、y-方向
                                             # に 4 つのグラフ描画
           set terminal tgif [1,2]           # 縦置、x-方向に 1 つ、y-方向
                                             # に 2 つのグラフ描画
           set terminal tgif landscape [3,3] # 横置、両方の方向に 3 つのグ
                                             # ラフ描画"




File: gnuplot.info, Node: tkcanvas, Next: tpic, Prev: tgif, Up: 出力形式の一覧

tkcanvas
--------



このドライバは Tcl/Tk ベース (デフォルト)、または Perl ベースの Tk
canvas widget コマンドを生成します。これを使うには、"term.h" のこのドラ
イバに対応する行のコメント記号を外すか適当な行を書き加えて `gnuplot`を
make し直して、以下のように実行します。

      gnuplot> set term tkcanvas {perltk} {interactive}
      gnuplot> set output 'plot.file'


そして "wish" を起動した後で、以下の Tcl/Tk コマンド列を実行してくださ
い:

      % source plot.file
      % canvas .c
      % pack .c
      % gnuplot .c


Perl/Tk の場合は以下のようにしてこのプログラムを使います:

      use Tk;
      my $top = MainWindow->new;
      my $c = $top->Canvas->pack;
      my $gnuplot = do "plot.pl";
      $gnuplot->($c);
      MainLoop;


`gnuplot` によって生成されたコードは "gnuplot" と呼ばれる手続きを作り、
それはその引数を canvas の名前とします。その手続きが呼ばれると、それは
canvas をクリアし、canvas のサイズを見つけ、その中に丁度収まるようにグ
ラフを書きます。

2 次元の描画 (*Note plot::) では 2 つの手続きが追加されて定義されます:
gnuplot_plotarea" は描画範囲の境界を含むリスト "xleft, xright, ytop,
ybot" を canvas スクリーン座標で返し、2 つの対の軸の描画座標での範囲
x1min, x1max, y1min, y1max, x2min, x2max, y2min, y2max" は手続き
gnuplot_axisranges" を呼べば得られます。"interactive" オプションを指定
すると、canvas の線分上でマウスをクリックするとその線分の中点の座標が標
準出力に出力されるようになります。さらに、"user_gnuplot_coordinates"と
いう手続きを定義することで、それに代わる新たな動作を起こすことも可能で
す。その手続きには以下の引数が渡されます: "win id x1s y1s x2s y2s x1e
y1e x2e y2e x1m y1m x2m y2m"、これらは、canvas の名前、線分の id、2 つ
の座標系でのその線分の開始点の座標、終了点の座標、そして中点の座標です。
中点の座標は対数軸に対してのみ与えられます。

`tkcanvas` の現在の版では *Note multiplot:: も *Note replot:: もサポー
トしていません。"



File: gnuplot.info, Node: tpic, Next: unixpc, Prev: tkcanvas, Up: 出力形式の一覧

tpic
----



`tpic` ドライバは tpic \\special での LaTeX picture 環境の描画をサポー
トします。 これは `latex` や `eepic` ドライバに代わる別な選択肢です。点
の大きさ (pointsize)、線の幅 (linewidth)、点線の点の間隔 (interval)に関
するオプションがあります。

書式:
           set terminal tpic <pointsize> <linewidth> <interval>


*Note pointsize:: と `linewidth` は整数でミリインチ単位、`interval` は
実数で単位はインチです。正でない値を指定するとデフォルトの値が使われま
す。デフォルトでは pointsize = 40, linewidth = 6, interval = 0.1 です。

LaTeX に関する全てのドライバは文字列の配置の制御に特別な方法を提供しま
す: '{' で始まる文字列は、'}' で閉じる必要がありますが、その文字列全体
が LaTeX によって水平方向にも垂直方向にもセンタリングされます。'[' で始
まる文字列の場合は、位置の指定をする文字列 (t,b,l,r のうち 2 つまで)が
続き、次に ']{'、文字列本体、で最後に '}' としますが、この文字列は
LaTeX が LR-box として整形します。\\rule{}{} を使えばさらに良い位置合わ
せが可能でしょう。

例:見出しの位置合わせに関して: gnuplot のデフォルト (大抵それなりになる
が、そうでないこともある):
            set title '\\LaTeX\\ -- $ \\gamma $'

水平方向にも垂直方向にもセンタリング:
            set label '{\\LaTeX\\ -- $ \\gamma $}' at 0,0

位置を明示的に指定 (上に合わせる):
            set xlabel '[t]{\\LaTeX\\ -- $ \\gamma $}'

他の見出し -- 目盛りの長い見出しに対する見積り:
            set ylabel '[r]{\\LaTeX\\ -- $ \\gamma $\\rule{7mm}{0pt}}'"




File: gnuplot.info, Node: unixpc, Next: vx384, Prev: tpic, Up: 出力形式の一覧

unixpc
------



`unixpc` ドライバは AT&T 3b1 と AT&T 7300 Unix PC をサポートします。オ
プションはありません。"



File: gnuplot.info, Node: vx384, Next: vgagl, Prev: unixpc, Up: 出力形式の一覧

vx384
-----



`vx384` ドライバは Vectrix 384 と Tandy カラープリンタをサポートします。
オプションはありません。"



File: gnuplot.info, Node: vgagl, Next: VWS, Prev: vx384, Up: 出力形式の一覧

vgagl
-----



ドライバ `vgagl` はマウスと pm3d を完全にサポートした、linux の高速なコ
ンソールドライバです。デフォルトモードの設定には 環境変数
SVGALIB_DEFAULT_MODE を参照しますが、設定されていない場合は 256 色モー
ドで有効な解像度のうち最も高いものを選択します。

書式:
        set terminal vgagl \\
                     background [red] [[green] [blue]] \\
                     [uniform | interpolate] \\
                     [dump "file"] \\
                     [mode]


カラーモードは mode オプションで与えることもできます。G1024x768x256 の
ような記号的名称や整数で与えることができます。オプション `background`は
[0, 255] の範囲の整数 1 つ、または 3 つの組を取ります。整数 1 つの場合
はそれは背景の灰色の値と見なされ、3 つの組の場合はそれに対応した色が背
景に取られます。相互に排他的なオプション *Note interpolate:: と
`uniform` は、三角形の塗りつぶしの際に色の補間が行うかどうか (デフォル
トでは ON) を制御します。

`screen dump file` はオプション `dump "file"` の指定で行えます。このオ
プションが指定されると (すなわちダンプファイル名が空でない場合) キー
KP_Delete を押すことでそのファイルにスクリーンダンプが書き出されます。
この機能は復帰することも復帰させることもできません。ファイルは raw ppm
(P6) 形式で出力されます。このオプションは `set term` コマンドが発行され
る度にリセットされます。

高解像度モードを得るには、多分 libvga の設定ファイル (通常
/etc/vga/libvga.conf) を修正する必要があるでしょう。VESA fb を使うのは
良い選択ですが、それはカーネルのコンパイルが必要です。

vgagl ドライバは、以下のリストのうちの *有効な* vga モードの最初のもの
を使用します。
      - vgagl の設定時に与えられるモード、例えば `set term vgagl G1024x768x256`
        は最初に G1024x768x256 モードが有効かどうかチェックします。
      - 環境変数 SVGALIB_DEFAULT_MODE
      - G1024x768x256
      - G800x600x256
      - G640x480x256
      - G320x200x256
      - G1280x1024x256
      - G1152x864x256
      - G1360x768x256
      - G1600x1200x256





File: gnuplot.info, Node: VWS, Next: windows, Prev: vgagl, Up: 出力形式の一覧

VWS
---



`VWS` ドライバは VAX ウィンドウシステムをサポートします。オプションはあ
りません。このドライバはディスプレイの状態 (白黒か、グレイスケールかカ
ラーか) を自動検知します。全ての線種は実線で描画されます。"



File: gnuplot.info, Node: windows, Next: wxt, Prev: VWS, Up: 出力形式の一覧

windows
-------



出力形式 `windows` は、グラフ描画と文字列描画に Windows GDI を使用する
高速な対話型出力ドライバです。Windows では、複数の環境で動作する
`wxt`出力形式もサポートされています。

書式:
           set terminal windows {<n>}
                                {color | monochrome}
                                {solid | dashed}
                                {enhanced | noenhanced}
                                {font <fontspec>}
                                {linewdith <scale>}
                                {fontscale <scale>}
                                {linewdith <scale>}
                                {background <rgb color>}
                                {title "Plot Window Title"}
                                {size <width>,<height>}
                                {position <x>,<y>}
                                {close}


複数のウィンドウ描画がサポートされています: `set terminal win <n>` で出
力が番号 n の描画ウィンドウに送られます。

`color`, `monochrome` は、カラー出力か白黒出力かの選択で、`dashed` と
`solid` は、点線と実線の選択です。`color` では `solid` がデフォルトで、
`monochrome` では `dashed` がデフォルトです。`enhanced` は拡張文字列処
理 (enhanced text mode) の機能 (上付、下付文字やフォントの混在) を有効
にします。詳細は以下参照: `enhanced text`。`<fontspec>` は
<fontface>,<fontsize>" の形式で、"<fontface>" は有効な Windows のフォン
ト名で、`<fontsize>` はポイント単位でのフォントの大きさです。この両要素
はいずれも省略可能です。以前の版の gnuplot では、`font` キーワードは省
略可能で、<fontsize> は引用符なしの数値で与えることができましたが、現在
はその形式はサポートしていませんので注意してください。`linewidth` と
`fontscale` で線の幅と文字サイズを伸縮できます。*Note title:: は、グラ
フウィンドウのタイトルを変更します。*Note size:: はウィンドウのピクセル
単位での幅と高さを、`position` はウィンドウの原点、すなわち左上角のスク
リーン上のピクセル単位での位置を定義します。これらのオプションは、ファ
イル `wgnuplot.ini` のデフォルトの設定を上書きします。

他のオプションもグラフメニューや初期化ファイル `wgnuplot.ini` で変更で
きます。

Windows 版は、非対話型モードでは通常、コマンドラインから与えたファイル
の最後に達すると直ちに終了しますが、コマンドラインの最後に `-` を指定し
た場合は別です。また、このモードではテキストウィンドウは表示せず、グラ
フのみの表示となりますが、オプションとして `-persist` (x11 版のgnuplot
と同じオプション; 従来の Windows のみのオプション `/noend` や`-noend`
を使うこともできます) を指定すると gnuplot は終了しなくなります。この場
合他の OS での gnuplot の挙動とは異なり、-persist オプション後も
gnuplot の対話型コマンドラインを受け付けます。

コマンド `set term` で gnuplot の出力形式を変更した場合、描画ウィンドウ
はそのまま残りますが、`set term windows close` で描画ウィンドウを閉じる
ことができます。

`gnuplot` は、Windows 上での出力の生成のためのいくつかの方法をサポート
しています。以下参照: `windows printing`。windows 出力形式は、クリップ
ボードや EMF ファイルを通して他のプログラムとのデータの交換をサポートし
ています。以下参照: `graph-menu`。EMF ファイルを生成するには、`emf` 出
力形式を使うこともできます。

* Menu:

* グラフメニュー_(graph-menu)::
* 印刷_(printing)::
* テキストメニュー_(text-menu)"::
* メニューファイル_wgnuplot.mnu"::
* wgnuplot.ini::



File: gnuplot.info, Node: グラフメニュー_(graph-menu), Next: 印刷_(printing), Prev: windows, Up: windows

グラフメニュー (graph-menu)
...........................



`gnuplot graph` ウィンドウでマウスの右ボタン(*) を押すか、システムメ
ニューから `Options` を選択すると以下のオプションを持つポップアップメ
ニューが現われます:

`Copy to Clipboard` クリップボードにビットマップや EMF 画像をコピー

`Save as EMF...` 現在のグラフウィンドウを EMF ファイルとして保存

`Print...` グラフィックウィンドウを Windows プリンタドライバでプリント
アウト。プリンタと拡大率の選択が可能ですが、この `Print` オプションによ
る印刷結果は `gnuplot` の持つプリンタドライバによるもの程良くはありませ
ん。以下も参照: `windows printing`。

`Bring to Top` チェックを入れるとグラフウィンドウを他の全ての描画ウィン
ドウの手前に表示

`Color` チェックを入れるとカラーの線種が有効、チェック無しでは白黒

`Double buffer` グラフをスクリーンに写す前にメモリバッファに描画するこ
とを有効にします。これは、例えばアニメーション時や 3 次元グラフの回転時
のちらちら (フリッカー) を回避します。以下参照: `mouse`, `scrolling`。

`Oversampling` 仮想キャンバスのサイズを倍にします。スクリーンに写す際に
は再び半分に縮小されます。これにより、グラフィックはより滑らかになりま
すが、しかしメモリや計算時間がより必要です。これは `double buffer` も必
要です。

`Antialiasing` 折れ線や線の端の平滑化を選択します。これは描画を遲くする
ことに注意してください。

`Background...` ウィンドウ背景色の設定

`Choose Font...` グラフィックウィンドウで使うフォントの選択

`Line Styles...` 線の色や種類のカスタマイズ

`Update wgnuplot.ini` 現在のウィンドウの位置、ウィンドウの大きさ、テキ
ストウィンドウのフォントとそのフォントサイズ、グラフウィンドウのフォン
トとそのフォントサイズ、背景色、線種を初期化ファイル `wgnuplot.ini` に
保存

(*) このメニューは、`unset mouse` によって右マウスボタン押ししか使えな
くなるので注意。



File: gnuplot.info, Node: 印刷_(printing), Next: テキストメニュー_(text-menu)", Prev: グラフメニュー_(graph-menu), Up: windows

印刷 (printing)
...............



好みにより、グラフは以下のような方法で印刷できます。

`1.` `gnuplot` のコマンド *Note terminal:: でプリンタを選択し、*Note
output::で出力をファイルにリダイレクト

`2.` `gnuplot graph` ウィンドウから `Print...` コマンドを選択。テキスト
ウィンドウからこれを行なう特別なコマンド `screendump` もある。

`3.` `set output "PRN"` とすると出力は一時ファイルに出力され、
`gnuplot`を終了するかまたは *Note output:: コマンドで出力を他のものへ変
更すると、ダイアログ (対話) ボックスが現われ、そこでプリンタポートを選
択。そこでOK を選択すると、出力はプリントマネージャでは加工されずにその
まま選択されたポートでプリントアウトされる。これは偶然 (または故意) に、
あるプリンタ用の出力を、それに対応していないプリンタに送り得ることを意
味する。




File: gnuplot.info, Node: テキストメニュー_(text-menu)", Next: メニューファイル_wgnuplot.mnu", Prev: 印刷_(printing), Up: windows

テキストメニュー (text-menu)", /* FIXME: this is not really related to the windows driver, but the windows platform */
......................................................................................................................



`gnuplot text` ウィンドウでマウスの右ボタンを押すか、システムメニューか
ら `Options` を選択すると以下のオプションを持つポップアップメニューが現
われます:

`Copy to Clipboard` マークしたテキストをクリップボードにコピー

`Paste` 打ち込んだのと同じようにクリップボードからテキストをコピー

`Choose Font...` テキストウィンドウで使うフォントの選択

`System Colors` 選択するとコントロールパネルで設定したシステムカラーを
テキストウィンドウに与える。選択しなければ白背景で文字は黒か青。

`Wrap long lines` 選択すると現在のウィンドウ幅よりも長い行を折り返す

`Update wgnuplot.ini` 現在の設定を、ユーザのアプリケーションデータディ
レクトリにある初期化ファイル `wgnuplot.ini` に保存




File: gnuplot.info, Node: メニューファイル_wgnuplot.mnu", Next: wgnuplot.ini, Prev: テキストメニュー_(text-menu)", Up: windows

メニューファイル wgnuplot.mnu", /* FIXME: this is not really related to the windows driver, but the windows platform */
.......................................................................................................................



メニューファイル `wgnuplot.mnu` が `gnuplot` と同じディレクトリにある場
合、`wgnuplot.mnu` に書かれているメニューが読み込まれます。メニューコマ
ンドは以下の通り:

      [Menu]      次の行の名前で新しいメニューを開始
      [EndMenu]   現在のメニューを終了
      [--]        水平なメニューの仕切りを入れる
      [|]         垂直なメニューの仕切りを入れる
      [Button]    メニューに押しボタンを入れ、それに次のマクロを割り当てる


マクロは 2 行で書き、最初の行はマクロ名 (メニューの見出し)、2 行目がマ
クロ本体です。先頭の空白列は無視されます。マクロコマンドは以下の通り:

[INPUT] [EOS] か {ENTER} までをプロンプトとして出力し文字列を入力[EOS]
文字列の終り (End Of String)。何も出力しない[OPEN] 開くファイル名を取得。
最初の [EOS] までが対話ウィンドウのタ
                 イトル、そこから次の [EOS] か {ENTER} までがデフォルトのフ
                 ァイル名

[SAVE] セーブファイル名を取得 ([OPEN] 同様) [DIRECTORY] ディレクトリ名
を取得。[EOS] か {ENTER} までが対話ウィンドウ
                 のタイトル"


マクロ文字の置き換えは以下の通り:

      {ENTER}     復帰 '\\r'
      {TAB}       タブ '\\011'
      {ESC}       エスケープ '\\033'
      {^A}        '\\001'
      ...
      {^_}        '\\031'


マクロは展開後の文字数が最大 256 文字に制限されています。




File: gnuplot.info, Node: wgnuplot.ini, Prev: メニューファイル_wgnuplot.mnu", Up: windows

wgnuplot.ini
............



Windows テキストウィンドウと `windows` 出力形式は、オプションのいくつか
`wgnuplot.ini` の `[WGNUPLOT]` セクションから読み込みます。このファイル
は、ユーザのアプリケーションデータディレクトリに置きます。
`wgnuplot.ini` ファイルのサンプル:

           [WGNUPLOT]
           TextOrigin=0 0
           TextSize=640 150
           TextFont=Terminal,9
           TextWrap=1
           TextLines=400
           SysColors=0
           GraphOrigin=0 150
           GraphSize=640 330
           GraphFont=Arial,10
           GraphColor=1
           GraphToTop=1
           GraphDoublebuffer=1
           GraphOversampling=0
           GraphAntialiasing=1
           GraphBackground=255 255 255
           Border=0 0 0 0 0
           Axis=192 192 192 2 2
           Line1=0 0 255 0 0
           Line2=0 255 0 0 1
           Line3=255 0 0 0 2
           Line4=255 0 255 0 3
           Line5=0 0 128 0 4



以下の設定は wgnuplot のテキストウィンドウのみに適用されます。

`TextOrigin` と `TextSize` は、テキストウィンドウの位置とサイズの指定で
す。

`TextFont` は、テキストウィンドウのフォントとサイズの指定です。

`TextWrap` は、長いテキスト行の折り返しを選択します。

`TextLines` は、テキストウィンドウの内部バッファに何行 (折り返しなし)保
持するかを指定します。現在は、この値を wgnuplot 内からは変更できません。

以下参照: `text-menu`。


`GraphFont` は、フォント名とポイント単位のフォントサイズの指定です。

`Border`, `Axis`, `Line` には、赤の強度 (0--255)、緑の強度、青の強度、
カラーの線種、白黒の線種の 5 つの数字を指定します。この線種
(`linestyle`) は、0=実線、1=鎖線、2=点線、3=一点鎖線、4=二点鎖線、となっ
ています。上の例の `wgnuplot.ini` では、Line 2 はカラーモードでは緑の実
線で、白黒モードでは鎖線になります。デフォルトの線幅は 1 ピクセルです。
線種が負の値の場合、その絶対値がピクセル単位での線幅である実線を意味し
ます。Line1 と `points` スタイルで使われる線種は 1 ピクセル幅の実線でな
ければなりません。

以下参照: `graph-menu`。"



File: gnuplot.info, Node: wxt, Next: x11, Prev: windows, Up: 出力形式の一覧

wxt
---



`wxt` 出力形式は、個々のウィンドウへの出力を生成します。ウィンドウは
wxWidgets ライブラリで生成されます (これが `wxt` の名前の由来です)。実
際の描画は、2D グラフィックライブラリ cairo と、文字列配置/レンダリング
ライブラリ pango が処理します。

書式:
             set term wxt {<n>}
                          {size <width>,<height>} {background <rgb_color>}
                          {{no}enhanced}
                          {font <font>} {fontscale <scale>}
                          {title "title"}
                          {dashed|solid} {dashlength <dl>}
                          {{no}persist}
                          {{no}raise}
                          {{no}ctrl}
                          {close}


複数の描画ウィンドウもサポートしていて、`set terminal wxt <n>` とすれば
番号 n の描画ウィンドウへ出力します。

デフォルトのウィンドウタイトルは、このウィンドウ番号に基づいています。
そのタイトルは "title" キーワードでも指定できます。

描画ウィンドウは、`gnuplot` の出力形式を別なものに変更しても残ったまま
になります。それを閉じるには、そのウィンドウに入力フォーカスがある状態
で 'q' を入力するか、ウィンドウマネージャのメニューで `close` を選択す
るか、`set term wxt <n> close` としてください。

描画領域のサイズはピクセル単位で与えます。デフォルトは 640x384 です。そ
れに加えて、ウィンドウの実際のサイズには、ツールバーやステータスバー用
のスペースも追加されます。ウィンドウのサイズを変更すると、描画グラフも
ウィンドウの新しいサイズにぴったり合うようにすぐに伸縮されます。他の対
話型出力形式と違い、`wxt`出力形式はフォント、線幅も含めて描画全体を伸縮
しますが、全体のアスペクト比は一定に保って、空いたスペースは灰色で塗り
潰します。その後 *Note replot::とタイプするかターミナルツールバーの
*Note replot:: アイコンをクリックするか新たに *Note plot:: コマンドを入
力すると、その新しい描画では完全にそのウィンドウに合わせられますが、フォ
ントサイズや線幅はそれぞれのデフォルトにリセットされます。

現在の描画ウィンドウ (`set term wxt <n>` で選択されたもの) は対話的でそ
の挙動は、他の出力形式と共通です。詳細は、以下参照: `mouse`。それには追
加のアイコンもいくつかついていますが、それらはそれ自体が説明的なものに
なっているはずです。

この出力形式は、拡張文字列処理モード (enhanced text mode) をサポートし
ていて、フォントや書式コマンド (上付、下付など) をラベルや他の文字列に
埋め込むことができます。拡張文字列処理モードの書式は他の gnuplot の出力
形式と共通です。詳細は、以下参照: `enhanced`。

<font> は "FontFace,FontSize" の形式で、FontFace と FontSize とをコンマ
で分離して一つの文字列として書きます。FontFace は、\'Arial\' のような通
常のフォント名です。FontFace を与えない場合は、wxt 出力形式は\'Sans\'
を使用します。FontSize は、ポイント単位のフォントサイズです。FontSize
を与えない場合は、wxt 出力形式は 10 ポイントを使用します。
        例:
           set term wxt font "Arial,12"
           set term wxt font "Arial" # フォント名のみ変更
           set term wxt font ",12" # フォントサイズのみ変更
           set term wxt font "" # フォント名、フォントサイズをリセット


フォントは通常のフォントサブシステムから取得します。MS-Windows 上ではコ
ントロールパネルの "Fonts" エントリで検索されるので、そこに設定します。
Unix 上では、フォントは "fontconfig" が処理します。

文字列のレイアウトに使用される pango ライブラリは utf-8 を基本としてい
ますので、wxt 出力形式ではエンコーディングを utf-8 にする必要があります。
デフォルトの入力エンコーディングは、システムの \'locale\' によります。
他のエンコーディングを使用したい場合は、それを gnuplot に知らせる必要が
あります。詳細は、以下参照: *Note encoding::。

pango は、unicode マッピングでないフォントに対しては予期せぬ結果を与え
るかもしれません。例えば Symbol フォントに対しては、wxt 出力形式は、文
字コードを unicode に変換するために http://www.unicode.org/ で提供され
るマッピングを利用します。pango は、その文字を含むフォントを見つけるた
めにあなたの Symbol フォントを検索し、そして DejaVu フォントのように、
幅広く unicode をカバーする他のフォントを探す、といった最善の作業を行お
うとします。なお、"the Symbol font" は、Acrobat Reader と一緒に
SY______.PFB" として配布されている Adobe Symbol フォントであると解釈さ
れることに注意してください。この代わりに、OpenOffice.org と一緒に
opens___.ttf" として配布される OpenSymbol フォントが同じ文字を提供して
います。Microsoft も Symbol フォント ("symbol.ttf") を配布していますが、
これは異なる文字セットになっていて、いくつかは欠けていますし、いくつか
は数式記号に変わってしまっています。あなたのデフォルトの設定でなんらか
の問題が起きた場合 (例えばデモスクリプト enhancedtext.dem がちゃんと表
示されないといった場合) は、Adobe か OpenOffice の Symbol フォントをイ
ンストールして、Microsoft の Symbol フォントを削除しないといけないかも
しれません。"windings" のような他の非標準のフォントでも動作することが報
告されています。

描画のレンダリングは、ツールバーで対話的に変更できます。可能な限り最も
良い出力を生成するためにこのレンダリングは、アンチエイリアス、オーバー
サンプリング、ヒンティングの 3 つの機構を持っています。アンチエイリアス
は、水平や垂直でない線の滑らかな表示を可能にします。オーバーサンプリン
グは、アンチエイリアスと組でピクセルよりも小さいサイズでの精度を提供し、
gnuplot が非整数座標の直線を書けるようになります。これは、対角方向の直
線 (例えば 'plot x') が左右に揺れるのを避けます。ヒンティングは、オーバー
サンプリングによって引き起こされる水平、垂直方向の線分のぼかしを避けま
す。この出力形式は、これらの直線を整数座標に揃え、それにより、1 ピクセ
ル幅の直線は本当に 1 つ (1 つより多くも少なくもない) のピクセルで描画し
ます。

デフォルトでは、描画が行われたときにウィンドウはデスクトップの一番上(最
前面) に表示されます。これは、キーワード "raise" で制御できます。キーワー
ド "persist" は、すべての描画ウインドウを明示的に閉じない間は、gnuplot
が終了しないようにします。最後に、デフォルトでは <space> キーは
gnuplot コンソールウィンドウを上に上げ、'q' は描画ウィンドウを閉じます。
キーワード "ctrl" は、それらのキー割り当てを、それぞれ <ctrl>+<space>
と <ctrl>+'q' に変更します。これらの 3 つのキーワード (raise, persist,
ctrl) は、設定ダイアログ上のやりとりでも設定し、記憶させることができま
す。"



File: gnuplot.info, Node: x11, Next: xlib, Prev: wxt, Up: 出力形式の一覧

x11
---




書式:
        set terminal x11 {<n> | window "<string>"}
                         {title "<string>"}
                         {{no}enhanced} {font <fontspec>}
                         {linewidth LW} {solid|dashed}
                         {{no}persist} {{no}raise} {{no}ctrlq}
                         {close}
                         {size XX,YY} {position XX,YY}
        set terminal x11 {reset}


複数のグラフ描画ウィンドウをサポートしています。`set terminal x11
<n>`は番号 n の描画ウィンドウに出力します。n が 0 でなければ、タイトル
が明示的に指定されていなければその番号がウィンドウタイトルとしてつけら
れ、アイコンには `Gnuplot <n>` とラベル付けされます。現在有効なウィンド
ウはカーソル記号の変化で区別できます (デフォルトカーソルから十字カーソ
ルへ)。

`x11` 出力形式は、外部のアプリケーションによって生成されている X のウィ
ンドウの X ID (16 進表記) をオプション `window` の後に文字列として指定
することで、そのウィンドウと接続できます。X は複数のクライアントにイベ
ント ButtonPress の選択を認めないため、gnuplot その外部ウィンドウをコン
テナとして使用します。この方法により、gnuplot のマウス機能はとりこまれ
た描画ウィンドウ内でも作動します。

        set term x11 window "220001e"


x11 出力形式は、利用可能なフォントの元で拡張文字列処理モード (以下参照:
`enhanced`) をサポートしています。文字列に埋め込まれ、様々な効果を与え
るフォントサイズ命令のために、デフォルトの x11 フォントがスケーラブルフォ
ントである必要があります。よって、以下の最初の例はうまくいくでしょうが、
2 番目のものはそうではないでしょう。

        set term x11 enhanced font "arial,15" 
        set title '{/=20 Big} Medium {/=5 Small}' 


        set term x11 enhanced font "terminal-14" 
        set title '{/=20 Big} Medium {/=5 Small}' 


`gnuplot` ドライバが別な出力ドライバに変更されても、描画ウィンドウは開
いたままになります。描画ウィンドウは、そのウィンドウにカーソルを置いて
文字 q を押すか、ウィンドウマネージャのメニューの `close` を選択すれば
閉じることができます。*Note reset:: を実行すれば全てのウィンドウを一度
に閉じれます。それは実際にウィンドウを管理している子プロセスを終了しま
す (もし `-persist` が指定されていなければ)。コマンド `close` は、個々
の描画ウィンドウを番号を指定して閉じるのに使うことができます。しかし、
persistのために残っているような描画ウィンドウは `close` コマンドでは閉
じることはできません。番号を省略して `close` した場合には現在有効な描画
ウィンドウを閉じます。

gnuplot の外にあるドライバ gnuplot_x11 は、プログラムのコンパイル時に選
択されたデフォルトの場所が検索されます。これは環境変数
GNUPLOT_DRIVER_DIR を異なる場所と定義することで変更できます。

描画ウィンドウは `-persisit` オプションが与えられていなければ、対話の終
了時に自動的に閉じられます。

オプション `persist` と *Note raise:: はデフォルトでは設定されていませんが、
それは、デフォルトの値 (persist == no で raise == yes) か、コマンドラ
インオプション -persist / -raise の指定か、または X のリソース値が使わ
れる、ということを意味します。[no]persist か [no]raise が指定されると
それはコマンドラインオプションや X リソースの設定よりも優先されます。
これらのオプションの設定は直ちに効力を持ちますので、既に起動しているド
ライバの挙動は変更されます。ウィンドウを前面に出せない場合は、以下参照:
*Note raise::。

オプション `title "<title name>"` は現在の描画ウィンドウに、または番号
を指定すればその番号の描画ウィンドウに対するウィンドウタイトル名をつけ
ます。そのタイトルが表示される場所、または表示されるかどうかは、使って
いる X のウィンドウマネージャに依存します。

オプション size は、描画ウィンドウのサイズを設定するのに使用できます。
このオプションは、その後に生成するウィンドウのみに適用されます。

オプション position は、描画ウィンドウの位置を設定するのに使えます。こ
のオプションは、その後に生成するウィンドウのみに適用されます。

描画サイズとアスペクト比は、`gnuplot` のウィンドウをリサイズすることで
も変更できます。

線の幅と点のサイズは `gnuplot` の `set linestyle` で変更可能です。

出力ドライバ `x11` に関しては、`gnuplot` は (起動時に)、コマンドライン、
または設定ファイルから、geometry や font, name などの通常の X Toolkitオ
プションやリソースの指定を受け付けます。それらのオプションについては
X(1) マニュアルページ (やそれと同等のもの) を参照してください。


他にも `x11` 出力形式用の多くの `gnuplot` のオプションがあります。これ
らは `gnuplot` を呼ぶときにコマンドラインオプションとして指定するか、ま
たは設定ファイル ".Xdefaults" のリソースとして指定できます。これらは起
動時に設定されるので、`gnuplot` 実行時には変更できません(`persist` と
*Note raise:: 以外は)。

* Menu:

* X11_のフォント_(x11_fonts)::
* コマンドラインオプション_(command-line_options)_::
* 白黒オプション_(monochrome_options)_::
* カラーリソース_(color_resources)_::
* 灰色階調リソース_(grayscale_resources)_::
* 線描画リソース_(line_resources)_::
* X11_pm3d_リソース_(pm3d_resources)::
* X11_の他のリソース_(other_resources)::



File: gnuplot.info, Node: X11_のフォント_(x11_fonts), Next: コマンドラインオプション_(command-line_options)_, Prev: x11, Up: x11

X11 のフォント (x11_fonts)
..........................



初期起動時は、システムの設定か、ユーザの .Xdefaults ファイルの設定か、
コマンドライン指定か、のいずれかによる X11 リソースによってデフォルトの
フォントが選択されます。

例:
           gnuplot*font: lucidasans-bold-12

新しいデフォルトのフォントを、gnuplot 内部から x11 ドライバに以下のよう
にして指示することもできます:
          `set term x11 font "<fontspec>"`

まず x11 ドライバは、与えられたフォントの正式名を X サーバに尋ねます。
この問い合わせが失敗した場合、<fontspec> を
<font>,<size>,<slant>,<weight>" と解釈し、以下の形の完全な X11 フォント
名を生成しようとします:
           -*-<font>-<weight>-<s>-*-*-<size>-*-*-*-*-*-<encoding>


      <font> はフォントの基本名 (base name) (例: Times, Symbol)
      <size> はポイントサイズ (指定がなければデフォルトは 12)
      <s> は <slant>=="italic" なら `i`, <slant>=="oblique" なら `o`, その他は `r`
      <weight> は明示的に指定されれば `medium` か `bold`、その他は `*`
      <encoding> は現在の文字集合に基づいて設定 (以下参照: *Note encoding::)

よって `set term x11 font "arial,15,italic"` は (デフォルトの encoding
だとすれば) -*-arial-*-i-*-*-15-*-*-*-*-*-iso8859-1 に変換されます。
<size>, <slant>, <weight> 指定はいずれも必須ではありません。<slant> や
<weight> を指定しなかった場合は、フォントサーバが最初に見つけた、変種の
フォントを取得するかもしれません。デフォルトのエンコーディングは、対応
する X11 リソースを使って設定することもできます。例:
           gnuplot*encoding: iso8859-15

x11 ドライバは、一般的な PostScript フォント名も認識し、それと同等で有
効な X11 フォントか TrueType フォントに置き換えます。これと同じ手順が、
`set label` の要求によるフォントの生成でも使われています。

あなたの gnuplot が configure の --enable-x11-mbfonts オプションをつけ
てインストールされたものなら、フォント名の前に "mbfont:" をつけることで
マルチバイトフォントを指定することができます。フォント名を複数指定する
個ともできますが、その場合はセミコロンで区切ります。マルチバイトフォン
トのエンコーディングは locale の設定に従いますので、環境変数LC_CTYPE を
適切な値 (例えば ja_JP.eucJP, ko_KR.EUC, zh_CN.EUC など) にに設定する必
要があります。

例:
           set term x11 font 'mbfont:kana14;k14'
                 # 'kana14' と 'k14' は日本語の X11 font エイリアス名、';'
                 # はフォント名の区切りです。
           set term x11 font 'mbfont:fixed,16,r,medium'
                 # <font>,<size>,<slant>,<weight> 形式も使用できます。
           set title '(mb strings)' font 'mbfont:*-fixed-medium-r-normal--14-*'


同じ書式は X のリソースでのデフォルトフォントの設定でも有効です。例:
           gnuplot*font: \\
               mbfont:-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0


gnuplot が --enable-x11-mbfonts でインストールされた場合、"mbfont:"をつ
けなくても 2 つの特別な PostScript フォント名 'Ryumin-Light-*',
'GothicBBB-Medium-*' (標準的な日本語 PS フォント) を使うこともできます。




File: gnuplot.info, Node: コマンドラインオプション_(command-line_options)_, Next: 白黒オプション_(monochrome_options)_, Prev: X11_のフォント_(x11_fonts), Up: x11

コマンドラインオプション (command-line_options)
...............................................


X Toolkit オプションに加え、以下のオプションが gnuplot の立ち上げ時のコ
マンドラインで、またはユーザのファイル ".Xdefaults" 内のリソースとして
指定できます (*Note raise:: と `persist` は `set term x11 [no]raise
[no]persist`によって上書きされることに注意してください):

      `-mono`     カラーディスプレイ上で強制的に白黒描画
      `-gray`     グレイスケールまたはカラーディスプレイ上でのグレイスケール描画
                  (デフォルトではグレイスケールディスプレイは白黒描画を受け付ける)
      `-clear`    新しい描画を表示する前に (瞬間的に) 画面を消去
      `-tvtwm`    geometry オプションによる位置の指定を、仮想ルートウィンドウ中の
                  現在の表示部分に対する相対的な位置にする
      `-raise`    各描画後に描画ウィンドウを最前面へ出す
      `-noraise`  各描画後に描画ウィンドウを最前面へ出すことはしない
      `-noevents` マウス、キーの入力を処理しない
      `-ctrlq   ` ウィンドウを q でなく ctrl-q で閉じる
      `-persist`  gnuplot プログラム終了後も描画ウィンドウを残す



上記のオプションはコマンドライン上での指定書式で、".Xdefaults" にリソー
スとして指定するときは異なる書式を使います。

例:
           gnuplot*gray:  on
           gnuplot*ctrlq: on


`gnuplot` は描画スタイル `points` で描画する点のサイズの制御にも、コマ
ンドラインオプション (`-pointsize <v>`) とリソース
(`gnuplot*pointsize: <v>`)を提供しています。値 `v` は点のサイズの拡大率
として使われる実数値(0 < v <= 10) で、例えば `-pointsize 2` はデフォル
トのサイズの 2 倍、`-pointsize 0.5` は普通のサイズの半分の点が使われま
す。

`-noevents` はマウス、キーの全ての入力の処理を無効にします (`q` と
`<space>` によるウィンドウの終了を除いて)。これは、gnuplot のメインプロ
グラムとは独立した形で x11 ドライバを利用するプログラムに有用です。

`-ctrlq` スィッチは、描画ウィンドウを閉じるホットキーを `q` から
`<ctrl>q` に変更します。これは、`pause mouse keystroke` によるキースト
ロークの保存機能を使っている場合には、他のアルファベット文字と同様に
`q` を保存できるようになるので有用でしょう。同じ理由で、`-ctrlq` スィッ
チは <space> ホットキーも <ctrl><space> に置き換えます。




File: gnuplot.info, Node: 白黒オプション_(monochrome_options)_, Next: カラーリソース_(color_resources)_, Prev: コマンドラインオプション_(command-line_options)_, Up: x11

白黒オプション (monochrome_options)
...................................



白黒ディスプレイに対しては `gnuplot` は描画色 (foreground) も背景色
(background) も与えません。デフォルトでは背景は白、描画は黒です。
`-rv`や `gnuplot*reverseVideo: on` の場合には背景が黒で描画は白になりま
す。




File: gnuplot.info, Node: カラーリソース_(color_resources)_, Next: 灰色階調リソース_(grayscale_resources)_, Prev: 白黒オプション_(monochrome_options)_, Up: x11

カラーリソース (color_resources)
................................



x11 出力形式は以下のリソース (ここではそのデフォルトの値を示します)、ま
たは白黒階調 (greyscale) のリソースを参照します。リソースの値はシステム
上の X11 rgb.txt ファイルに書かれている色名、または 16 進の色指定(X11
のマニュアルを参照) か、色名と強度 (0 から 1 の間の値) をコンマで区切っ
た値を使用できます。例えば `blue, 0.5` は半分の強度の青、を意味します。

      gnuplot*background:  white
      gnuplot*textColor:   black
      gnuplot*borderColor: black
      gnuplot*axisColor:   black
      gnuplot*line1Color:  red
      gnuplot*line2Color:  green
      gnuplot*line3Color:  blue
      gnuplot*line4Color:  magenta
      gnuplot*line5Color:  cyan
      gnuplot*line6Color:  sienna
      gnuplot*line7Color:  orange
      gnuplot*line8Color:  coral



これらに関するコマンドラインの書式は、背景 (bacground) に関しては単純で
通常の X11 toolkit オプションの "-bg" に直接対応します。他のものも、全
て一般的なリソースの上書きオプション "-xrm" を使うことで設定できます。

例:

背景色を変更するには
           gnuplot -background coral


線種 1 番目の色を書き換えるには
           gnuplot -xrm 'gnuplot*line1Color:blue'





File: gnuplot.info, Node: 灰色階調リソース_(grayscale_resources)_, Next: 線描画リソース_(line_resources)_, Prev: カラーリソース_(color_resources)_, Up: x11

灰色階調リソース (grayscale_resources)
......................................



`-gray` を選択すると、`gnuplot` は、グレイスケールまたはカラーディスプ
レイに対して、以下のリソースを参照します (ここではそのデフォルトの値を
示します)。デフォルトの背景色は黒であることに注意してください。

      gnuplot*background: black
      gnuplot*textGray:   white
      gnuplot*borderGray: gray50
      gnuplot*axisGray:   gray50
      gnuplot*line1Gray:  gray100
      gnuplot*line2Gray:  gray60
      gnuplot*line3Gray:  gray80
      gnuplot*line4Gray:  gray40
      gnuplot*line5Gray:  gray90
      gnuplot*line6Gray:  gray50
      gnuplot*line7Gray:  gray70
      gnuplot*line8Gray:  gray30






File: gnuplot.info, Node: 線描画リソース_(line_resources)_, Next: X11_pm3d_リソース_(pm3d_resources), Prev: 灰色階調リソース_(grayscale_resources)_, Up: x11

線描画リソース (line_resources)
...............................



`gnuplot` は描画の線の幅 (ピクセル単位) の設定のために以下のリソースを
参照します (ここではそのデフォルトの値を示します)。0 または 1 は最小の
線幅の 1 ピクセル幅を意味します。2 または 3 の値によってグラフの外観を
改善できる場合もあるでしょう。

      gnuplot*borderWidth: 2
      gnuplot*axisWidth:   0
      gnuplot*line1Width:  0
      gnuplot*line2Width:  0
      gnuplot*line3Width:  0
      gnuplot*line4Width:  0
      gnuplot*line5Width:  0
      gnuplot*line6Width:  0
      gnuplot*line7Width:  0
      gnuplot*line8Width:  0



`gnuplot` は線描画で使用する点線の形式の設定用に以下のリソースを参照し
ます。0 は実線を意味します。2 桁の 10 進数 `jk` (`j` と `k` は 1 から9
までの値) は、`j` 個のピクセルの描画に `k` 個の空白のピクセルが続くパター
ンの繰り返しからなる点線を意味します。例えば '16' は 1 個のピクセルの後
に 6 つの空白が続くパターンの点線になります。さらに、4 桁の 10進数でよ
り詳細なピクセルと空白の列のパターンを指定できます。例えば、'4441' は
4 つのピクセル、4 つの空白、4 つのピクセル、1 つの空白のパターンを意味
します。以下のデフォルトのリソース値は、白黒ディスプレイ、あるいはカラー
や白黒階調 (grayscale) ディスプレイ上の白黒描画における値です。カラーディ
スプレイでは dashed:off がデフォルトになっています。

      gnuplot*dashed:       off
      gnuplot*borderDashes:   0
      gnuplot*axisDashes:    16
      gnuplot*line1Dashes:    0
      gnuplot*line2Dashes:   42
      gnuplot*line3Dashes:   13
      gnuplot*line4Dashes:   44
      gnuplot*line5Dashes:   15
      gnuplot*line6Dashes: 4441
      gnuplot*line7Dashes:   42
      gnuplot*line8Dashes:   13


, "



File: gnuplot.info, Node: X11_pm3d_リソース_(pm3d_resources), Next: X11_の他のリソース_(other_resources), Prev: 線描画リソース_(line_resources)_, Up: x11

X11 pm3d リソース (pm3d_resources)
..................................



適切な visual クラスと色数を選択するのは、X11 アプリケーションにとって
苦しく、ちょっと厄介なことです。それは X11 が異なる深度 (depth) の 6つ
の visual 型をサポートしているからです。

デフォルトでは `gnuplot` はそのスクリーンのデフォルトの visual を使用し
ます。割り当てることのできる色数は選択された visual クラスによって変わ
ります。12bit を超える深度を持つ visual クラス上では、gnuplot は最大色
数である 0x200 (=512) 色で起動します。8bit を超える (12bit 以下で)深度
の visual クラスでは最大色数は 0x100 (=256) 色、8bit 以下のディスプレイ
では最大色は 240 (16 色は曲線の色用に取られる) になります。

gnuplot は最初に、上に述べたような最大色を割り当てようと起動します。こ
れに失敗するとその色数は、gnuplot がその全部を割り付けることができるま
で、1/2 ずつ減らされます。`maxcolors` を繰り返し 2 で割った結果、
`mincolors` よりも小さい数字になった場合、`gnuplot` は private カラーマッ
プを使おうとします。この場合、ウィンドウマネージャは、ポインタがX11 ド
ライバのウィンドウに入るか出るかでカラーマップを退避 (swapping)させる責
任を持つことになります。

`mincolors` のデフォルトの値は maxcolors / (num_colormaps > 1 ? 2 : 8)
で、num_colormaps は gnuplot が現在使用しているカラーマップの数で、これ
は、x11 のウィンドウが 1 つだけ開いているような通常の場合は 1 です。

複数の (異なる) visual クラスを、一つのスクリーン上でサポートするような
システムもあります。このようなシステムでは、gnuplot に指定したvisual ク
ラスを強制的に使わせる必要があります。例えば、デフォルトのvisual が
8bit PseudoColor だけれどもスクリーンは 24bit TrueColor をサポートして
いてむしろこちらの方を選択すべきであるような場合です。

X サーバの能力に関する情報はプログラム `xdpyinfo` で取得できます。
visual 名は次のうちの一つが選択できます: StaticGray, GrayScale,
StaticColor, PseudoColor, TrueColor, DirectColor。その X サーバが要求さ
れた visual 型の異なる複数の深度をサポートしている場合、`gnuplot` は最
も大きい (最深の) 深度の visual クラスを選択します。要求されたvisual ク
ラスがデフォルトの visual とあっていて、その型の複数のクラスがサポート
されている場合は、デフォルトの visual が選択されます。

例: 8bit PseudoColor の visual 上では、`gnuplot*maxcolors: 240`、及び
`gnuplot*mincolors: 240` と指定することで強制的に private カラーマップ
を使うようにできます。


      gnuplot*maxcolors:  <整数>
      gnuplot*mincolors:  <整数>
      gnuplot*visual:     <visual 名>


, "



File: gnuplot.info, Node: X11_の他のリソース_(other_resources), Prev: X11_pm3d_リソース_(pm3d_resources), Up: x11

X11 の他のリソース (other_resources)
....................................


デフォルトでは、現在の描画ウィンドウの内容は、ウィンドウの X イベントに
従って X11 クリップボードに送られます。'gnuplot*exportselection' のリソー
スの値を 'off' か 'false' と設定することによりこれを無効にできます。

デフォルトでは、文字の回転は速くそれを行なう方法が使われますが、背景色
によってはその付近が汚れることがあります。これが起こる場合は、リソー
ス'gnuplot.fastrotate' を 'off' にしてみてください。


      gnuplot*exportselection:  off
      gnuplot*fastrotate:  on
      gnuplot*ctrlq:  off





File: gnuplot.info, Node: xlib, Prev: x11, Up: 出力形式の一覧

xlib
----



`xlib` ドライバは X11 Windows System をサポートしています。このドライバ
は gnuplot_x11 への命令を生成しますが、`set output '<filename>'` を指定
するとそれらをファイルに書き出します。`set term x11` は、`set output
|gnuplot_x11 -noevents"; set term xlib` と同値です。`xlib` には `x11`
と同じオプションの組を与えることができます。"

* Menu:

* Bugs::			



File: gnuplot.info, Node: バグ_(Bugs), Next: Concept_Index, Prev: 出力形式_(Terminal), Up: Top

バグ (Bugs)
***********


バグリポートは e-mail で gnuplot-bugs メーリングリストへ送るか、または
SourceForge の gnuplot ウェブサイトにその報告を投稿してください。その際、
あなたが使用している gnuplot のバージョンの完全な情報、そして可能ならば
そのバグを実証するテストスクリプトを送ってください。以下参照:
`seeking-assistance`。


* Menu:

* 知られている制限_(limitations)::
* 外部ライブラリ_(External_libraries)::



File: gnuplot.info, Node: 知られている制限_(limitations), Next: 外部ライブラリ_(External_libraries), Prev: バグ_(Bugs), Up: バグ_(Bugs)

知られている制限 (limitations)
==============================

`do` や `while` ループの中括弧内では、plot '-' ... のようなインラインデー
タは使用できません。

グラフの key の並べ方と位置は、key 文字列として上付き、下付き文字が使わ
れたり、明示的なフォント指定が行われると不正確になります (4.7 では修正
済み)。







浮動小数計算例外 (浮動小数値が大きすぎる (または小さすぎる) 場合、0 で
割算した場合など) は、ユーザ定義関数において時折発生します。特に、いく
つかのデモで、浮動小数の範囲を越える数値を生成することが起こるようです。
システムがそのような例外を無視する (`gnuplot` はそのような点を定義でき
ないもの、と見なします) か、または `gnuplot` の実行を中止するかは、コン
パイル時 (あるいは実行時) の環境によります。

ガンマ関数とベッセル関数、erf 関数は複素数引数に対しては動作しません。

"時刻" として指定された座標は 24 時で折り返します。

`nohidden3d` は、全体的な設定である *Note hidden3d:: を、個々の描画に対
して免除するためのオプションですが、これは媒介変数の曲線 (parametric)に
対しては機能しません。

X11 出力形式: UTF-8 フォントの選択が困難です。プログラムは、x11 出力ウィ
ンドウのアスペクト比の正しさを追求しません。それは、"set size ratio"の
ようなコマンドが正常に機能するためには、x11 ウィンドウ自体が等しい高さ
と幅を持たなければならないからです。 すべての x11 描画ウィンドウに対し
て、一度に 1 つのカラーパレットのみが有効です。これは、異なるパレットを
使用する描画を含んだ multiplot では x11 上では正しく表示されない、とい
うことを意味します。

Qt 出力形式: コンパイル時に使用される qt 環境がレンダリングモードとして
opengl" をサポートしていなければ多角形と曲面表示はかなり遲くなる可能性
があります。




File: gnuplot.info, Node: 外部ライブラリ_(External_libraries), Prev: 知られている制限_(limitations), Up: バグ_(Bugs)

外部ライブラリ (External libraries)
===================================








外部ライブラリ GD (PNG/JPEG/GIF ドライバで使用):バージョン 2.0.33 まで
の libgd には、Adobe の Symbol フォントの文字のマッピングに関するいくつ
かのバグがあります。また、アンチエイリアスされた線分がキャンバスの上の
角と交わる場合に、ライブラリがセグメンテーションフォルトを引き起すこと
もあります。

外部ライブラリ PDFlib (PDF ドライバで使用): gnuplot は libpdf のバージョ
ン 4, 5, 6 のいずれかをリンクできます。しかし、これらはバージョンによっ
てパイプされた入出力の処理が違っていますので、パイプを使って PDF を出力
する gnuplot スクリプトは、PDFlib のあるバージョンでだけしかちゃんと動
かないかもしれません。

外部ライブラリ svgalib (linux, vgadl ドライバで使用):これは gnuplot が
root に setuid (嫌!) されることを要求しますし、ビデオカードや X11 で使
用されるグラフィックドライバに特有の多くのバグがあります。

国際化 (ロケールの設定): gnuplot は、入出力の数、時刻、日付文字列のロケー
ルに依存した書式の制御を、C ランタイムライブラリに含まれる setlocale()
を用いて行うので、ロケールの有効性や、ロケール機能のサポートのレベル
(例えば数字の 3 桁毎の区切り文字など) などは、あなたのコンピュータが提
供する国際化のサポートの度合いに依存します。


File: gnuplot.info, Node: Concept_Index, Next: Command_Index, Prev: バグ_(Bugs), Up: Top

Concept Index
*************

* Menu:

-fd指定されたファイルが見つかりません。



File: gnuplot.info, Node: Command_Index, Next: Options_Index, Prev: Concept_Index, Up: Top

Command Index
*************

* Menu:

-fd指定されたファイルが見つかりません。



File: gnuplot.info, Node: Options_Index, Next: Function_Index, Prev: Command_Index, Up: Top

Options Index
*************

* Menu:

-fd指定されたファイルが見つかりません。



File: gnuplot.info, Node: Function_Index, Next: Terminal_Index, Prev: Options_Index, Up: Top

Function Index
**************

* Menu:

-fd指定されたファイルが見つかりません。



File: gnuplot.info, Node: Terminal_Index, Prev: Function_Index, Up: Top

Terminal Index
**************

* Menu:

-fd指定されたファイルが見つかりません。


